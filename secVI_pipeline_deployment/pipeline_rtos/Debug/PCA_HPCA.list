
PCA_HPCA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800aea8  0800aea8  0001aea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d4  0800b3d4  00021184  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3dc  0800b3dc  00021184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3dc  0800b3dc  0001b3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3e0  0800b3e0  0001b3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001184  20000000  0800b3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f794  20001184  0800c568  00021184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010918  0800c568  00030918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d4e6  00000000  00000000  000211b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f00  00000000  00000000  0004e69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015b35  00000000  00000000  0005459a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013e0  00000000  00000000  0006a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003250  00000000  00000000  0006b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002ba36  00000000  00000000  0006e700  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001833f  00000000  00000000  0009a136  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fdde7  00000000  00000000  000b2475  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001b025c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050b4  00000000  00000000  001b02d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001184 	.word	0x20001184
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae8c 	.word	0x0800ae8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001188 	.word	0x20001188
 80001cc:	0800ae8c 	.word	0x0800ae8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DecisionUnitFunc>:
float32_t tracker ;
float32_t status ;
float32_t quarter_mse[4];
 
 void DecisionUnitFunc(void const* argument)
{
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	ed2d 8b02 	vpush	{d8}




	DecisionUnitEvents = xEventGroupCreateStatic(&DecisionUnitEventGroupBuffer); //create the Group Event
 8000f90:	4895      	ldr	r0, [pc, #596]	; (80011e8 <DecisionUnitFunc+0x260>)
 8000f92:	4e96      	ldr	r6, [pc, #600]	; (80011ec <DecisionUnitFunc+0x264>)
{
 8000f94:	b083      	sub	sp, #12
	DecisionUnitEvents = xEventGroupCreateStatic(&DecisionUnitEventGroupBuffer); //create the Group Event
 8000f96:	f003 fc93 	bl	80048c0 <xEventGroupCreateStatic>
 8000f9a:	6030      	str	r0, [r6, #0]
	EventBits_t uxBits;
#define IS_EVT(x) 	uxBits & x
	osDelay(250);
 8000f9c:	20fa      	movs	r0, #250	; 0xfa
 8000f9e:	f003 fc59 	bl	8004854 <osDelay>
	char* str1 = "DECISION_UNIT_EVENT_GROUP_CREATED_FAIL\r\n";
	char* str2 = "DECISION_UNIT_EVENT_GROUP_CREATED_SUCCESSFULLY\r\n";
	char* str3 = "==============================================\r\n";
	if (DecisionUnitEvents == NULL) 	HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 300);
 8000fa2:	6833      	ldr	r3, [r6, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 8107 	beq.w	80011b8 <DecisionUnitFunc+0x230>
	else 	HAL_UART_Transmit(&huart3, (uint8_t*)str2, strlen(str2), 300);
 8000faa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	498f      	ldr	r1, [pc, #572]	; (80011f0 <DecisionUnitFunc+0x268>)
 8000fb2:	4890      	ldr	r0, [pc, #576]	; (80011f4 <DecisionUnitFunc+0x26c>)
 8000fb4:	f003 f82e 	bl	8004014 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str3, strlen(str3), 300);
 8000fb8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000fbc:	2230      	movs	r2, #48	; 0x30
 8000fbe:	498e      	ldr	r1, [pc, #568]	; (80011f8 <DecisionUnitFunc+0x270>)
 8000fc0:	488c      	ldr	r0, [pc, #560]	; (80011f4 <DecisionUnitFunc+0x26c>)
 8000fc2:	f003 f827 	bl	8004014 <HAL_UART_Transmit>
	configASSERT(DecisionUnitEvents);
 8000fc6:	6830      	ldr	r0, [r6, #0]
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	f000 80fd 	beq.w	80011c8 <DecisionUnitFunc+0x240>
 8000fce:	f8df a24c 	ldr.w	sl, [pc, #588]	; 800121c <DecisionUnitFunc+0x294>
 8000fd2:	4d8a      	ldr	r5, [pc, #552]	; (80011fc <DecisionUnitFunc+0x274>)
 8000fd4:	4f8a      	ldr	r7, [pc, #552]	; (8001200 <DecisionUnitFunc+0x278>)
				   for (j = 0; j < OUT_DIM ; j++)
				   {
					   tracker += mse_buff[j];
				   }
				   if (valid_window_c!=0) tracker /= valid_window_c;
				   else tracker = 0;
 8000fd6:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 8001204 <DecisionUnitFunc+0x27c>
 8000fda:	f50a 7434 	add.w	r4, sl, #720	; 0x2d0
		   uxBits = xEventGroupWaitBits(
 8000fde:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000fe2:	e000      	b.n	8000fe6 <DecisionUnitFunc+0x5e>
 8000fe4:	6830      	ldr	r0, [r6, #0]
 8000fe6:	f8cd 8000 	str.w	r8, [sp]
 8000fea:	2300      	movs	r3, #0
 8000fec:	2201      	movs	r2, #1
 8000fee:	2107      	movs	r1, #7
 8000ff0:	f003 fc8c 	bl	800490c <xEventGroupWaitBits>
		   if (IS_EVT(NOISE_EVT))
 8000ff4:	f010 0f01 	tst.w	r0, #1
		   uxBits = xEventGroupWaitBits(
 8000ff8:	4681      	mov	r9, r0
		   if (IS_EVT(NOISE_EVT))
 8000ffa:	d004      	beq.n	8001006 <DecisionUnitFunc+0x7e>
			   if (dim_cnt == OUT_DIM-1)
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	2bb3      	cmp	r3, #179	; 0xb3
 8001000:	d030      	beq.n	8001064 <DecisionUnitFunc+0xdc>
			   else dim_cnt++; 
 8001002:	3301      	adds	r3, #1
 8001004:	602b      	str	r3, [r5, #0]
		   if (IS_EVT(VIB_EVT))
 8001006:	f019 0f02 	tst.w	r9, #2
 800100a:	d00e      	beq.n	800102a <DecisionUnitFunc+0xa2>
			   if (dim_cnt == OUT_DIM-1)
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	4a7e      	ldr	r2, [pc, #504]	; (8001208 <DecisionUnitFunc+0x280>)
 8001010:	2bb3      	cmp	r3, #179	; 0xb3
 8001012:	f8d2 c000 	ldr.w	ip, [r2]
 8001016:	d056      	beq.n	80010c6 <DecisionUnitFunc+0x13e>
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	3201      	adds	r2, #1
				   valid_window_c = 0;
				   memset(mse_buff, 0, OUT_DIM * sizeof(float32_t));
			   }
			   else
			   {
				   mse_buff[dim_cnt] = mse_res;
 800101e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
				   valid_window_c++;
 8001022:	603a      	str	r2, [r7, #0]
				   mse_buff[dim_cnt] = mse_res;
 8001024:	f8c3 c000 	str.w	ip, [r3]
				   dim_cnt++;
 8001028:	6029      	str	r1, [r5, #0]
			   }
		   }

		   if (IS_EVT(DECISION_EVT))
 800102a:	f019 0f04 	tst.w	r9, #4
 800102e:	d0d9      	beq.n	8000fe4 <DecisionUnitFunc+0x5c>
		   {	
 
			   if (quarter_mse_cnt == 2)
 8001030:	4b76      	ldr	r3, [pc, #472]	; (800120c <DecisionUnitFunc+0x284>)
 8001032:	4a77      	ldr	r2, [pc, #476]	; (8001210 <DecisionUnitFunc+0x288>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	edd2 7a00 	vldr	s15, [r2]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d06e      	beq.n	800111c <DecisionUnitFunc+0x194>
						HAL_UART_Transmit(&huart3, (uint8_t*)succ_str, strlen(succ_str), 100);
					}
			   }
			   else
			   {
				   quarter_mse[quarter_mse_cnt] =  tracker;
 800103e:	4a75      	ldr	r2, [pc, #468]	; (8001214 <DecisionUnitFunc+0x28c>)
 8001040:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001044:	edc2 7a00 	vstr	s15, [r2]
				   quarter_mse_cnt++;
				   if (tracker != 0) valid_quarters++;
 8001048:	eef5 7a40 	vcmp.f32	s15, #0.0
				   quarter_mse_cnt++;
 800104c:	4a6f      	ldr	r2, [pc, #444]	; (800120c <DecisionUnitFunc+0x284>)
 800104e:	3301      	adds	r3, #1
				   if (tracker != 0) valid_quarters++;
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				   quarter_mse_cnt++;
 8001054:	6013      	str	r3, [r2, #0]
				   if (tracker != 0) valid_quarters++;
 8001056:	d003      	beq.n	8001060 <DecisionUnitFunc+0xd8>
 8001058:	4a6f      	ldr	r2, [pc, #444]	; (8001218 <DecisionUnitFunc+0x290>)
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	6830      	ldr	r0, [r6, #0]
 8001062:	e7bc      	b.n	8000fde <DecisionUnitFunc+0x56>
				   Set_Event(DecisionUnitEvents, DECISION_EVT);
 8001064:	2104      	movs	r1, #4
 8001066:	6830      	ldr	r0, [r6, #0]
 8001068:	f000 fc5a 	bl	8001920 <Set_Event>
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <DecisionUnitFunc+0x288>)
				   dim_cnt = 0;
 800106e:	2200      	movs	r2, #0
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <DecisionUnitFunc+0x294>)
 8001076:	602a      	str	r2, [r5, #0]
					   tracker += mse_buff[j];
 8001078:	ecb3 7a01 	vldmia	r3!, {s14}
				   for (j = 0; j < OUT_DIM ; j++)
 800107c:	429c      	cmp	r4, r3
					   tracker += mse_buff[j];
 800107e:	ee77 7a87 	vadd.f32	s15, s15, s14
				   for (j = 0; j < OUT_DIM ; j++)
 8001082:	d1f9      	bne.n	8001078 <DecisionUnitFunc+0xf0>
				   if (valid_window_c!=0) tracker /= valid_window_c;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 808d 	beq.w	80011a6 <DecisionUnitFunc+0x21e>
 800108c:	ee07 3a10 	vmov	s14, r3
 8001090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001094:	eec7 6a87 	vdiv.f32	s13, s15, s14
				   valid_window_c = 0;
 8001098:	f04f 0b00 	mov.w	fp, #0
 800109c:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <DecisionUnitFunc+0x288>)
				   memset(mse_buff, 0, OUT_DIM * sizeof(float32_t));
 800109e:	485f      	ldr	r0, [pc, #380]	; (800121c <DecisionUnitFunc+0x294>)
				   valid_window_c = 0;
 80010a0:	f8c7 b000 	str.w	fp, [r7]
				   memset(mse_buff, 0, OUT_DIM * sizeof(float32_t));
 80010a4:	4659      	mov	r1, fp
 80010a6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80010aa:	edc3 6a00 	vstr	s13, [r3]
 80010ae:	f005 fdd0 	bl	8006c52 <memset>
		   if (IS_EVT(VIB_EVT))
 80010b2:	f019 0f02 	tst.w	r9, #2
 80010b6:	d0b8      	beq.n	800102a <DecisionUnitFunc+0xa2>
 80010b8:	4853      	ldr	r0, [pc, #332]	; (8001208 <DecisionUnitFunc+0x280>)
 80010ba:	2101      	movs	r1, #1
			   if (dim_cnt == OUT_DIM-1)
 80010bc:	465b      	mov	r3, fp
		   if (IS_EVT(VIB_EVT))
 80010be:	460a      	mov	r2, r1
 80010c0:	f8d0 c000 	ldr.w	ip, [r0]
 80010c4:	e7ab      	b.n	800101e <DecisionUnitFunc+0x96>
				   Set_Event(DecisionUnitEvents, DECISION_EVT);
 80010c6:	2104      	movs	r1, #4
 80010c8:	6830      	ldr	r0, [r6, #0]
				   mse_buff[dim_cnt] = mse_res;
 80010ca:	f8ca c2cc 	str.w	ip, [sl, #716]	; 0x2cc
				   Set_Event(DecisionUnitEvents, DECISION_EVT);
 80010ce:	f000 fc27 	bl	8001920 <Set_Event>
 80010d2:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <DecisionUnitFunc+0x288>)
				   valid_window_c++;
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	4b50      	ldr	r3, [pc, #320]	; (800121c <DecisionUnitFunc+0x294>)
				   dim_cnt = 0;
 80010dc:	2100      	movs	r1, #0
				   valid_window_c++;
 80010de:	3201      	adds	r2, #1
				   dim_cnt = 0;
 80010e0:	6029      	str	r1, [r5, #0]
 80010e2:	469a      	mov	sl, r3
					   tracker += mse_buff[j];
 80010e4:	ecb3 7a01 	vldmia	r3!, {s14}
				   for (j = 0; j < OUT_DIM ; j++)
 80010e8:	429c      	cmp	r4, r3
					   tracker += mse_buff[j];
 80010ea:	ee77 7a87 	vadd.f32	s15, s15, s14
				   for (j = 0; j < OUT_DIM ; j++)
 80010ee:	d1f9      	bne.n	80010e4 <DecisionUnitFunc+0x15c>
				   if (valid_window_c!=0) tracker /= valid_window_c;
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	d05b      	beq.n	80011ac <DecisionUnitFunc+0x224>
 80010f4:	ee07 2a10 	vmov	s14, r2
 80010f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
				   valid_window_c = 0;
 8001100:	f04f 0c00 	mov.w	ip, #0
 8001104:	4b42      	ldr	r3, [pc, #264]	; (8001210 <DecisionUnitFunc+0x288>)
				   memset(mse_buff, 0, OUT_DIM * sizeof(float32_t));
 8001106:	4845      	ldr	r0, [pc, #276]	; (800121c <DecisionUnitFunc+0x294>)
				   valid_window_c = 0;
 8001108:	f8c7 c000 	str.w	ip, [r7]
				   memset(mse_buff, 0, OUT_DIM * sizeof(float32_t));
 800110c:	4661      	mov	r1, ip
 800110e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001112:	edc3 6a00 	vstr	s13, [r3]
 8001116:	f005 fd9c 	bl	8006c52 <memset>
 800111a:	e786      	b.n	800102a <DecisionUnitFunc+0xa2>
					status = (quarter_mse[0] + quarter_mse[1] + quarter_mse[2] + quarter_mse[3]) / valid_quarters;
 800111c:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <DecisionUnitFunc+0x28c>)
 800111e:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <DecisionUnitFunc+0x290>)
 8001120:	ed92 6a00 	vldr	s12, [r2]
 8001124:	edd2 6a01 	vldr	s13, [r2, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	ed92 7a03 	vldr	s14, [r2, #12]
					quarter_mse_cnt = 0;
 800112e:	4937      	ldr	r1, [pc, #220]	; (800120c <DecisionUnitFunc+0x284>)
				    if (tracker != 0) valid_quarters++;
 8001130:	eef5 7a40 	vcmp.f32	s15, #0.0
					status = (quarter_mse[0] + quarter_mse[1] + quarter_mse[2] + quarter_mse[3]) / valid_quarters;
 8001134:	ee76 6a26 	vadd.f32	s13, s12, s13
				    if (tracker != 0) valid_quarters++;
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	bf18      	it	ne
 800113e:	3301      	addne	r3, #1
					status = (quarter_mse[0] + quarter_mse[1] + quarter_mse[2] + quarter_mse[3]) / valid_quarters;
 8001140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001144:	ee06 3a10 	vmov	s12, r3
 8001148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800114c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					quarter_mse_cnt = 0;
 8001150:	2300      	movs	r3, #0
					status = (quarter_mse[0] + quarter_mse[1] + quarter_mse[2] + quarter_mse[3]) / valid_quarters;
 8001152:	ee87 7a86 	vdiv.f32	s14, s15, s12
					quarter_mse_cnt = 0;
 8001156:	600b      	str	r3, [r1, #0]
					valid_quarters = 0;
 8001158:	492f      	ldr	r1, [pc, #188]	; (8001218 <DecisionUnitFunc+0x290>)
					memset(quarter_mse, 0, 4 * sizeof(float32_t));
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8001160:	60d3      	str	r3, [r2, #12]
					valid_quarters = 0;
 8001162:	600b      	str	r3, [r1, #0]
					status = (quarter_mse[0] + quarter_mse[1] + quarter_mse[2] + quarter_mse[3]) / valid_quarters;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <DecisionUnitFunc+0x298>)
						sprintf(fail_str ,"NOK because mse is %f\r\n\n", status); 
 8001166:	f04f 0b00 	mov.w	fp, #0
					status = (quarter_mse[0] + quarter_mse[1] + quarter_mse[2] + quarter_mse[3]) / valid_quarters;
 800116a:	ed83 7a00 	vstr	s14, [r3]
					if (status > MSE_THR)
 800116e:	ee17 0a10 	vmov	r0, s14
 8001172:	f7ff f9e9 	bl	8000548 <__aeabi_f2d>
 8001176:	a31a      	add	r3, pc, #104	; (adr r3, 80011e0 <DecisionUnitFunc+0x258>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	4680      	mov	r8, r0
 800117e:	4689      	mov	r9, r1
 8001180:	f7ff fcca 	bl	8000b18 <__aeabi_dcmpgt>
						sprintf(fail_str ,"NOK because mse is %f\r\n\n", status); 
 8001184:	4642      	mov	r2, r8
 8001186:	464b      	mov	r3, r9
					if (status > MSE_THR)
 8001188:	b198      	cbz	r0, 80011b2 <DecisionUnitFunc+0x22a>
						sprintf(fail_str ,"NOK because mse is %f\r\n\n", status); 
 800118a:	4926      	ldr	r1, [pc, #152]	; (8001224 <DecisionUnitFunc+0x29c>)
 800118c:	4658      	mov	r0, fp
						sprintf(succ_str, "OK because mse is %f\r\n\n", status);
 800118e:	f006 fbad 	bl	80078ec <siprintf>
						HAL_UART_Transmit(&huart3, (uint8_t*)succ_str, strlen(succ_str), 100);
 8001192:	4658      	mov	r0, fp
 8001194:	f7ff f81c 	bl	80001d0 <strlen>
 8001198:	4659      	mov	r1, fp
 800119a:	b282      	uxth	r2, r0
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <DecisionUnitFunc+0x26c>)
 80011a0:	f002 ff38 	bl	8004014 <HAL_UART_Transmit>
 80011a4:	e75c      	b.n	8001060 <DecisionUnitFunc+0xd8>
				   else tracker = 0;
 80011a6:	eef0 6a48 	vmov.f32	s13, s16
 80011aa:	e775      	b.n	8001098 <DecisionUnitFunc+0x110>
				   else tracker = 0;
 80011ac:	eef0 6a48 	vmov.f32	s13, s16
 80011b0:	e7a6      	b.n	8001100 <DecisionUnitFunc+0x178>
						sprintf(succ_str, "OK because mse is %f\r\n\n", status);
 80011b2:	4658      	mov	r0, fp
 80011b4:	491c      	ldr	r1, [pc, #112]	; (8001228 <DecisionUnitFunc+0x2a0>)
 80011b6:	e7ea      	b.n	800118e <DecisionUnitFunc+0x206>
	if (DecisionUnitEvents == NULL) 	HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 300);
 80011b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011bc:	2228      	movs	r2, #40	; 0x28
 80011be:	491b      	ldr	r1, [pc, #108]	; (800122c <DecisionUnitFunc+0x2a4>)
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <DecisionUnitFunc+0x26c>)
 80011c2:	f002 ff27 	bl	8004014 <HAL_UART_Transmit>
 80011c6:	e6f7      	b.n	8000fb8 <DecisionUnitFunc+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80011c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011cc:	f383 8811 	msr	BASEPRI, r3
 80011d0:	f3bf 8f6f 	isb	sy
 80011d4:	f3bf 8f4f 	dsb	sy
 80011d8:	e7fe      	b.n	80011d8 <DecisionUnitFunc+0x250>
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	fb0498bf 	.word	0xfb0498bf
 80011e4:	3fda80b1 	.word	0x3fda80b1
 80011e8:	200011a0 	.word	0x200011a0
 80011ec:	2000e120 	.word	0x2000e120
 80011f0:	0800af28 	.word	0x0800af28
 80011f4:	200107d0 	.word	0x200107d0
 80011f8:	0800af5c 	.word	0x0800af5c
 80011fc:	200011bc 	.word	0x200011bc
 8001200:	200011c8 	.word	0x200011c8
 8001204:	00000000 	.word	0x00000000
 8001208:	2000b018 	.word	0x2000b018
 800120c:	200011c0 	.word	0x200011c0
 8001210:	2000e124 	.word	0x2000e124
 8001214:	2000e110 	.word	0x2000e110
 8001218:	200011c4 	.word	0x200011c4
 800121c:	2000de40 	.word	0x2000de40
 8001220:	2000e128 	.word	0x2000e128
 8001224:	0800af90 	.word	0x0800af90
 8001228:	0800afac 	.word	0x0800afac
 800122c:	0800aefc 	.word	0x0800aefc

08001230 <PCAFunc>:
 * @param argument: Not used
 * @retval None
 */
 /* USER CODE END Header_PCAFunc */
void PCAFunc(void const* argument)
{
 8001230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* USER CODE BEGIN PCAFunc */
	PCAEvents = xEventGroupCreateStatic(&PCAEventGroupBuffer); //create the Group Event
 8001234:	484b      	ldr	r0, [pc, #300]	; (8001364 <PCAFunc+0x134>)
 8001236:	4d4c      	ldr	r5, [pc, #304]	; (8001368 <PCAFunc+0x138>)
{
 8001238:	b083      	sub	sp, #12
	PCAEvents = xEventGroupCreateStatic(&PCAEventGroupBuffer); //create the Group Event
 800123a:	f003 fb41 	bl	80048c0 <xEventGroupCreateStatic>
 800123e:	6028      	str	r0, [r5, #0]
	EventBits_t uxBits;
#define IS_EVT(x) 	uxBits & x
	osDelay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f003 fb07 	bl	8004854 <osDelay>
	char* str1 = "PCA_EVENT_GROUP_CREATED_FAIL\r\n";
	char* str2 = "PCA_EVENT_GROUP_CREATED_SUCCESSFULLY\r\n";
	char* str3 = "==============================================\r\n";
	if (PCAEvents == NULL) 	HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 300);
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8082 	beq.w	8001352 <PCAFunc+0x122>
	else 	HAL_UART_Transmit(&huart3, (uint8_t*)str2, strlen(str2), 300);
 800124e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001252:	2226      	movs	r2, #38	; 0x26
 8001254:	4945      	ldr	r1, [pc, #276]	; (800136c <PCAFunc+0x13c>)
 8001256:	4846      	ldr	r0, [pc, #280]	; (8001370 <PCAFunc+0x140>)
 8001258:	f002 fedc 	bl	8004014 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str3, strlen(str3), 300);
 800125c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001260:	2230      	movs	r2, #48	; 0x30
 8001262:	4944      	ldr	r1, [pc, #272]	; (8001374 <PCAFunc+0x144>)
 8001264:	4842      	ldr	r0, [pc, #264]	; (8001370 <PCAFunc+0x140>)
 8001266:	f002 fed5 	bl	8004014 <HAL_UART_Transmit>
	configASSERT(PCAEvents);
 800126a:	6828      	ldr	r0, [r5, #0]
 800126c:	2800      	cmp	r0, #0
 800126e:	d067      	beq.n	8001340 <PCAFunc+0x110>
 8001270:	4e41      	ldr	r6, [pc, #260]	; (8001378 <PCAFunc+0x148>)
 8001272:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80013a0 <PCAFunc+0x170>
 8001276:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80013a4 <PCAFunc+0x174>
}

void PCA_Trainning(float X[][N_WINDOWS], float Q[D_DIM][K_COMP], float D[K_COMP],int itt)
{
 
  HPCA_step(X, itt , Q, D);
 800127a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80013a8 <PCAFunc+0x178>
 800127e:	4f3f      	ldr	r7, [pc, #252]	; (800137c <PCAFunc+0x14c>)
 8001280:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80013ac <PCAFunc+0x17c>
 8001284:	e002      	b.n	800128c <PCAFunc+0x5c>
		if (IS_EVT(PCA_INFERRING_EVT))
 8001286:	07a3      	lsls	r3, r4, #30
 8001288:	d415      	bmi.n	80012b6 <PCAFunc+0x86>
 800128a:	6828      	ldr	r0, [r5, #0]
		uxBits = xEventGroupWaitBits(
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	2300      	movs	r3, #0
 8001294:	2103      	movs	r1, #3
 8001296:	f003 fb39 	bl	800490c <xEventGroupWaitBits>
		if (IS_EVT(PCA_TRAIN_EVT))
 800129a:	07c2      	lsls	r2, r0, #31
		uxBits = xEventGroupWaitBits(
 800129c:	4604      	mov	r4, r0
		if (IS_EVT(PCA_TRAIN_EVT))
 800129e:	d5f2      	bpl.n	8001286 <PCAFunc+0x56>
  HPCA_step(X, itt , Q, D);
 80012a0:	464b      	mov	r3, r9
 80012a2:	463a      	mov	r2, r7
 80012a4:	6831      	ldr	r1, [r6, #0]
 80012a6:	4640      	mov	r0, r8
 80012a8:	f000 ffaa 	bl	8002200 <HPCA_step>
				itt++;
 80012ac:	6833      	ldr	r3, [r6, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	6033      	str	r3, [r6, #0]
		if (IS_EVT(PCA_INFERRING_EVT))
 80012b2:	07a3      	lsls	r3, r4, #30
 80012b4:	d5e9      	bpl.n	800128a <PCAFunc+0x5a>
			if (buf_sel == 0)
 80012b6:	f8db 3000 	ldr.w	r3, [fp]
 80012ba:	b18b      	cbz	r3, 80012e0 <PCAFunc+0xb0>
			else if (buf_sel == 1)	
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d02e      	beq.n	800131e <PCAFunc+0xee>
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <PCAFunc+0x150>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 			if (arsnr_db>16)			Set_Event(DecisionUnitEvents, VIB_EVT);
 80012c6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80012ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	ddda      	ble.n	800128a <PCAFunc+0x5a>
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <PCAFunc+0x154>)
 80012d6:	2102      	movs	r1, #2
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	f000 fb21 	bl	8001920 <Set_Event>
 80012de:	e7d4      	b.n	800128a <PCAFunc+0x5a>
}

void PCA_Inferring(float X_valid[][D_DIM],float Q[][K_COMP],float FoM[2])
{
    miir_mat_compression_f32(X_valid, Q, X_compress); 
 80012e0:	4a29      	ldr	r2, [pc, #164]	; (8001388 <PCAFunc+0x158>)
 80012e2:	482a      	ldr	r0, [pc, #168]	; (800138c <PCAFunc+0x15c>)
 80012e4:	4639      	mov	r1, r7
 80012e6:	f000 fc05 	bl	8001af4 <miir_mat_compression_f32>
    miir_mat_decompression_f32(X_compress, Q, Xr); 
 80012ea:	4a29      	ldr	r2, [pc, #164]	; (8001390 <PCAFunc+0x160>)
 80012ec:	4826      	ldr	r0, [pc, #152]	; (8001388 <PCAFunc+0x158>)
 80012ee:	4639      	mov	r1, r7
 80012f0:	f000 fc1e 	bl	8001b30 <miir_mat_decompression_f32>


    FoM[0] = miir_arsnrdb_f32(X_valid, Xr); 
 80012f4:	4926      	ldr	r1, [pc, #152]	; (8001390 <PCAFunc+0x160>)
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <PCAFunc+0x15c>)
 80012f8:	f000 fc9c 	bl	8001c34 <miir_arsnrdb_f32>
    FoM[1] = miir_mse_f32(X_valid, Xr);
 80012fc:	4924      	ldr	r1, [pc, #144]	; (8001390 <PCAFunc+0x160>)
 80012fe:	4823      	ldr	r0, [pc, #140]	; (800138c <PCAFunc+0x15c>)
    FoM[0] = miir_arsnrdb_f32(X_valid, Xr); 
 8001300:	ed8a 0a00 	vstr	s0, [sl]
    FoM[1] = miir_mse_f32(X_valid, Xr);
 8001304:	f000 fcac 	bl	8001c60 <miir_mse_f32>
				mse_res = metrices[1]; 
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <PCAFunc+0x164>)
				arsnr_db = metrices[0]; 
 800130a:	edda 7a00 	vldr	s15, [sl]
				mse_res = metrices[1]; 
 800130e:	ed83 0a00 	vstr	s0, [r3]
				arsnr_db = metrices[0]; 
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <PCAFunc+0x150>)
    FoM[1] = miir_mse_f32(X_valid, Xr);
 8001314:	ed8a 0a01 	vstr	s0, [sl, #4]
				arsnr_db = metrices[0]; 
 8001318:	edc3 7a00 	vstr	s15, [r3]
 800131c:	e7d3      	b.n	80012c6 <PCAFunc+0x96>
    miir_mat_compression_f32(X_valid, Q, X_compress); 
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <PCAFunc+0x158>)
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <PCAFunc+0x168>)
 8001322:	4639      	mov	r1, r7
 8001324:	f000 fbe6 	bl	8001af4 <miir_mat_compression_f32>
    miir_mat_decompression_f32(X_compress, Q, Xr); 
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <PCAFunc+0x160>)
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <PCAFunc+0x158>)
 800132c:	4639      	mov	r1, r7
 800132e:	f000 fbff 	bl	8001b30 <miir_mat_decompression_f32>
    FoM[0] = miir_arsnrdb_f32(X_valid, Xr); 
 8001332:	4917      	ldr	r1, [pc, #92]	; (8001390 <PCAFunc+0x160>)
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <PCAFunc+0x168>)
 8001336:	f000 fc7d 	bl	8001c34 <miir_arsnrdb_f32>
    FoM[1] = miir_mse_f32(X_valid, Xr);
 800133a:	4915      	ldr	r1, [pc, #84]	; (8001390 <PCAFunc+0x160>)
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <PCAFunc+0x168>)
 800133e:	e7df      	b.n	8001300 <PCAFunc+0xd0>
 8001340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001344:	f383 8811 	msr	BASEPRI, r3
 8001348:	f3bf 8f6f 	isb	sy
 800134c:	f3bf 8f4f 	dsb	sy
 8001350:	e7fe      	b.n	8001350 <PCAFunc+0x120>
	if (PCAEvents == NULL) 	HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 300);
 8001352:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001356:	221e      	movs	r2, #30
 8001358:	4910      	ldr	r1, [pc, #64]	; (800139c <PCAFunc+0x16c>)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <PCAFunc+0x140>)
 800135c:	f002 fe5a 	bl	8004014 <HAL_UART_Transmit>
 8001360:	e77c      	b.n	800125c <PCAFunc+0x2c>
 8001362:	bf00      	nop
 8001364:	2000ae0c 	.word	0x2000ae0c
 8001368:	2000f0f4 	.word	0x2000f0f4
 800136c:	0800afe4 	.word	0x0800afe4
 8001370:	200107d0 	.word	0x200107d0
 8001374:	0800af5c 	.word	0x0800af5c
 8001378:	2000b00c 	.word	0x2000b00c
 800137c:	2000e154 	.word	0x2000e154
 8001380:	2000afe0 	.word	0x2000afe0
 8001384:	2000e120 	.word	0x2000e120
 8001388:	2000ae28 	.word	0x2000ae28
 800138c:	2000b1c8 	.word	0x2000b1c8
 8001390:	2000ae50 	.word	0x2000ae50
 8001394:	2000b018 	.word	0x2000b018
 8001398:	2000b358 	.word	0x2000b358
 800139c:	0800afc4 	.word	0x0800afc4
 80013a0:	2000f0f8 	.word	0x2000f0f8
 80013a4:	2000b010 	.word	0x2000b010
 80013a8:	2000e12c 	.word	0x2000e12c
 80013ac:	2000b038 	.word	0x2000b038

080013b0 <Training_shape.part.0>:
 
	/* END OF ELSE SAMPLE.BUFF_P */

}

void Training_shape(void)
 80013b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{

	if (buf_sel == 0)
	{

		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 80013b4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001438 <Training_shape.part.0+0x88>
 80013b8:	4e1b      	ldr	r6, [pc, #108]	; (8001428 <Training_shape.part.0+0x78>)
 80013ba:	4c1c      	ldr	r4, [pc, #112]	; (800142c <Training_shape.part.0+0x7c>)
 80013bc:	4f1c      	ldr	r7, [pc, #112]	; (8001430 <Training_shape.part.0+0x80>)
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c9 3000 	str.w	r3, [r9]
 80013c4:	1fb5      	subs	r5, r6, #6
			rx_str[3] = sample.rx_sample[i + 4];
			rx_str[4] = sample.rx_sample[i + 5];
			rx_str[5] = sample.rx_sample[i + 6];
			rx_str[6] = sample.rx_sample[i + 7];
			//rx_str[7] = sample.rx_sample[i + 7];
 			X1_train[sample.sample_c][0] = atof((char*)rx_str);
 80013c6:	46a0      	mov	r8, r4
			rx_str[0] = sample.rx_sample[i + 1];
 80013c8:	1c5a      	adds	r2, r3, #1
			rx_str[4] = sample.rx_sample[i + 5];
 80013ca:	442b      	add	r3, r5
			rx_str[0] = sample.rx_sample[i + 1];
 80013cc:	58b0      	ldr	r0, [r6, r2]
			rx_str[4] = sample.rx_sample[i + 5];
 80013ce:	7ad9      	ldrb	r1, [r3, #11]
			rx_str[5] = sample.rx_sample[i + 6];
 80013d0:	7b1a      	ldrb	r2, [r3, #12]
			rx_str[0] = sample.rx_sample[i + 1];
 80013d2:	6020      	str	r0, [r4, #0]
			rx_str[6] = sample.rx_sample[i + 7];
 80013d4:	7b5b      	ldrb	r3, [r3, #13]
			rx_str[5] = sample.rx_sample[i + 6];
 80013d6:	7162      	strb	r2, [r4, #5]
 			X1_train[sample.sample_c][0] = atof((char*)rx_str);
 80013d8:	4640      	mov	r0, r8
			rx_str[6] = sample.rx_sample[i + 7];
 80013da:	71a3      	strb	r3, [r4, #6]
			rx_str[4] = sample.rx_sample[i + 5];
 80013dc:	7121      	strb	r1, [r4, #4]
 			X1_train[sample.sample_c][0] = atof((char*)rx_str);
 80013de:	f005 fbff 	bl	8006be0 <atof>
 80013e2:	ec51 0b10 	vmov	r0, r1, d0
 80013e6:	f7ff fbff 	bl	8000be8 <__aeabi_d2f>
 80013ea:	f8b5 a004 	ldrh.w	sl, [r5, #4]
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 80013ee:	f8d9 3000 	ldr.w	r3, [r9]
 			X1_train[sample.sample_c][0] = atof((char*)rx_str);
 80013f2:	eb07 028a 	add.w	r2, r7, sl, lsl #2
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 80013f6:	3308      	adds	r3, #8
			sample.sample_c++;
 80013f8:	f10a 0a01 	add.w	sl, sl, #1
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 80013fc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 			X1_train[sample.sample_c][0] = atof((char*)rx_str);
 8001400:	6010      	str	r0, [r2, #0]
			sample.sample_c++;
 8001402:	f8a5 a004 	strh.w	sl, [r5, #4]
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 8001406:	f8c9 3000 	str.w	r3, [r9]
 800140a:	dbdd      	blt.n	80013c8 <Training_shape.part.0+0x18>
		}
				
			sample.sample_c = 0;
 800140c:	2300      	movs	r3, #0
		 	miir_zscore_f32(N_WINDOWS, X1_train, D_DIM); 
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <Training_shape.part.0+0x80>)
			sample.sample_c = 0;
 8001410:	80ab      	strh	r3, [r5, #4]
		 	miir_zscore_f32(N_WINDOWS, X1_train, D_DIM); 
 8001412:	2001      	movs	r0, #1
 8001414:	2264      	movs	r2, #100	; 0x64
 8001416:	f000 faad 	bl	8001974 <miir_zscore_f32>
			Set_Event(PCAEvents, PCA_TRAIN_EVT);
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <Training_shape.part.0+0x84>)
 800141c:	2101      	movs	r1, #1
 800141e:	6818      	ldr	r0, [r3, #0]
	}
	 
}
 8001420:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			Set_Event(PCAEvents, PCA_TRAIN_EVT);
 8001424:	f000 ba7c 	b.w	8001920 <Set_Event>
 8001428:	2000f112 	.word	0x2000f112
 800142c:	2000f100 	.word	0x2000f100
 8001430:	2000b038 	.word	0x2000b038
 8001434:	2000f0f4 	.word	0x2000f0f4
 8001438:	2000b4e8 	.word	0x2000b4e8

0800143c <VibrationFunc>:
{
 800143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 VibrationEvents = xEventGroupCreateStatic(&VibrationEventGroupBuffer); //create the Group Event
 8001440:	4828      	ldr	r0, [pc, #160]	; (80014e4 <VibrationFunc+0xa8>)
 8001442:	4d29      	ldr	r5, [pc, #164]	; (80014e8 <VibrationFunc+0xac>)
{
 8001444:	b082      	sub	sp, #8
	 VibrationEvents = xEventGroupCreateStatic(&VibrationEventGroupBuffer); //create the Group Event
 8001446:	f003 fa3b 	bl	80048c0 <xEventGroupCreateStatic>
 800144a:	6028      	str	r0, [r5, #0]
	 osDelay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f003 fa01 	bl	8004854 <osDelay>
	 if (VibrationEvents == NULL) 	HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 300);
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d03c      	beq.n	80014d2 <VibrationFunc+0x96>
	 else 	HAL_UART_Transmit(&huart3, (uint8_t*)str2, strlen(str2), 300);
 8001458:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800145c:	222c      	movs	r2, #44	; 0x2c
 800145e:	4923      	ldr	r1, [pc, #140]	; (80014ec <VibrationFunc+0xb0>)
 8001460:	4823      	ldr	r0, [pc, #140]	; (80014f0 <VibrationFunc+0xb4>)
 8001462:	f002 fdd7 	bl	8004014 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart3, (uint8_t*)str3, strlen(str3), 300);
 8001466:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	4921      	ldr	r1, [pc, #132]	; (80014f4 <VibrationFunc+0xb8>)
 800146e:	4820      	ldr	r0, [pc, #128]	; (80014f0 <VibrationFunc+0xb4>)
 8001470:	f002 fdd0 	bl	8004014 <HAL_UART_Transmit>
	 configASSERT(VibrationEvents);
 8001474:	6828      	ldr	r0, [r5, #0]
 8001476:	b318      	cbz	r0, 80014c0 <VibrationFunc+0x84>
	 Set_Event(VibrationEvents, UART_INIT);
 8001478:	2101      	movs	r1, #1
 800147a:	f000 fa51 	bl	8001920 <Set_Event>
	 sample.sample_c = 0;
 800147e:	4e1e      	ldr	r6, [pc, #120]	; (80014f8 <VibrationFunc+0xbc>)
	 buf_sel = 0;
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <VibrationFunc+0xc0>)
			HAL_UART_Receive_DMA(&huart2, sample.rx_sample, RX_SIZE);
 8001482:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001508 <VibrationFunc+0xcc>
			HAL_UART_Transmit(&huart3, (uint8_t *)str1, strlen(str1), 300);
 8001486:	4f1e      	ldr	r7, [pc, #120]	; (8001500 <VibrationFunc+0xc4>)
	 sample.sample_c = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	80b3      	strh	r3, [r6, #4]
	 buf_sel = 0;
 800148c:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA(&huart2, sample.rx_sample, RX_SIZE);
 800148e:	3606      	adds	r6, #6
		uxBits = xEventGroupWaitBits(
 8001490:	2464      	movs	r4, #100	; 0x64
 8001492:	2201      	movs	r2, #1
 8001494:	2300      	movs	r3, #0
 8001496:	6828      	ldr	r0, [r5, #0]
 8001498:	9400      	str	r4, [sp, #0]
 800149a:	4611      	mov	r1, r2
 800149c:	f003 fa36 	bl	800490c <xEventGroupWaitBits>
		if (IS_EVT(UART_INIT))
 80014a0:	07c3      	lsls	r3, r0, #31
 80014a2:	d5f6      	bpl.n	8001492 <VibrationFunc+0x56>
			HAL_UART_Receive_DMA(&huart2, sample.rx_sample, RX_SIZE);
 80014a4:	4631      	mov	r1, r6
 80014a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80014aa:	4640      	mov	r0, r8
 80014ac:	f002 fe6e 	bl	800418c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit(&huart3, (uint8_t *)str1, strlen(str1), 300);
 80014b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014b4:	2212      	movs	r2, #18
 80014b6:	4639      	mov	r1, r7
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <VibrationFunc+0xb4>)
 80014ba:	f002 fdab 	bl	8004014 <HAL_UART_Transmit>
 80014be:	e7e7      	b.n	8001490 <VibrationFunc+0x54>
 80014c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c4:	f383 8811 	msr	BASEPRI, r3
 80014c8:	f3bf 8f6f 	isb	sy
 80014cc:	f3bf 8f4f 	dsb	sy
 80014d0:	e7fe      	b.n	80014d0 <VibrationFunc+0x94>
	 if (VibrationEvents == NULL) 	HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 300);
 80014d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014d6:	2224      	movs	r2, #36	; 0x24
 80014d8:	490a      	ldr	r1, [pc, #40]	; (8001504 <VibrationFunc+0xc8>)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <VibrationFunc+0xb4>)
 80014dc:	f002 fd9a 	bl	8004014 <HAL_UART_Transmit>
 80014e0:	e7c1      	b.n	8001466 <VibrationFunc+0x2a>
 80014e2:	bf00      	nop
 80014e4:	2000b01c 	.word	0x2000b01c
 80014e8:	2000f0fc 	.word	0x2000f0fc
 80014ec:	0800b034 	.word	0x0800b034
 80014f0:	200107d0 	.word	0x200107d0
 80014f4:	0800af5c 	.word	0x0800af5c
 80014f8:	2000f10c 	.word	0x2000f10c
 80014fc:	2000f0f8 	.word	0x2000f0f8
 8001500:	0800b064 	.word	0x0800b064
 8001504:	0800b00c 	.word	0x0800b00c
 8001508:	20010850 	.word	0x20010850

0800150c <Inferring_shape>:


void Inferring_shape(void)
{

	if (buf_sel == 0)
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <Inferring_shape+0xf0>)
 800150e:	681b      	ldr	r3, [r3, #0]
{
 8001510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf_sel == 0)
 8001514:	2b00      	cmp	r3, #0
 8001516:	d139      	bne.n	800158c <Inferring_shape+0x80>
	{

		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 8001518:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8001614 <Inferring_shape+0x108>
 800151c:	4e38      	ldr	r6, [pc, #224]	; (8001600 <Inferring_shape+0xf4>)
 800151e:	4c39      	ldr	r4, [pc, #228]	; (8001604 <Inferring_shape+0xf8>)
 8001520:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001608 <Inferring_shape+0xfc>
 8001524:	f8ca 3000 	str.w	r3, [sl]
 8001528:	1fb5      	subs	r5, r6, #6
			rx_str[4] = sample.rx_sample[i + 5];
			rx_str[5] = sample.rx_sample[i + 6];
			rx_str[6] = sample.rx_sample[i + 7];
			//rx_str[7] = sample.rx_sample[i + 7];
 
				X1_valid[0][sample.sample_c] = atof((char*)rx_str);
 800152a:	4627      	mov	r7, r4
			rx_str[0] = sample.rx_sample[i + 1];
 800152c:	1c5a      	adds	r2, r3, #1
			rx_str[4] = sample.rx_sample[i + 5];
 800152e:	442b      	add	r3, r5
			rx_str[0] = sample.rx_sample[i + 1];
 8001530:	58b0      	ldr	r0, [r6, r2]
			rx_str[4] = sample.rx_sample[i + 5];
 8001532:	7ad9      	ldrb	r1, [r3, #11]
			rx_str[5] = sample.rx_sample[i + 6];
 8001534:	7b1a      	ldrb	r2, [r3, #12]
			rx_str[0] = sample.rx_sample[i + 1];
 8001536:	6020      	str	r0, [r4, #0]
			rx_str[6] = sample.rx_sample[i + 7];
 8001538:	7b5b      	ldrb	r3, [r3, #13]
			rx_str[5] = sample.rx_sample[i + 6];
 800153a:	7162      	strb	r2, [r4, #5]
				X1_valid[0][sample.sample_c] = atof((char*)rx_str);
 800153c:	4638      	mov	r0, r7
			rx_str[6] = sample.rx_sample[i + 7];
 800153e:	71a3      	strb	r3, [r4, #6]
			rx_str[4] = sample.rx_sample[i + 5];
 8001540:	7121      	strb	r1, [r4, #4]
				X1_valid[0][sample.sample_c] = atof((char*)rx_str);
 8001542:	f005 fb4d 	bl	8006be0 <atof>
 8001546:	ec51 0b10 	vmov	r0, r1, d0
 800154a:	f7ff fb4d 	bl	8000be8 <__aeabi_d2f>
 800154e:	f8b5 9004 	ldrh.w	r9, [r5, #4]
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 8001552:	f8da 3000 	ldr.w	r3, [sl]
				X1_valid[0][sample.sample_c] = atof((char*)rx_str);
 8001556:	eb08 0289 	add.w	r2, r8, r9, lsl #2
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 800155a:	3308      	adds	r3, #8
				sample.sample_c++;
 800155c:	f109 0901 	add.w	r9, r9, #1
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 8001560:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
				X1_valid[0][sample.sample_c] = atof((char*)rx_str);
 8001564:	6010      	str	r0, [r2, #0]
				sample.sample_c++;
 8001566:	f8a5 9004 	strh.w	r9, [r5, #4]
		for (i = 0; i < RX_SIZE >> 1; i = i + 8)
 800156a:	f8ca 3000 	str.w	r3, [sl]
 800156e:	dbdd      	blt.n	800152c <Inferring_shape+0x20>
		}
				sample.sample_c = 0;

		/* Vibrations z-scoring function - I can just call it here */ 
			miir_zscore_f32(D_DIM, X1_valid, D_DIM); 
 8001570:	2264      	movs	r2, #100	; 0x64
 8001572:	4925      	ldr	r1, [pc, #148]	; (8001608 <Inferring_shape+0xfc>)
 8001574:	4610      	mov	r0, r2
				sample.sample_c = 0;
 8001576:	2300      	movs	r3, #0
			rx_str[5] = sample.rx_sample[i + 6];
			rx_str[6] = sample.rx_sample[i + 7];
			X2[0][sample.sample_c] = atof((char*)rx_str);
			sample.sample_c++;
		}
		sample.sample_c = 0;
 8001578:	80ab      	strh	r3, [r5, #4]
		/* Vibrations z-scoring function - I can just call it here */
		miir_zscore_f32(D_DIM, X2, D_DIM); 
 800157a:	f000 f9fb 	bl	8001974 <miir_zscore_f32>
		Set_Event(PCAEvents, PCA_INFERRING_EVT);
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <Inferring_shape+0x100>)
 8001580:	2102      	movs	r1, #2
 8001582:	6818      	ldr	r0, [r3, #0]
	}
}
 8001584:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		Set_Event(PCAEvents, PCA_INFERRING_EVT);
 8001588:	f000 b9ca 	b.w	8001920 <Set_Event>
	else if (buf_sel == 1)
 800158c:	2b01      	cmp	r3, #1
 800158e:	d001      	beq.n	8001594 <Inferring_shape+0x88>
}
 8001590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = RX_SIZE >> 1; i < RX_SIZE; i = i + 8)
 8001594:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001614 <Inferring_shape+0x108>
 8001598:	4e19      	ldr	r6, [pc, #100]	; (8001600 <Inferring_shape+0xf4>)
 800159a:	4c1a      	ldr	r4, [pc, #104]	; (8001604 <Inferring_shape+0xf8>)
 800159c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001610 <Inferring_shape+0x104>
 80015a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80015a4:	f8ca 3000 	str.w	r3, [sl]
 80015a8:	1fb5      	subs	r5, r6, #6
			X2[0][sample.sample_c] = atof((char*)rx_str);
 80015aa:	4627      	mov	r7, r4
			rx_str[0] = sample.rx_sample[i + 1];
 80015ac:	1c5a      	adds	r2, r3, #1
			rx_str[4] = sample.rx_sample[i + 5];
 80015ae:	442b      	add	r3, r5
			rx_str[0] = sample.rx_sample[i + 1];
 80015b0:	58b0      	ldr	r0, [r6, r2]
			rx_str[4] = sample.rx_sample[i + 5];
 80015b2:	7ad9      	ldrb	r1, [r3, #11]
			rx_str[5] = sample.rx_sample[i + 6];
 80015b4:	7b1a      	ldrb	r2, [r3, #12]
			rx_str[0] = sample.rx_sample[i + 1];
 80015b6:	6020      	str	r0, [r4, #0]
			rx_str[6] = sample.rx_sample[i + 7];
 80015b8:	7b5b      	ldrb	r3, [r3, #13]
			rx_str[5] = sample.rx_sample[i + 6];
 80015ba:	7162      	strb	r2, [r4, #5]
			X2[0][sample.sample_c] = atof((char*)rx_str);
 80015bc:	4638      	mov	r0, r7
			rx_str[6] = sample.rx_sample[i + 7];
 80015be:	71a3      	strb	r3, [r4, #6]
			rx_str[4] = sample.rx_sample[i + 5];
 80015c0:	7121      	strb	r1, [r4, #4]
			X2[0][sample.sample_c] = atof((char*)rx_str);
 80015c2:	f005 fb0d 	bl	8006be0 <atof>
 80015c6:	ec51 0b10 	vmov	r0, r1, d0
 80015ca:	f7ff fb0d 	bl	8000be8 <__aeabi_d2f>
 80015ce:	f8b5 9004 	ldrh.w	r9, [r5, #4]
		for (i = RX_SIZE >> 1; i < RX_SIZE; i = i + 8)
 80015d2:	f8da 3000 	ldr.w	r3, [sl]
			X2[0][sample.sample_c] = atof((char*)rx_str);
 80015d6:	eb08 0289 	add.w	r2, r8, r9, lsl #2
		for (i = RX_SIZE >> 1; i < RX_SIZE; i = i + 8)
 80015da:	3308      	adds	r3, #8
			sample.sample_c++;
 80015dc:	f109 0901 	add.w	r9, r9, #1
		for (i = RX_SIZE >> 1; i < RX_SIZE; i = i + 8)
 80015e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
			X2[0][sample.sample_c] = atof((char*)rx_str);
 80015e4:	6010      	str	r0, [r2, #0]
			sample.sample_c++;
 80015e6:	f8a5 9004 	strh.w	r9, [r5, #4]
		for (i = RX_SIZE >> 1; i < RX_SIZE; i = i + 8)
 80015ea:	f8ca 3000 	str.w	r3, [sl]
 80015ee:	dbdd      	blt.n	80015ac <Inferring_shape+0xa0>
		miir_zscore_f32(D_DIM, X2, D_DIM); 
 80015f0:	2264      	movs	r2, #100	; 0x64
 80015f2:	4610      	mov	r0, r2
		sample.sample_c = 0;
 80015f4:	2300      	movs	r3, #0
		miir_zscore_f32(D_DIM, X2, D_DIM); 
 80015f6:	4906      	ldr	r1, [pc, #24]	; (8001610 <Inferring_shape+0x104>)
 80015f8:	e7be      	b.n	8001578 <Inferring_shape+0x6c>
 80015fa:	bf00      	nop
 80015fc:	2000f0f8 	.word	0x2000f0f8
 8001600:	2000f112 	.word	0x2000f112
 8001604:	2000f100 	.word	0x2000f100
 8001608:	2000b1c8 	.word	0x2000b1c8
 800160c:	2000f0f4 	.word	0x2000f0f4
 8001610:	2000b358 	.word	0x2000b358
 8001614:	2000b4e8 	.word	0x2000b4e8

08001618 <HAL_UART_RxHalfCpltCallback>:
	if (arsnr_db > 16)
 8001618:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_UART_RxHalfCpltCallback+0x24>)
	buf_sel = 0;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_UART_RxHalfCpltCallback+0x28>)
	if (arsnr_db > 16)
 800161c:	ed92 7a00 	vldr	s14, [r2]
 8001620:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8001624:	eeb4 7ae7 	vcmpe.f32	s14, s15
	buf_sel = 0;
 8001628:	2200      	movs	r2, #0
	if (arsnr_db > 16)
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	buf_sel = 0;
 800162e:	601a      	str	r2, [r3, #0]
	if (arsnr_db > 16)
 8001630:	dc01      	bgt.n	8001636 <HAL_UART_RxHalfCpltCallback+0x1e>
 8001632:	f7ff bebd 	b.w	80013b0 <Training_shape.part.0>
				Inferring_shape();
 8001636:	f7ff bf69 	b.w	800150c <Inferring_shape>
 800163a:	bf00      	nop
 800163c:	2000afe0 	.word	0x2000afe0
 8001640:	2000f0f8 	.word	0x2000f0f8

08001644 <HAL_UART_RxCpltCallback>:
	buf_sel = 1;
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_UART_RxCpltCallback+0xc>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
	Inferring_shape();
 800164a:	f7ff bf5f 	b.w	800150c <Inferring_shape>
 800164e:	bf00      	nop
 8001650:	2000f0f8 	.word	0x2000f0f8

08001654 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <vApplicationGetIdleTaskMemory+0x14>)
 8001656:	6003      	str	r3, [r0, #0]
{
 8001658:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800165a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800165c:	4c03      	ldr	r4, [pc, #12]	; (800166c <vApplicationGetIdleTaskMemory+0x18>)
 800165e:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001660:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8001662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	2000b6ec 	.word	0x2000b6ec
 800166c:	2000b4ec 	.word	0x2000b4ec

08001670 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <vApplicationGetTimerTaskMemory+0x18>)
 8001672:	6003      	str	r3, [r0, #0]
{
 8001674:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001676:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800167a:	4c04      	ldr	r4, [pc, #16]	; (800168c <vApplicationGetTimerTaskMemory+0x1c>)
 800167c:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800167e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8001680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000bb40 	.word	0x2000bb40
 800168c:	2000b740 	.word	0x2000b740

08001690 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001690:	b570      	push	{r4, r5, r6, lr}
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of VibrationTask */
  osThreadDef(VibrationTask, VibrationFunc, osPriorityAboveNormal, 0, 128);
 8001692:	4c17      	ldr	r4, [pc, #92]	; (80016f0 <MX_FREERTOS_Init+0x60>)
 8001694:	4626      	mov	r6, r4
 8001696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8001698:	b096      	sub	sp, #88	; 0x58
  osThreadDef(VibrationTask, VibrationFunc, osPriorityAboveNormal, 0, 128);
 800169a:	ad01      	add	r5, sp, #4
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80016a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  VibrationTaskHandle = osThreadCreate(osThread(VibrationTask), NULL);
 80016a6:	2100      	movs	r1, #0
 80016a8:	a801      	add	r0, sp, #4
 80016aa:	f003 f8a9 	bl	8004800 <osThreadCreate>
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_FREERTOS_Init+0x64>)

  /* definition and creation of PCATask */
  osThreadDef(PCATask, PCAFunc, osPriorityNormal, 0, 128);
 80016b0:	f104 061c 	add.w	r6, r4, #28
  VibrationTaskHandle = osThreadCreate(osThread(VibrationTask), NULL);
 80016b4:	6018      	str	r0, [r3, #0]
  osThreadDef(PCATask, PCAFunc, osPriorityNormal, 0, 128);
 80016b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016b8:	ad08      	add	r5, sp, #32
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80016c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  PCATaskHandle = osThreadCreate(osThread(PCATask), NULL);
 80016c4:	2100      	movs	r1, #0
 80016c6:	a808      	add	r0, sp, #32
 80016c8:	f003 f89a 	bl	8004800 <osThreadCreate>
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_FREERTOS_Init+0x68>)
  /* definition and creation of HPCATask */
 // osThreadDef(HPCATask, HPCAFunc, osPriorityBelowNormal, 0, 128);
  //HPCATaskHandle = osThreadCreate(osThread(HPCATask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(DecisionUnitTask, DecisionUnitFunc, osPriorityBelowNormal, 0, 128);
 80016ce:	3438      	adds	r4, #56	; 0x38
  PCATaskHandle = osThreadCreate(osThread(PCATask), NULL);
 80016d0:	6018      	str	r0, [r3, #0]
  osThreadDef(DecisionUnitTask, DecisionUnitFunc, osPriorityBelowNormal, 0, 128);
 80016d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d4:	ad0f      	add	r5, sp, #60	; 0x3c
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  DecisionUnitTaskHandle = osThreadCreate(osThread(DecisionUnitTask), NULL);
 80016e0:	2100      	movs	r1, #0
 80016e2:	a80f      	add	r0, sp, #60	; 0x3c
 80016e4:	f003 f88c 	bl	8004800 <osThreadCreate>
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <MX_FREERTOS_Init+0x6c>)
 80016ea:	6018      	str	r0, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80016ec:	b016      	add	sp, #88	; 0x58
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
 80016f0:	0800aea8 	.word	0x0800aea8
 80016f4:	2000f758 	.word	0x2000f758
 80016f8:	2000f754 	.word	0x2000f754
 80016fc:	2000f75c 	.word	0x2000f75c

08001700 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_MspInit+0x38>)
 8001702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	661a      	str	r2, [r3, #96]	; 0x60
 800170a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800170c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	f002 0201 	and.w	r2, r2, #1
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001718:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171c:	659a      	str	r2, [r3, #88]	; 0x58
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	210f      	movs	r1, #15
 800172c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	f001 b861 	b.w	80027f8 <HAL_NVIC_SetPriority>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800173e:	4601      	mov	r1, r0
{
 8001740:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001742:	2200      	movs	r2, #0
 8001744:	2019      	movs	r0, #25
 8001746:	f001 f857 	bl	80027f8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800174a:	2019      	movs	r0, #25
 800174c:	f001 f88a 	bl	8002864 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_InitTick+0x6c>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001752:	4c16      	ldr	r4, [pc, #88]	; (80017ac <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001754:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800175a:	661a      	str	r2, [r3, #96]	; 0x60
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001762:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001764:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001766:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001768:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176a:	f001 ff5b 	bl	8003624 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800176e:	f001 ff47 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_InitTick+0x78>)
 8001776:	6022      	str	r2, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001778:	fba3 2300 	umull	r2, r3, r3, r0
 800177c:	0c9b      	lsrs	r3, r3, #18
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800177e:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001780:	3b01      	subs	r3, #1
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001782:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001786:	4620      	mov	r0, r4
  htim1.Init.Prescaler = uwPrescalerValue;
 8001788:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = 0;
 800178a:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001790:	f002 fa86 	bl	8003ca0 <HAL_TIM_Base_Init>
 8001794:	b110      	cbz	r0, 800179c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001796:	2001      	movs	r0, #1
}
 8001798:	b008      	add	sp, #32
 800179a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800179c:	4620      	mov	r0, r4
 800179e:	f002 fb0b 	bl	8003db8 <HAL_TIM_Base_Start_IT>
}
 80017a2:	b008      	add	sp, #32
 80017a4:	bd10      	pop	{r4, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	2000f764 	.word	0x2000f764
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	e7fe      	b.n	80017bc <HardFault_Handler>
 80017be:	bf00      	nop

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler>
 80017c2:	bf00      	nop

080017c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c4:	e7fe      	b.n	80017c4 <BusFault_Handler>
 80017c6:	bf00      	nop

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler>
 80017ca:	bf00      	nop

080017cc <DebugMon_Handler>:
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017d0:	4801      	ldr	r0, [pc, #4]	; (80017d8 <DMA1_Channel6_IRQHandler+0x8>)
 80017d2:	f001 b907 	b.w	80029e4 <HAL_DMA_IRQHandler>
 80017d6:	bf00      	nop
 80017d8:	20010788 	.word	0x20010788

080017dc <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017dc:	4801      	ldr	r0, [pc, #4]	; (80017e4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80017de:	f002 bb09 	b.w	8003df4 <HAL_TIM_IRQHandler>
 80017e2:	bf00      	nop
 80017e4:	2000f764 	.word	0x2000f764

080017e8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017e8:	4801      	ldr	r0, [pc, #4]	; (80017f0 <TIM6_DAC_IRQHandler+0x8>)
 80017ea:	f002 bb03 	b.w	8003df4 <HAL_TIM_IRQHandler>
 80017ee:	bf00      	nop
 80017f0:	20010748 	.word	0x20010748

080017f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <_sbrk+0x34>)
{
 80017f6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80017f8:	6813      	ldr	r3, [r2, #0]
 80017fa:	b133      	cbz	r3, 800180a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80017fc:	4418      	add	r0, r3
 80017fe:	4669      	mov	r1, sp
 8001800:	4288      	cmp	r0, r1
 8001802:	d808      	bhi.n	8001816 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001804:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x38>)
 800180c:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800180e:	4418      	add	r0, r3
 8001810:	4669      	mov	r1, sp
 8001812:	4288      	cmp	r0, r1
 8001814:	d9f6      	bls.n	8001804 <_sbrk+0x10>
		errno = ENOMEM;
 8001816:	f005 f9e7 	bl	8006be8 <__errno>
 800181a:	230c      	movs	r3, #12
 800181c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd08      	pop	{r3, pc}
 8001826:	bf00      	nop
 8001828:	2000bb94 	.word	0x2000bb94
 800182c:	20010918 	.word	0x20010918

08001830 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4911      	ldr	r1, [pc, #68]	; (8001878 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001838:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800183c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8001842:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001844:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800184c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001854:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001858:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 800185c:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800185e:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001860:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001862:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8001866:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800186a:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 800186c:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800186e:	608c      	str	r4, [r1, #8]
#endif
}
 8001870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	40021000 	.word	0x40021000

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	2100      	movs	r1, #0
{
 8001884:	b0b9      	sub	sp, #228	; 0xe4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001886:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001888:	2224      	movs	r2, #36	; 0x24
 800188a:	a806      	add	r0, sp, #24
 800188c:	f005 f9e1 	bl	8006c52 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001890:	4621      	mov	r1, r4
 8001892:	a816      	add	r0, sp, #88	; 0x58
 8001894:	2288      	movs	r2, #136	; 0x88
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001896:	e9cd 4400 	strd	r4, r4, [sp]
 800189a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800189e:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	f005 f9d7 	bl	8006c52 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018a4:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018a6:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018aa:	2160      	movs	r1, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018ac:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 80018b0:	2228      	movs	r2, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018b2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018b8:	2307      	movs	r3, #7
 80018ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018be:	910d      	str	r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c0:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018c2:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c6:	f001 fa81 	bl	8002dcc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ce:	2104      	movs	r1, #4
 80018d0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018dc:	f001 fde6 	bl	80034ac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018e2:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018e4:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e6:	f001 ffcb 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018ee:	f001 f9cf 	bl	8002c90 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80018f2:	b039      	add	sp, #228	; 0xe4
 80018f4:	bd30      	pop	{r4, r5, pc}
 80018f6:	bf00      	nop

080018f8 <main>:
{
 80018f8:	b508      	push	{r3, lr}
  HAL_Init();
 80018fa:	f000 ff45 	bl	8002788 <HAL_Init>
  SystemClock_Config();
 80018fe:	f7ff ffbf 	bl	8001880 <SystemClock_Config>
  MX_GPIO_Init();
 8001902:	f000 fdd9 	bl	80024b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001906:	f000 fdbd 	bl	8002484 <MX_DMA_Init>
  MX_TIM6_Init();
 800190a:	f000 fe19 	bl	8002540 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800190e:	f000 fe5f 	bl	80025d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001912:	f000 fe7b 	bl	800260c <MX_USART3_UART_Init>
  MX_FREERTOS_Init(); 
 8001916:	f7ff febb 	bl	8001690 <MX_FREERTOS_Init>
  osKernelStart();
 800191a:	f002 ff6b 	bl	80047f4 <osKernelStart>
 800191e:	e7fe      	b.n	800191e <main+0x26>

08001920 <Set_Event>:

/* USER CODE BEGIN 4 */
void Set_Event(void* xEventGroup, uint32_t xEvent)
{
 8001920:	b500      	push	{lr}
 8001922:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken, xResult;
	/* xHigherPriorityTaskWoken must be initialized to pdFALSE. */
	xHigherPriorityTaskWoken = pdFALSE;
 8001924:	ab02      	add	r3, sp, #8
 8001926:	2200      	movs	r2, #0
 8001928:	f843 2d04 	str.w	r2, [r3, #-4]!
	/* Set bit 0 and bit 4 in xEventGroup. */
	xResult = xEventGroupSetBitsFromISR(xEventGroup, /* The event group being updated. */
 800192c:	460a      	mov	r2, r1
 800192e:	4601      	mov	r1, r0
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <Set_Event+0x34>)
 8001932:	f004 fe97 	bl	8006664 <xTimerPendFunctionCallFromISR>
		xEvent, /* The bits being set. */
		&xHigherPriorityTaskWoken);
	/* Was the message posted successfully? */
	if (xResult != pdFAIL)
 8001936:	b148      	cbz	r0, 800194c <Set_Event+0x2c>
	{
		/* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
		switch should be requested. The macro used is port specific and will
		be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
		the documentation page for the port being used. */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001938:	9b01      	ldr	r3, [sp, #4]
 800193a:	b13b      	cbz	r3, 800194c <Set_Event+0x2c>
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <Set_Event+0x38>)
 800193e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	f3bf 8f6f 	isb	sy
	}

}
 800194c:	b003      	add	sp, #12
 800194e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001952:	bf00      	nop
 8001954:	08004a19 	.word	0x08004a19
 8001958:	e000ed04 	.word	0xe000ed04

0800195c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800195c:	6802      	ldr	r2, [r0, #0]
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001960:	429a      	cmp	r2, r3
 8001962:	d000      	beq.n	8001966 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001964:	4770      	bx	lr
    HAL_IncTick();
 8001966:	f000 bf23 	b.w	80027b0 <HAL_IncTick>
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00

08001970 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <miir_zscore_f32>:
 float miir_mean_f32(int16_t n_col, float X[][n_col], int16_t blockSize)
 {

    float temp_acm = 0.0f; 
    int i = 0U;
    if (n_col == N_WINDOWS)
 8001974:	2801      	cmp	r0, #1

*/ 
 
 
void miir_zscore_f32(int16_t n_col, float  X[][n_col], uint16_t blockSize) 
{
 8001976:	b538      	push	{r3, r4, r5, lr}
 
    float std_val = 0.0f ;

 

    miir_mean_centering_f32(n_col, X, blockSize); 
 8001978:	b212      	sxth	r2, r2
{
 800197a:	460c      	mov	r4, r1
    float temp_acm = 0.0f; 
 800197c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001aec <miir_zscore_f32+0x178>
    if (n_col == N_WINDOWS)
 8001980:	d066      	beq.n	8001a50 <miir_zscore_f32+0xdc>
    else if (n_col == D_DIM)
 8001982:	2864      	cmp	r0, #100	; 0x64
 8001984:	d016      	beq.n	80019b4 <miir_zscore_f32+0x40>
    return (temp_acm/blockSize);
 8001986:	ee07 2a10 	vmov	s14, r2
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
        temp_sum += temp_div * temp_div; 
 8001990:	eeb0 7a67 	vmov.f32	s14, s15
    for (int i_cnt = 0 ; i_cnt < D_DIM; i_cnt++)
 8001994:	3b01      	subs	r3, #1
        temp_sum += temp_div * temp_div; 
 8001996:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int i_cnt = 0 ; i_cnt < D_DIM; i_cnt++)
 800199a:	d1fb      	bne.n	8001994 <miir_zscore_f32+0x20>
        return sqrt(temp_sum/blockSize);
 800199c:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fdd0 	bl	8000548 <__aeabi_f2d>

        else if (n_col == D_DIM)      X[0][i] /= std_val; 
    }


}
 80019a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return sqrt(temp_sum/blockSize);
 80019ac:	ec41 0b10 	vmov	d0, r0, r1
 80019b0:	f008 bf1a 	b.w	800a7e8 <sqrt>
 80019b4:	460b      	mov	r3, r1
 80019b6:	f501 75c8 	add.w	r5, r1, #400	; 0x190
            temp_acm += X[0][i]; 
 80019ba:	ecb3 7a01 	vldmia	r3!, {s14}
        while (i<blockSize)
 80019be:	42ab      	cmp	r3, r5
            temp_acm += X[0][i]; 
 80019c0:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (i<blockSize)
 80019c4:	d1f9      	bne.n	80019ba <miir_zscore_f32+0x46>
 80019c6:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001af0 <miir_zscore_f32+0x17c>
 80019ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ce:	4623      	mov	r3, r4
            else if (n_col == D_DIM)    X[0][i_cnt] = X[0][i_cnt] - sample_mean ; 
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019d8:	ece3 7a01 	vstmia	r3!, {s15}
        for (int i_cnt= 0 ; i_cnt<D_DIM ; i_cnt ++)
 80019dc:	42ab      	cmp	r3, r5
 80019de:	d1f7      	bne.n	80019d0 <miir_zscore_f32+0x5c>
        while (i<blockSize)
 80019e0:	2a00      	cmp	r2, #0
    float temp_acm = 0.0f; 
 80019e2:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001aec <miir_zscore_f32+0x178>
        while (i<blockSize)
 80019e6:	dd08      	ble.n	80019fa <miir_zscore_f32+0x86>
 80019e8:	4621      	mov	r1, r4
    int i = 0U;
 80019ea:	2300      	movs	r3, #0
            temp_acm += X[0][i]; 
 80019ec:	ecb1 7a01 	vldmia	r1!, {s14}
            i++;
 80019f0:	3301      	adds	r3, #1
        while (i<blockSize)
 80019f2:	4293      	cmp	r3, r2
            temp_acm += X[0][i]; 
 80019f4:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (i<blockSize)
 80019f8:	d1f8      	bne.n	80019ec <miir_zscore_f32+0x78>
    return (temp_acm/blockSize);
 80019fa:	ee07 2a10 	vmov	s14, r2
 80019fe:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    float temp_sum = 0.0f;
 8001a02:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001aec <miir_zscore_f32+0x178>
    return (temp_acm/blockSize);
 8001a06:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a0a:	4623      	mov	r3, r4
        else if (n_col == D_DIM)            temp_div = X[0][i_cnt] - sample_mean; 
 8001a0c:	ecf3 7a01 	vldmia	r3!, {s15}
 8001a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (int i_cnt = 0 ; i_cnt < D_DIM; i_cnt++)
 8001a14:	42ab      	cmp	r3, r5
        temp_sum += temp_div * temp_div; 
 8001a16:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (int i_cnt = 0 ; i_cnt < D_DIM; i_cnt++)
 8001a1a:	d1f7      	bne.n	8001a0c <miir_zscore_f32+0x98>
        return sqrt(temp_sum/blockSize);
 8001a1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8001a20:	ee17 0a90 	vmov	r0, s15
 8001a24:	f7fe fd90 	bl	8000548 <__aeabi_f2d>
 8001a28:	ec41 0b10 	vmov	d0, r0, r1
 8001a2c:	f008 fedc 	bl	800a7e8 <sqrt>
 8001a30:	ec51 0b10 	vmov	r0, r1, d0
 8001a34:	f7ff f8d8 	bl	8000be8 <__aeabi_d2f>
 8001a38:	ee06 0a90 	vmov	s13, r0
 8001a3c:	4623      	mov	r3, r4
        else if (n_col == D_DIM)      X[0][i] /= std_val; 
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a46:	ece3 7a01 	vstmia	r3!, {s15}
    for (int i = 0; i < D_DIM; i ++)
 8001a4a:	429d      	cmp	r5, r3
 8001a4c:	d1f7      	bne.n	8001a3e <miir_zscore_f32+0xca>
}
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
 8001a50:	f501 75c8 	add.w	r5, r1, #400	; 0x190
            temp_acm += X[i][0]; 
 8001a54:	ecb1 7a01 	vldmia	r1!, {s14}
        while(i<blockSize)
 8001a58:	42a9      	cmp	r1, r5
            temp_acm += X[i][0]; 
 8001a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
        while(i<blockSize)
 8001a5e:	d1f9      	bne.n	8001a54 <miir_zscore_f32+0xe0>
 8001a60:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001af0 <miir_zscore_f32+0x17c>
 8001a64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a68:	4621      	mov	r1, r4
            if (n_col == N_WINDOWS)     X[i_cnt][0] = X[i_cnt][0] - sample_mean ;
 8001a6a:	edd1 7a00 	vldr	s15, [r1]
 8001a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a72:	ece1 7a01 	vstmia	r1!, {s15}
        for (int i_cnt= 0 ; i_cnt<D_DIM ; i_cnt ++)
 8001a76:	42a9      	cmp	r1, r5
 8001a78:	d1f7      	bne.n	8001a6a <miir_zscore_f32+0xf6>
        while(i<blockSize)
 8001a7a:	2a00      	cmp	r2, #0
    float temp_acm = 0.0f; 
 8001a7c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8001aec <miir_zscore_f32+0x178>
        while(i<blockSize)
 8001a80:	dd08      	ble.n	8001a94 <miir_zscore_f32+0x120>
 8001a82:	4623      	mov	r3, r4
 8001a84:	eb04 0182 	add.w	r1, r4, r2, lsl #2
            temp_acm += X[i][0]; 
 8001a88:	ecb3 7a01 	vldmia	r3!, {s14}
        while(i<blockSize)
 8001a8c:	428b      	cmp	r3, r1
            temp_acm += X[i][0]; 
 8001a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
        while(i<blockSize)
 8001a92:	d1f9      	bne.n	8001a88 <miir_zscore_f32+0x114>
    return (temp_acm/blockSize);
 8001a94:	ee07 2a10 	vmov	s14, r2
 8001a98:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    float temp_sum = 0.0f;
 8001a9c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001aec <miir_zscore_f32+0x178>
    return (temp_acm/blockSize);
 8001aa0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001aa4:	4622      	mov	r2, r4
        if (n_col == N_WINDOWS)             temp_div = X[i_cnt][0] - sample_mean;
 8001aa6:	ecf2 7a01 	vldmia	r2!, {s15}
 8001aaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (int i_cnt = 0 ; i_cnt < D_DIM; i_cnt++)
 8001aae:	42aa      	cmp	r2, r5
        temp_sum += temp_div * temp_div; 
 8001ab0:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (int i_cnt = 0 ; i_cnt < D_DIM; i_cnt++)
 8001ab4:	d1f7      	bne.n	8001aa6 <miir_zscore_f32+0x132>
        return sqrt(temp_sum/blockSize);
 8001ab6:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8001aba:	ee17 0a90 	vmov	r0, s15
 8001abe:	f7fe fd43 	bl	8000548 <__aeabi_f2d>
 8001ac2:	ec41 0b10 	vmov	d0, r0, r1
 8001ac6:	f008 fe8f 	bl	800a7e8 <sqrt>
 8001aca:	ec51 0b10 	vmov	r0, r1, d0
 8001ace:	f7ff f88b 	bl	8000be8 <__aeabi_d2f>
 8001ad2:	ee06 0a90 	vmov	s13, r0
 8001ad6:	4623      	mov	r3, r4
        if (n_col == N_WINDOWS)       X[i][0] /=  std_val; 
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	ece3 7a01 	vstmia	r3!, {s15}
    for (int i = 0; i < D_DIM; i ++)
 8001ae4:	42ab      	cmp	r3, r5
 8001ae6:	d1f7      	bne.n	8001ad8 <miir_zscore_f32+0x164>
}
 8001ae8:	bd38      	pop	{r3, r4, r5, pc}
 8001aea:	bf00      	nop
 8001aec:	00000000 	.word	0x00000000
 8001af0:	42c80000 	.word	0x42c80000

08001af4 <miir_mat_compression_f32>:

/*
    *   Returns matrix multplication of two input array. 
*/
void miir_mat_compression_f32( float X[N_WINDOWS][D_DIM], float Q[][K_COMP], float XC[][K_COMP])
{
 8001af4:	b470      	push	{r4, r5, r6}
 8001af6:	f102 0628 	add.w	r6, r2, #40	; 0x28
 8001afa:	f500 75c8 	add.w	r5, r0, #400	; 0x190
 8001afe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8001b2c <miir_mat_compression_f32+0x38>
 8001b02:	4603      	mov	r3, r0
 8001b04:	460c      	mov	r4, r1
        for(k = 0; k< K_COMP ; k++)
        {
            for(j= 0; j<D_DIM; j++)
            {
 
                temp_val += X[i][j] * Q[j][k];
 8001b06:	ecf3 6a01 	vldmia	r3!, {s13}
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	ed9c 7a00 	vldr	s14, [ip]
            for(j= 0; j<D_DIM; j++)
 8001b10:	429d      	cmp	r5, r3
                temp_val += X[i][j] * Q[j][k];
 8001b12:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8001b16:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(j= 0; j<D_DIM; j++)
 8001b1a:	d1f4      	bne.n	8001b06 <miir_mat_compression_f32+0x12>
            }

            XC[i][k] = temp_val;
 8001b1c:	ece2 7a01 	vstmia	r2!, {s15}
        for(k = 0; k< K_COMP ; k++)
 8001b20:	42b2      	cmp	r2, r6
 8001b22:	f101 0104 	add.w	r1, r1, #4
 8001b26:	d1ea      	bne.n	8001afe <miir_mat_compression_f32+0xa>
            j = 0;
        }// End of Src2 Row

    } // End of Src1 Row

}
 8001b28:	bc70      	pop	{r4, r5, r6}
 8001b2a:	4770      	bx	lr
 8001b2c:	00000000 	.word	0x00000000

08001b30 <miir_mat_decompression_f32>:



void miir_mat_decompression_f32( float XC[N_WINDOWS][K_COMP], float Q[][K_COMP], float Dst[][D_DIM])
{
 8001b30:	ed2d 8b06 	vpush	{d8-d10}
        {
            for(k= 0; k<K_COMP; k++)
            {

                 
                temp_val += XC[i][k] * Q[j][k];
 8001b34:	ed9f aa25 	vldr	s20, [pc, #148]	; 8001bcc <miir_mat_decompression_f32+0x9c>
 8001b38:	f501 637a 	add.w	r3, r1, #4000	; 0xfa0
 8001b3c:	edd1 7a00 	vldr	s15, [r1]
 8001b40:	edd0 9a00 	vldr	s19, [r0]
 8001b44:	edd1 8a01 	vldr	s17, [r1, #4]
 8001b48:	ed90 9a01 	vldr	s18, [r0, #4]
 8001b4c:	ed91 0a02 	vldr	s0, [r1, #8]
 8001b50:	ed90 8a02 	vldr	s16, [r0, #8]
 8001b54:	ed91 1a03 	vldr	s2, [r1, #12]
 8001b58:	edd0 0a03 	vldr	s1, [r0, #12]
 8001b5c:	ed91 2a04 	vldr	s4, [r1, #16]
 8001b60:	edd0 1a04 	vldr	s3, [r0, #16]
 8001b64:	ed91 3a05 	vldr	s6, [r1, #20]
 8001b68:	edd0 2a05 	vldr	s5, [r0, #20]
 8001b6c:	ed91 4a06 	vldr	s8, [r1, #24]
 8001b70:	edd0 3a06 	vldr	s7, [r0, #24]
 8001b74:	ed91 5a07 	vldr	s10, [r1, #28]
 8001b78:	edd0 4a07 	vldr	s9, [r0, #28]
 8001b7c:	ed91 6a08 	vldr	s12, [r1, #32]
 8001b80:	edd0 5a08 	vldr	s11, [r0, #32]
 8001b84:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8001b88:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
 8001b8c:	eef0 aa4a 	vmov.f32	s21, s20
 8001b90:	eee9 aaa7 	vfma.f32	s21, s19, s15
 8001b94:	3128      	adds	r1, #40	; 0x28
        for(j = 0; j< D_DIM ; j++)
 8001b96:	428b      	cmp	r3, r1
                temp_val += XC[i][k] * Q[j][k];
 8001b98:	eef0 7a6a 	vmov.f32	s15, s21
 8001b9c:	eee9 7a28 	vfma.f32	s15, s18, s17
 8001ba0:	eee8 7a00 	vfma.f32	s15, s16, s0
 8001ba4:	eee0 7a81 	vfma.f32	s15, s1, s2
 8001ba8:	eee1 7a82 	vfma.f32	s15, s3, s4
 8001bac:	eee2 7a83 	vfma.f32	s15, s5, s6
 8001bb0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8001bb4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8001bb8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8001bbc:	eee6 7a87 	vfma.f32	s15, s13, s14
            }

            Dst[i][j] = temp_val;
 8001bc0:	ece2 7a01 	vstmia	r2!, {s15}
        for(j = 0; j< D_DIM ; j++)
 8001bc4:	d1ba      	bne.n	8001b3c <miir_mat_decompression_f32+0xc>
            k = 0;
        }// End of Src2 Row
       j = 0;
    } // End of Src1 Row

}
 8001bc6:	ecbd 8b06 	vpop	{d8-d10}
 8001bca:	4770      	bx	lr
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <miir_rsnr_f32>:
    }

}

float  miir_rsnr_f32( float x[][D_DIM],float xr[][D_DIM])
{
 8001bd0:	b530      	push	{r4, r5, lr}
 8001bd2:	b0e5      	sub	sp, #404	; 0x194
 8001bd4:	4604      	mov	r4, r0

 

    float sum_sqr_x[N_WINDOWS] = {0.0f};
    float sum_sqr_x_xr[N_WINDOWS] = {0.0f};
    float temp_d[N_WINDOWS][D_DIM] = {{0.0f}};
 8001bd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
{
 8001bda:	460d      	mov	r5, r1
    float temp_d[N_WINDOWS][D_DIM] = {{0.0f}};
 8001bdc:	4668      	mov	r0, sp
 8001bde:	2100      	movs	r1, #0
 8001be0:	f005 f837 	bl	8006c52 <memset>
 8001be4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001c30 <miir_rsnr_f32+0x60>
 8001be8:	4620      	mov	r0, r4
 8001bea:	f504 72c8 	add.w	r2, r4, #400	; 0x190
 8001bee:	4623      	mov	r3, r4
                temp_res += X[i_cnt][j_cnt] * X[i_cnt][j_cnt];
 8001bf0:	ecf3 7a01 	vldmia	r3!, {s15}
            for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001bf4:	4293      	cmp	r3, r2
                temp_res += X[i_cnt][j_cnt] * X[i_cnt][j_cnt];
 8001bf6:	eea7 0aa7 	vfma.f32	s0, s15, s15
            for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001bfa:	d1f9      	bne.n	8001bf0 <miir_rsnr_f32+0x20>
 8001bfc:	466a      	mov	r2, sp
 8001bfe:	4629      	mov	r1, r5
 8001c00:	4613      	mov	r3, r2
 8001c02:	ac64      	add	r4, sp, #400	; 0x190
            Dst[i_cnt][j_cnt] = X[i_cnt][j_cnt] - Xr[i_cnt][j_cnt]; 
 8001c04:	ecf0 7a01 	vldmia	r0!, {s15}
 8001c08:	ecb1 7a01 	vldmia	r1!, {s14}
 8001c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c10:	ece3 7a01 	vstmia	r3!, {s15}
        for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	d1f5      	bne.n	8001c04 <miir_rsnr_f32+0x34>
 8001c18:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c30 <miir_rsnr_f32+0x60>
                temp_res += X[i_cnt][j_cnt] * X[i_cnt][j_cnt];
 8001c1c:	ecf2 7a01 	vldmia	r2!, {s15}
            for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001c20:	4293      	cmp	r3, r2
                temp_res += X[i_cnt][j_cnt] * X[i_cnt][j_cnt];
 8001c22:	eea7 7aa7 	vfma.f32	s14, s15, s15
            for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001c26:	d1f9      	bne.n	8001c1c <miir_rsnr_f32+0x4c>
 
    miir_power_f32(temp_d, sum_sqr_x_xr);

    return (sum_sqr_x[0]/sum_sqr_x_xr[0]);

}
 8001c28:	ee80 0a07 	vdiv.f32	s0, s0, s14
 8001c2c:	b065      	add	sp, #404	; 0x194
 8001c2e:	bd30      	pop	{r4, r5, pc}
 8001c30:	00000000 	.word	0x00000000

08001c34 <miir_arsnrdb_f32>:

 
float miir_arsnrdb_f32(float x[N_WINDOWS][D_DIM],float xr[N_WINDOWS][D_DIM])
{
 8001c34:	b508      	push	{r3, lr}

    float rsnr_val_temp;
    float temp_log_val;

    rsnr_val_temp = miir_rsnr_f32(x, xr);
 8001c36:	f7ff ffcb 	bl	8001bd0 <miir_rsnr_f32>
    temp_log_val = log10(rsnr_val_temp);
 8001c3a:	ee10 0a10 	vmov	r0, s0
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	ec41 0b10 	vmov	d0, r0, r1
 8001c46:	f008 fd4f 	bl	800a6e8 <log10>
 8001c4a:	ec51 0b10 	vmov	r0, r1, d0
 8001c4e:	f7fe ffcb 	bl	8000be8 <__aeabi_d2f>

    return 10*temp_log_val;
}
 8001c52:	ee07 0a90 	vmov	s15, r0
    return 10*temp_log_val;
 8001c56:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
}
 8001c5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001c5e:	bd08      	pop	{r3, pc}

08001c60 <miir_mse_f32>:
 


float miir_mse_f32( float X[][D_DIM], float Xr[][D_DIM])
{
 8001c60:	b530      	push	{r4, r5, lr}
 8001c62:	b0e5      	sub	sp, #404	; 0x194
 8001c64:	460c      	mov	r4, r1
 8001c66:	4605      	mov	r5, r0

    float temp_buf[][D_DIM] = {{0.0f}}; 
 8001c68:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4668      	mov	r0, sp
 8001c70:	f004 ffef 	bl	8006c52 <memset>
 8001c74:	466a      	mov	r2, sp
 8001c76:	4621      	mov	r1, r4
 8001c78:	4628      	mov	r0, r5
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	ac64      	add	r4, sp, #400	; 0x190
            Dst[i_cnt][j_cnt] = X[i_cnt][j_cnt] - Xr[i_cnt][j_cnt]; 
 8001c7e:	ecf0 7a01 	vldmia	r0!, {s15}
 8001c82:	ecb1 7a01 	vldmia	r1!, {s14}
 8001c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c8a:	ece3 7a01 	vstmia	r3!, {s15}
        for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001c8e:	42a3      	cmp	r3, r4
 8001c90:	d1f5      	bne.n	8001c7e <miir_mse_f32+0x1e>
 8001c92:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001cb0 <miir_mse_f32+0x50>
                temp_res += X[i_cnt][j_cnt] * X[i_cnt][j_cnt];
 8001c96:	ecf2 7a01 	vldmia	r2!, {s15}
            for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001c9a:	4293      	cmp	r3, r2
                temp_res += X[i_cnt][j_cnt] * X[i_cnt][j_cnt];
 8001c9c:	eea7 7aa7 	vfma.f32	s14, s15, s15
            for (int j_cnt = 0; j_cnt<D_DIM; j_cnt++)
 8001ca0:	d1f9      	bne.n	8001c96 <miir_mse_f32+0x36>

    miir_mat_sub_2d_f32(X, Xr, temp_buf); 

    miir_power_f32(temp_buf, temp_pow); 
    
    return temp_pow[0]/ D_DIM; 
 8001ca2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001cb4 <miir_mse_f32+0x54>



}
 8001ca6:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8001caa:	b065      	add	sp, #404	; 0x194
 8001cac:	bd30      	pop	{r4, r5, pc}
 8001cae:	bf00      	nop
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	42c80000 	.word	0x42c80000

08001cb8 <transform1>:
		AvAvtiv[ix] = Av[ix] * Avtiv;
		//iv[ix] = iv[ix] - AvAvtiv[ix];
		i[ix] = iv[ix] - AvAvtiv[ix];
	}
}
void transform1(int n_rows, int n_cols, float X[][K_COMP], int begin_index) {
 8001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	b09d      	sub	sp, #116	; 0x74
	int new_n_rows = n_rows - begin_index;
	int new_n_cols = n_cols - (begin_index + 1);
 8001cbe:	1c5d      	adds	r5, r3, #1
	int new_n_rows = n_rows - begin_index;
 8001cc0:	1ac6      	subs	r6, r0, r3
void transform1(int n_rows, int n_cols, float X[][K_COMP], int begin_index) {
 8001cc2:	920a      	str	r2, [sp, #40]	; 0x28
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	2228      	movs	r2, #40	; 0x28
	int new_n_cols = n_cols - (begin_index + 1);
 8001cc8:	1b4b      	subs	r3, r1, r5
 8001cca:	48b9      	ldr	r0, [pc, #740]	; (8001fb0 <transform1+0x2f8>)
 8001ccc:	9310      	str	r3, [sp, #64]	; 0x40
 8001cce:	2100      	movs	r1, #0
 8001cd0:	f004 ffbf 	bl	8006c52 <memset>
	for(int i = 0; i < K_COMP; i++){
		vtM[i] = 0.0f;}
	for(int row_index=0; row_index<new_n_rows; row_index++) {
 8001cd4:	2e00      	cmp	r6, #0
 8001cd6:	f340 8168 	ble.w	8001faa <transform1+0x2f2>
 8001cda:	00a3      	lsls	r3, r4, #2
 8001cdc:	eb03 0c04 	add.w	ip, r3, r4
 8001ce0:	931b      	str	r3, [sp, #108]	; 0x6c
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001ce2:	1ce1      	adds	r1, r4, #3
 8001ce4:	1d63      	adds	r3, r4, #5
 8001ce6:	1d20      	adds	r0, r4, #4
 8001ce8:	1ca2      	adds	r2, r4, #2
 8001cea:	9105      	str	r1, [sp, #20]
 8001cec:	930c      	str	r3, [sp, #48]	; 0x30
 8001cee:	0089      	lsls	r1, r1, #2
 8001cf0:	1da3      	adds	r3, r4, #6
 8001cf2:	9104      	str	r1, [sp, #16]
 8001cf4:	9203      	str	r2, [sp, #12]
 8001cf6:	0081      	lsls	r1, r0, #2
 8001cf8:	9008      	str	r0, [sp, #32]
 8001cfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8001cfc:	980a      	ldr	r0, [sp, #40]	; 0x28
			if (begin_index == 0 && col_index == 9){
				int z = 0;}
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001cfe:	4fac      	ldr	r7, [pc, #688]	; (8001fb0 <transform1+0x2f8>)
 8001d00:	9107      	str	r1, [sp, #28]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001d02:	1de3      	adds	r3, r4, #7
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	9202      	str	r2, [sp, #8]
 8001d08:	9312      	str	r3, [sp, #72]	; 0x48
 8001d0a:	eb05 034c 	add.w	r3, r5, ip, lsl #1
 8001d0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001d12:	9802      	ldr	r0, [sp, #8]
 8001d14:	eb07 0e00 	add.w	lr, r7, r0
 8001d18:	9804      	ldr	r0, [sp, #16]
 8001d1a:	1d62      	adds	r2, r4, #5
 8001d1c:	0091      	lsls	r1, r2, #2
 8001d1e:	eb07 0800 	add.w	r8, r7, r0
 8001d22:	9807      	ldr	r0, [sp, #28]
 8001d24:	9109      	str	r1, [sp, #36]	; 0x24
 8001d26:	1da2      	adds	r2, r4, #6
 8001d28:	eb07 0900 	add.w	r9, r7, r0
 8001d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	920b      	str	r2, [sp, #44]	; 0x2c
 8001d32:	1838      	adds	r0, r7, r0
 8001d34:	9019      	str	r0, [sp, #100]	; 0x64
 8001d36:	1de2      	adds	r2, r4, #7
 8001d38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	920e      	str	r2, [sp, #56]	; 0x38
 8001d3e:	1838      	adds	r0, r7, r0
 8001d40:	9014      	str	r0, [sp, #80]	; 0x50
 8001d42:	980e      	ldr	r0, [sp, #56]	; 0x38
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001d44:	f104 0c08 	add.w	ip, r4, #8
 8001d48:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001d4c:	1838      	adds	r0, r7, r0
 8001d4e:	9015      	str	r0, [sp, #84]	; 0x54
 8001d50:	980d      	ldr	r0, [sp, #52]	; 0x34
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001d52:	f104 0c09 	add.w	ip, r4, #9
 8001d56:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8001d5a:	0080      	lsls	r0, r0, #2
 8001d5c:	9016      	str	r0, [sp, #88]	; 0x58
 8001d5e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001d60:	f104 0c0a 	add.w	ip, r4, #10
 8001d64:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8001d68:	0080      	lsls	r0, r0, #2
 8001d6a:	9017      	str	r0, [sp, #92]	; 0x5c
 8001d6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001d6e:	0080      	lsls	r0, r0, #2
 8001d70:	ebc5 7185 	rsb	r1, r5, r5, lsl #30
 8001d74:	9018      	str	r0, [sp, #96]	; 0x60
 8001d76:	980a      	ldr	r0, [sp, #40]	; 0x28
	for(int row_index=0; row_index<new_n_rows; row_index++) {
 8001d78:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8001d7c:	941a      	str	r4, [sp, #104]	; 0x68
 8001d7e:	222c      	movs	r2, #44	; 0x2c
 8001d80:	0089      	lsls	r1, r1, #2
 8001d82:	fb02 0204 	mla	r2, r2, r4, r0
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001d86:	eb07 0c85 	add.w	ip, r7, r5, lsl #2
 8001d8a:	9106      	str	r1, [sp, #24]
	for(int row_index=0; row_index<new_n_rows; row_index++) {
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	9501      	str	r5, [sp, #4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001d90:	9901      	ldr	r1, [sp, #4]
 8001d92:	2909      	cmp	r1, #9
 8001d94:	f300 809b 	bgt.w	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001d98:	edd2 6a00 	vldr	s13, [r2]
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	eddc 7a00 	vldr	s15, [ip]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001da4:	9903      	ldr	r1, [sp, #12]
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001da6:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001daa:	290a      	cmp	r1, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001dac:	edcc 7a00 	vstr	s15, [ip]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001db0:	f000 808d 	beq.w	8001ece <transform1+0x216>
 8001db4:	9906      	ldr	r1, [sp, #24]
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001db6:	9c02      	ldr	r4, [sp, #8]
 8001db8:	edd2 6a00 	vldr	s13, [r2]
 8001dbc:	edde 7a00 	vldr	s15, [lr]
 8001dc0:	1859      	adds	r1, r3, r1
 8001dc2:	190c      	adds	r4, r1, r4
 8001dc4:	ed94 7a00 	vldr	s14, [r4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001dc8:	9c05      	ldr	r4, [sp, #20]
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001dca:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001dce:	2c0a      	cmp	r4, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001dd0:	edce 7a00 	vstr	s15, [lr]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001dd4:	d07b      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001dd6:	9c04      	ldr	r4, [sp, #16]
 8001dd8:	edd2 6a00 	vldr	s13, [r2]
 8001ddc:	edd8 7a00 	vldr	s15, [r8]
 8001de0:	190c      	adds	r4, r1, r4
 8001de2:	ed94 7a00 	vldr	s14, [r4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001de6:	9c08      	ldr	r4, [sp, #32]
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001de8:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001dec:	2c0a      	cmp	r4, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001dee:	edc8 7a00 	vstr	s15, [r8]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001df2:	d06c      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001df4:	9c07      	ldr	r4, [sp, #28]
 8001df6:	edd2 6a00 	vldr	s13, [r2]
 8001dfa:	edd9 7a00 	vldr	s15, [r9]
 8001dfe:	190c      	adds	r4, r1, r4
 8001e00:	ed94 7a00 	vldr	s14, [r4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e06:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e0a:	2c0a      	cmp	r4, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e0c:	edc9 7a00 	vstr	s15, [r9]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e10:	d05d      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001e14:	edd2 6a00 	vldr	s13, [r2]
 8001e18:	edda 7a00 	vldr	s15, [sl]
 8001e1c:	190c      	adds	r4, r1, r4
 8001e1e:	ed94 7a00 	vldr	s14, [r4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e24:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e28:	2c0a      	cmp	r4, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e2a:	edca 7a00 	vstr	s15, [sl]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e2e:	d04e      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001e32:	edd2 6a00 	vldr	s13, [r2]
 8001e36:	190c      	adds	r4, r1, r4
 8001e38:	ed94 7a00 	vldr	s14, [r4]
 8001e3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001e3e:	edd4 7a00 	vldr	s15, [r4]
 8001e42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001e46:	edc4 7a00 	vstr	s15, [r4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8001e4c:	2c0a      	cmp	r4, #10
 8001e4e:	d03e      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001e52:	edd2 6a00 	vldr	s13, [r2]
 8001e56:	190c      	adds	r4, r1, r4
 8001e58:	ed94 7a00 	vldr	s14, [r4]
 8001e5c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001e5e:	edd4 7a00 	vldr	s15, [r4]
 8001e62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001e66:	edc4 7a00 	vstr	s15, [r4]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001e6c:	2c0a      	cmp	r4, #10
 8001e6e:	d02e      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e70:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8001e72:	edd2 6a00 	vldr	s13, [r2]
 8001e76:	eb07 0b04 	add.w	fp, r7, r4
 8001e7a:	190c      	adds	r4, r1, r4
 8001e7c:	ed94 7a00 	vldr	s14, [r4]
 8001e80:	eddb 7a00 	vldr	s15, [fp]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e84:	9c11      	ldr	r4, [sp, #68]	; 0x44
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e86:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e8a:	2c0a      	cmp	r4, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e8c:	edcb 7a00 	vstr	s15, [fp]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001e90:	d01d      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001e92:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8001e94:	edd2 6a00 	vldr	s13, [r2]
 8001e98:	eb07 0b04 	add.w	fp, r7, r4
 8001e9c:	190c      	adds	r4, r1, r4
 8001e9e:	ed94 7a00 	vldr	s14, [r4]
 8001ea2:	eddb 7a00 	vldr	s15, [fp]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001ea6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001ea8:	eee6 7a87 	vfma.f32	s15, s13, s14
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001eac:	2c0a      	cmp	r4, #10
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001eae:	edcb 7a00 	vstr	s15, [fp]
		for(int col_index = begin_index+1; col_index < K_COMP; col_index++){
 8001eb2:	d00c      	beq.n	8001ece <transform1+0x216>
			vtM[col_index] +=  X[begin_index+row_index][begin_index]*X[row_index+begin_index][col_index];
 8001eb4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8001eb6:	edd2 6a00 	vldr	s13, [r2]
 8001eba:	4421      	add	r1, r4
 8001ebc:	193c      	adds	r4, r7, r4
 8001ebe:	ed91 7a00 	vldr	s14, [r1]
 8001ec2:	edd4 7a00 	vldr	s15, [r4]
 8001ec6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001eca:	edc4 7a00 	vstr	s15, [r4]
	for(int row_index=0; row_index<new_n_rows; row_index++) {
 8001ece:	3001      	adds	r0, #1
 8001ed0:	4286      	cmp	r6, r0
 8001ed2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ed6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001eda:	f47f af59 	bne.w	8001d90 <transform1+0xd8>
			// printf("===1 [%d %d] %d\n", col_index,  row_index, (int)(X[col_index][row_index+begin_index]*1000));
		}
	}

	for(int i = 0; i < new_n_cols; i++){
 8001ede:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ee0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8001ee2:	9d01      	ldr	r5, [sp, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	dd60      	ble.n	8001faa <transform1+0x2f2>
 8001ee8:	2e00      	cmp	r6, #0
 8001eea:	dd5e      	ble.n	8001faa <transform1+0x2f2>
 8001eec:	461a      	mov	r2, r3
 8001eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001ef0:	4f2f      	ldr	r7, [pc, #188]	; (8001fb0 <transform1+0x2f8>)
 8001ef2:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001fb4 <transform1+0x2fc>
 8001ef6:	eb02 0904 	add.w	r9, r2, r4
 8001efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001efc:	4423      	add	r3, r4
 8001efe:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 8001f02:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8001f06:	eb05 0043 	add.w	r0, r5, r3, lsl #1
 8001f0a:	fb0e 2e04 	mla	lr, lr, r4, r2
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	eb08 0106 	add.w	r1, r8, r6
 8001f14:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8001f18:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8001f1c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8001f20:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
		for(int j = 0; j < new_n_rows; j++){
			vvtM[begin_index + j][i + begin_index + 1] = X[begin_index + j][begin_index] * vtM[i + begin_index + 1];
 8001f24:	ecb7 7a01 	vldmia	r7!, {s14}
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4673      	mov	r3, lr
 8001f2c:	469a      	mov	sl, r3
 8001f2e:	edda 7a00 	vldr	s15, [sl]
 8001f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f36:	3328      	adds	r3, #40	; 0x28
 8001f38:	ee17 aa90 	vmov	sl, s15
		for(int j = 0; j < new_n_rows; j++){
 8001f3c:	428b      	cmp	r3, r1
			vvtM[begin_index + j][i + begin_index + 1] = X[begin_index + j][begin_index] * vtM[i + begin_index + 1];
 8001f3e:	f842 ab28 	str.w	sl, [r2], #40
		for(int j = 0; j < new_n_rows; j++){
 8001f42:	d1f3      	bne.n	8001f2c <transform1+0x274>
	for(int i = 0; i < new_n_cols; i++){
 8001f44:	454f      	cmp	r7, r9
 8001f46:	f100 0004 	add.w	r0, r0, #4
 8001f4a:	d1eb      	bne.n	8001f24 <transform1+0x26c>
 8001f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001f4e:	44b0      	add	r8, r6
 8001f50:	222c      	movs	r2, #44	; 0x2c
 8001f52:	1d01      	adds	r1, r0, #4
 8001f54:	1933      	adds	r3, r6, r4
 8001f56:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001f5a:	fb02 1104 	mla	r1, r2, r4, r1
 8001f5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f62:	4441      	add	r1, r8
 8001f64:	4602      	mov	r2, r0
 8001f66:	4480      	add	r8, r0
 8001f68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001f6a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8001f6e:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8001f72:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001f76:	ebac 0c08 	sub.w	ip, ip, r8
 8001f7a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8001f7e:	fb03 f606 	mul.w	r6, r3, r6
 8001f82:	19ab      	adds	r3, r5, r6
 8001f84:	eb0c 0205 	add.w	r2, ip, r5
			//printf("=== [%d %d] %d\n", i + begin_index + 1, begin_index + j, (int)(vvtM[i + begin_index + 1][begin_index + j]*1000));
		}
	}
	for(int i = 0; i < new_n_cols; i++){
		for(int j = 0; j < new_n_rows; j++){
			X[begin_index + j][i + begin_index + 1] -= vvtM[begin_index + j][i + begin_index + 1];
 8001f88:	4610      	mov	r0, r2
 8001f8a:	edd0 7a00 	vldr	s15, [r0]
 8001f8e:	ed93 7a00 	vldr	s14, [r3]
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	3228      	adds	r2, #40	; 0x28
 8001f98:	ee17 0a90 	vmov	r0, s15
 8001f9c:	f843 0b28 	str.w	r0, [r3], #40
		for(int j = 0; j < new_n_rows; j++){
 8001fa0:	429d      	cmp	r5, r3
 8001fa2:	d1f1      	bne.n	8001f88 <transform1+0x2d0>
 8001fa4:	3504      	adds	r5, #4
	for(int i = 0; i < new_n_cols; i++){
 8001fa6:	42a9      	cmp	r1, r5
 8001fa8:	d1eb      	bne.n	8001f82 <transform1+0x2ca>
		}
	}

}
 8001faa:	b01d      	add	sp, #116	; 0x74
 8001fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fb0:	2000c04c 	.word	0x2000c04c
 8001fb4:	2000c074 	.word	0x2000c074

08001fb8 <qr_opt>:
void qr_opt(float X[][K_COMP], float Q[][K_COMP]) {
 8001fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fbc:	ed2d 8b02 	vpush	{d8}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	4680      	mov	r8, r0
 8001fc4:	9101      	str	r1, [sp, #4]
 8001fc6:	4d83      	ldr	r5, [pc, #524]	; (80021d4 <qr_opt+0x21c>)
 8001fc8:	4883      	ldr	r0, [pc, #524]	; (80021d8 <qr_opt+0x220>)
 8001fca:	f8df b220 	ldr.w	fp, [pc, #544]	; 80021ec <qr_opt+0x234>
 8001fce:	2228      	movs	r2, #40	; 0x28
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f004 fe3e 	bl	8006c52 <memset>
 8001fd6:	f5c5 697a 	rsb	r9, r5, #4000	; 0xfa0
 8001fda:	44c1      	add	r9, r8
 8001fdc:	f108 0428 	add.w	r4, r8, #40	; 0x28
			X[col_index][col_index] = X[col_index][col_index] - d[col_index];
 8001fe0:	4647      	mov	r7, r8
 8001fe2:	f108 0a50 	add.w	sl, r8, #80	; 0x50
	for(int col_index=0;col_index<n_cols; col_index++)
 8001fe6:	2600      	movs	r6, #0
	float n = 0.0f;
 8001fe8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80021dc <qr_opt+0x224>
 8001fec:	eb09 0205 	add.w	r2, r9, r5
void qr_opt(float X[][K_COMP], float Q[][K_COMP]) {
 8001ff0:	463b      	mov	r3, r7
		n = n + x[i][begin_index] * x[i][begin_index];
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	edd1 7a00 	vldr	s15, [r1]
 8001ff8:	3328      	adds	r3, #40	; 0x28
	for(int i=begin_index;i<end_index;i++) {
 8001ffa:	4293      	cmp	r3, r2
		n = n + x[i][begin_index] * x[i][begin_index];
 8001ffc:	eea7 7aa7 	vfma.f32	s14, s15, s15
	for(int i=begin_index;i<end_index;i++) {
 8002000:	d1f7      	bne.n	8001ff2 <qr_opt+0x3a>
	return sqrt(n);
 8002002:	ee17 0a10 	vmov	r0, s14
 8002006:	f7fe fa9f 	bl	8000548 <__aeabi_f2d>
 800200a:	ec41 0b10 	vmov	d0, r0, r1
 800200e:	f008 fbeb 	bl	800a7e8 <sqrt>
 8002012:	ec51 0b10 	vmov	r0, r1, d0
 8002016:	f7fe fde7 	bl	8000be8 <__aeabi_d2f>
			if(X[col_index][col_index] >= 0.0f) {
 800201a:	ed14 7a0a 	vldr	s14, [r4, #-40]	; 0xffffffd8
 800201e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return sqrt(n);
 8002026:	ee07 0a90 	vmov	s15, r0
			if(X[col_index][col_index] >= 0.0f) {
 800202a:	db4a      	blt.n	80020c2 <qr_opt+0x10a>
				d[col_index]=-s;
 800202c:	eeb1 7a67 	vneg.f32	s14, s15
 8002030:	ed85 7a00 	vstr	s14, [r5]
				fak = sqrt(s*(s+X[col_index][col_index]));
 8002034:	ed14 7a0a 	vldr	s14, [r4, #-40]	; 0xffffffd8
 8002038:	ee37 7a87 	vadd.f32	s14, s15, s14
				fak = sqrt(s*(s-X[col_index][col_index]));
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	ee17 0a90 	vmov	r0, s15
 8002044:	f7fe fa80 	bl	8000548 <__aeabi_f2d>
 8002048:	ec41 0b10 	vmov	d0, r0, r1
 800204c:	f008 fbcc 	bl	800a7e8 <sqrt>
 8002050:	ec51 0b10 	vmov	r0, r1, d0
 8002054:	f7fe fdc8 	bl	8000be8 <__aeabi_d2f>
 8002058:	f8cb 0000 	str.w	r0, [fp]
			X[col_index][col_index] = X[col_index][col_index] - d[col_index];
 800205c:	ed54 6a0a 	vldr	s13, [r4, #-40]	; 0xffffffd8
 8002060:	ed95 7a00 	vldr	s14, [r5]
 8002064:	f1c6 0363 	rsb	r3, r6, #99	; 0x63
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	eba7 0108 	sub.w	r1, r7, r8
 800206e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002076:	4451      	add	r1, sl
				fak = sqrt(s*(s-X[col_index][col_index]));
 8002078:	ee07 0a90 	vmov	s15, r0
 800207c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
			X[col_index][col_index] = X[col_index][col_index] - d[col_index];
 8002080:	ed04 7a0a 	vstr	s14, [r4, #-40]	; 0xffffffd8
 8002084:	4622      	mov	r2, r4
 8002086:	463b      	mov	r3, r7
		X[i][begin_index]   = X[i][begin_index] / div;
 8002088:	ed52 6a0a 	vldr	s13, [r2, #-40]	; 0xffffffd8
 800208c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002090:	3350      	adds	r3, #80	; 0x50
 8002092:	3250      	adds	r2, #80	; 0x50
 8002094:	ed02 7a1e 	vstr	s14, [r2, #-120]	; 0xffffff88
		X[i+1][begin_index] = X[i+1][begin_index] / div;
 8002098:	ed53 6a0a 	vldr	s13, [r3, #-40]	; 0xffffffd8
 800209c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a0:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
	for(int i=begin_index; i<end_index; i+=2) {
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d1ef      	bne.n	8002088 <qr_opt+0xd0>
		if(col_index < n_cols-1)
 80020a8:	2e09      	cmp	r6, #9
 80020aa:	d010      	beq.n	80020ce <qr_opt+0x116>
			transform1(n_samples, n_cols, X, col_index);
 80020ac:	4633      	mov	r3, r6
 80020ae:	4642      	mov	r2, r8
 80020b0:	210a      	movs	r1, #10
 80020b2:	2064      	movs	r0, #100	; 0x64
 80020b4:	372c      	adds	r7, #44	; 0x2c
 80020b6:	342c      	adds	r4, #44	; 0x2c
 80020b8:	3504      	adds	r5, #4
	for(int col_index=0;col_index<n_cols; col_index++)
 80020ba:	3601      	adds	r6, #1
			transform1(n_samples, n_cols, X, col_index);
 80020bc:	f7ff fdfc 	bl	8001cb8 <transform1>
 80020c0:	e792      	b.n	8001fe8 <qr_opt+0x30>
				d[col_index]=s;
 80020c2:	6028      	str	r0, [r5, #0]
				fak = sqrt(s*(s-X[col_index][col_index]));
 80020c4:	ed14 7a0a 	vldr	s14, [r4, #-40]	; 0xffffffd8
 80020c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80020cc:	e7b6      	b.n	800203c <qr_opt+0x84>
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	4e43      	ldr	r6, [pc, #268]	; (80021e0 <qr_opt+0x228>)
 80020d2:	9303      	str	r3, [sp, #12]
		if(col_index < n_cols-1)
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <qr_opt+0x220>)
 80020d6:	9304      	str	r3, [sp, #16]
 80020d8:	f5c6 5789 	rsb	r7, r6, #4384	; 0x1120
 80020dc:	f503 75c8 	add.w	r5, r3, #400	; 0x190
 80020e0:	f508 73c6 	add.w	r3, r8, #396	; 0x18c
 80020e4:	3710      	adds	r7, #16
 80020e6:	9305      	str	r3, [sp, #20]
		AvAvtiv[row_index] = 0.0f;
 80020e8:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 80021dc <qr_opt+0x224>
 80020ec:	f1a8 032c 	sub.w	r3, r8, #44	; 0x2c
 80020f0:	4447      	add	r7, r8
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80020f8:	2100      	movs	r1, #0
 80020fa:	4837      	ldr	r0, [pc, #220]	; (80021d8 <qr_opt+0x220>)
 80020fc:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80021f0 <qr_opt+0x238>
 8002100:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80021f4 <qr_opt+0x23c>
 8002104:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 80021f8 <qr_opt+0x240>
 8002108:	f004 fda3 	bl	8006c52 <memset>
    i[col_index] = 1.0f;
 800210c:	9a04      	ldr	r2, [sp, #16]
 800210e:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 80021fc <qr_opt+0x244>
 8002112:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002116:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800211a:	f842 3b04 	str.w	r3, [r2], #4
 800211e:	9204      	str	r2, [sp, #16]
 8002120:	eb07 0c0e 	add.w	ip, r7, lr
	for(int col_index=0;col_index<n_cols; col_index++)
 8002124:	465c      	mov	r4, fp
 8002126:	4640      	mov	r0, r8
 8002128:	4651      	mov	r1, sl
 800212a:	4672      	mov	r2, lr
 800212c:	464b      	mov	r3, r9
 800212e:	9701      	str	r7, [sp, #4]
		Av[row_index] = X[row_index][begin_index];
 8002130:	461f      	mov	r7, r3
 8002132:	ed97 7a00 	vldr	s14, [r7]
		iv[row_index] = i[row_index];
 8002136:	ecf1 7a01 	vldmia	r1!, {s15}
		Av[row_index] = X[row_index][begin_index];
 800213a:	eca2 7a01 	vstmia	r2!, {s14}
 800213e:	3328      	adds	r3, #40	; 0x28
	for(int row_index=begin_index; row_index<D_DIM; row_index++) {
 8002140:	459c      	cmp	ip, r3
		AvAvtiv[row_index] = 0.0f;
 8002142:	eca4 8a01 	vstmia	r4!, {s16}
		iv[row_index] = i[row_index];
 8002146:	ece0 7a01 	vstmia	r0!, {s15}
	for(int row_index=begin_index; row_index<D_DIM; row_index++) {
 800214a:	d1f1      	bne.n	8002130 <qr_opt+0x178>
 800214c:	9f01      	ldr	r7, [sp, #4]
	Avtiv = 0.0f;
 800214e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80021dc <qr_opt+0x224>
	for(int row_index=begin_index; row_index<D_DIM; row_index++) {
 8002152:	4642      	mov	r2, r8
 8002154:	4673      	mov	r3, lr
		Avtiv += Av[i] * iv[i];
 8002156:	ecb3 7a01 	vldmia	r3!, {s14}
 800215a:	ecf2 7a01 	vldmia	r2!, {s15}
	for(int i = begin_index; i < D_DIM; i++) {
 800215e:	429e      	cmp	r6, r3
		Avtiv += Av[i] * iv[i];
 8002160:	eee7 6a27 	vfma.f32	s13, s14, s15
	for(int i = begin_index; i < D_DIM; i++) {
 8002164:	d1f7      	bne.n	8002156 <qr_opt+0x19e>
 8002166:	4654      	mov	r4, sl
 8002168:	4640      	mov	r0, r8
 800216a:	4659      	mov	r1, fp
 800216c:	4672      	mov	r2, lr
		AvAvtiv[ix] = Av[ix] * Avtiv;
 800216e:	ecf2 7a01 	vldmia	r2!, {s15}
		i[ix] = iv[ix] - AvAvtiv[ix];
 8002172:	ecb0 7a01 	vldmia	r0!, {s14}
		AvAvtiv[ix] = Av[ix] * Avtiv;
 8002176:	ee66 7aa7 	vmul.f32	s15, s13, s15
	for(int ix = begin_index; ix < D_DIM; ix++){
 800217a:	4293      	cmp	r3, r2
		i[ix] = iv[ix] - AvAvtiv[ix];
 800217c:	ee37 7a67 	vsub.f32	s14, s14, s15
		AvAvtiv[ix] = Av[ix] * Avtiv;
 8002180:	ece1 7a01 	vstmia	r1!, {s15}
		i[ix] = iv[ix] - AvAvtiv[ix];
 8002184:	eca4 7a01 	vstmia	r4!, {s14}
	for(int ix = begin_index; ix < D_DIM; ix++){
 8002188:	d1f1      	bne.n	800216e <qr_opt+0x1b6>
	for(int col_counter=n_cols-1; col_counter>=0; col_counter--)
 800218a:	9b02      	ldr	r3, [sp, #8]
 800218c:	f1a9 092c 	sub.w	r9, r9, #44	; 0x2c
 8002190:	454b      	cmp	r3, r9
 8002192:	f1ae 0e04 	sub.w	lr, lr, #4
 8002196:	f1ab 0b04 	sub.w	fp, fp, #4
 800219a:	f1a8 0804 	sub.w	r8, r8, #4
 800219e:	f1aa 0a04 	sub.w	sl, sl, #4
 80021a2:	d1bd      	bne.n	8002120 <qr_opt+0x168>
 80021a4:	9a03      	ldr	r2, [sp, #12]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <qr_opt+0x220>)
       Q[j][col_index] = i[j];
 80021a8:	f853 1b04 	ldr.w	r1, [r3], #4
 80021ac:	f842 1b28 	str.w	r1, [r2], #40
    for(int j=0; j<D_DIM; j++) {
 80021b0:	429d      	cmp	r5, r3
 80021b2:	d1f9      	bne.n	80021a8 <qr_opt+0x1f0>
 80021b4:	9b03      	ldr	r3, [sp, #12]
  for (int col_index=0; col_index<K_COMP; col_index++) {
 80021b6:	9a04      	ldr	r2, [sp, #16]
 80021b8:	3304      	adds	r3, #4
 80021ba:	9303      	str	r3, [sp, #12]
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <qr_opt+0x22c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d198      	bne.n	80020f4 <qr_opt+0x13c>
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <qr_opt+0x230>)
 80021c4:	edc3 6a00 	vstr	s13, [r3]
}
 80021c8:	b007      	add	sp, #28
 80021ca:	ecbd 8b02 	vpop	{d8}
 80021ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d2:	bf00      	nop
 80021d4:	2000afe4 	.word	0x2000afe4
 80021d8:	2000b4e8 	.word	0x2000b4e8
 80021dc:	00000000 	.word	0x00000000
 80021e0:	2000bd28 	.word	0x2000bd28
 80021e4:	2000b510 	.word	0x2000b510
 80021e8:	2000beb8 	.word	0x2000beb8
 80021ec:	2000f7a4 	.word	0x2000f7a4
 80021f0:	2000bd4c 	.word	0x2000bd4c
 80021f4:	2000bee0 	.word	0x2000bee0
 80021f8:	2000b50c 	.word	0x2000b50c
 80021fc:	2000bbbc 	.word	0x2000bbbc

08002200 <HPCA_step>:
float S[D_DIM][K_COMP];
extern float A[D_DIM][D_DIM] ;

extern  float Vinit[D_DIM][K_COMP];
void HPCA_step(float X[][B], int ib, float Q[][K_COMP], float D[K_COMP])
{
 8002200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002204:	4607      	mov	r7, r0
 8002206:	ed2d 8b10 	vpush	{d8-d15}
 800220a:	4616      	mov	r6, r2
 800220c:	461d      	mov	r5, r3
	 * A is D_DIM x D_DIM
	 */
//	float S[D_DIM][K_COMP];
//	float A[D_DIM][D_DIM];

	if (ib==0)
 800220e:	2900      	cmp	r1, #0
 8002210:	f000 80d7 	beq.w	80023c2 <HPCA_step+0x1c2>
 8002214:	1c4b      	adds	r3, r1, #1
 8002216:	ee09 3a90 	vmov	s19, r3
 800221a:	ee07 1a90 	vmov	s15, r1
 800221e:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8002222:	eef8 fae7 	vcvt.f32.s32	s31, s15
 8002226:	f8df e250 	ldr.w	lr, [pc, #592]	; 8002478 <HPCA_step+0x278>
			for(int j=0; j<D_DIM; j++)
			{
		          float sum = 0;
		          for(int ui=0; ui<K_COMP; ui++)
		          {
		        	  sum += Q[i][ui]*D[ui]*Q[j][ui];
 800222a:	ed9f aa90 	vldr	s20, [pc, #576]	; 800246c <HPCA_step+0x26c>
 800222e:	f502 6c7a 	add.w	ip, r2, #4000	; 0xfa0
	if (ib==0)
 8002232:	4633      	mov	r3, r6
 8002234:	4602      	mov	r2, r0
		qr_opt(Vinit, Q);
 8002236:	463c      	mov	r4, r7
 8002238:	4670      	mov	r0, lr
 800223a:	4631      	mov	r1, r6
		        	  sum += Q[i][ui]*D[ui]*Q[j][ui];
 800223c:	ed93 fa00 	vldr	s30, [r3]
 8002240:	ed95 3a00 	vldr	s6, [r5]
 8002244:	edd5 3a01 	vldr	s7, [r5, #4]
 8002248:	edd3 ea01 	vldr	s29, [r3, #4]
 800224c:	ed91 ea00 	vldr	s28, [r1]
 8002250:	ed91 da01 	vldr	s26, [r1, #4]
 8002254:	ed93 4a02 	vldr	s8, [r3, #8]
 8002258:	edd5 da02 	vldr	s27, [r5, #8]
 800225c:	edd3 4a03 	vldr	s9, [r3, #12]
 8002260:	edd5 ca03 	vldr	s25, [r5, #12]
 8002264:	ed91 ca02 	vldr	s24, [r1, #8]
 8002268:	ed91 ba03 	vldr	s22, [r1, #12]
 800226c:	ed93 5a04 	vldr	s10, [r3, #16]
 8002270:	edd5 ba04 	vldr	s23, [r5, #16]
 8002274:	edd3 5a05 	vldr	s11, [r3, #20]
 8002278:	edd5 aa05 	vldr	s21, [r5, #20]
 800227c:	ed91 9a04 	vldr	s18, [r1, #16]
 8002280:	ed91 8a05 	vldr	s16, [r1, #20]
 8002284:	ed93 6a06 	vldr	s12, [r3, #24]
 8002288:	edd5 8a06 	vldr	s17, [r5, #24]
 800228c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002290:	ed95 0a07 	vldr	s0, [r5, #28]
 8002294:	edd1 0a06 	vldr	s1, [r1, #24]
 8002298:	edd1 1a07 	vldr	s3, [r1, #28]
 800229c:	ed93 7a08 	vldr	s14, [r3, #32]
 80022a0:	ed95 1a08 	vldr	s2, [r5, #32]
 80022a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022a8:	ed91 2a08 	vldr	s4, [r1, #32]
 80022ac:	edd1 2a09 	vldr	s5, [r1, #36]	; 0x24
 80022b0:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80022b4:	ee6e eaa3 	vmul.f32	s29, s29, s7
 80022b8:	eef0 3a4a 	vmov.f32	s7, s20
 80022bc:	eee3 3a0e 	vfma.f32	s7, s6, s28
 80022c0:	3128      	adds	r1, #40	; 0x28
			for(int j=0; j<D_DIM; j++)
 80022c2:	458c      	cmp	ip, r1
		        	  sum += Q[i][ui]*D[ui]*Q[j][ui];
 80022c4:	ee24 4a2d 	vmul.f32	s8, s8, s27
 80022c8:	eeee 3a8d 	vfma.f32	s7, s29, s26
 80022cc:	ee64 caac 	vmul.f32	s25, s9, s25
 80022d0:	eef0 4a63 	vmov.f32	s9, s7
 80022d4:	eee4 4a0c 	vfma.f32	s9, s8, s24
 80022d8:	ee25 5a2b 	vmul.f32	s10, s10, s23
 80022dc:	eeec 4a8b 	vfma.f32	s9, s25, s22
 80022e0:	ee65 aaaa 	vmul.f32	s21, s11, s21
 80022e4:	eef0 5a64 	vmov.f32	s11, s9
 80022e8:	eee5 5a09 	vfma.f32	s11, s10, s18
 80022ec:	ee26 6a28 	vmul.f32	s12, s12, s17
 80022f0:	eeea 5a88 	vfma.f32	s11, s21, s16
 80022f4:	ee26 0a80 	vmul.f32	s0, s13, s0
 80022f8:	eef0 6a65 	vmov.f32	s13, s11
 80022fc:	eee6 6a20 	vfma.f32	s13, s12, s1
 8002300:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8002304:	eee0 6a21 	vfma.f32	s13, s0, s3
 8002308:	ee27 7a01 	vmul.f32	s14, s14, s2
 800230c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8002310:	eef0 7a66 	vmov.f32	s15, s13
 8002314:	eee7 7a02 	vfma.f32	s15, s14, s4
 8002318:	eee6 7a22 	vfma.f32	s15, s12, s5
		          }
		          A[i][j]=sum/(ib+1)*ib;
		          sum = 0;
		          for(int ui=0; ui<B; ui++)
		          {
		        	  sum += X[i][ui]*X[j][ui];
 800231c:	eeb0 6a4a 	vmov.f32	s12, s20
		          A[i][j]=sum/(ib+1)*ib;
 8002320:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 8002324:	ee67 7a2f 	vmul.f32	s15, s14, s31
 8002328:	edc0 7a00 	vstr	s15, [r0]
		        	  sum += X[i][ui]*X[j][ui];
 800232c:	ecb4 7a01 	vldmia	r4!, {s14}
 8002330:	edd2 6a00 	vldr	s13, [r2]
 8002334:	eea6 6a87 	vfma.f32	s12, s13, s14
		          }
		          A[i][j]+=sum/B/(ib+1);
 8002338:	ee86 7a29 	vdiv.f32	s14, s12, s19
 800233c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002340:	ece0 7a01 	vstmia	r0!, {s15}
			for(int j=0; j<D_DIM; j++)
 8002344:	f47f af7a 	bne.w	800223c <HPCA_step+0x3c>
 8002348:	3328      	adds	r3, #40	; 0x28
		for (int i = 0; i<D_DIM; i++)
 800234a:	4563      	cmp	r3, ip
 800234c:	f50e 7ec8 	add.w	lr, lr, #400	; 0x190
 8002350:	f102 0204 	add.w	r2, r2, #4
 8002354:	f47f af6f 	bne.w	8002236 <HPCA_step+0x36>
 8002358:	f8df b120 	ldr.w	fp, [pc, #288]	; 800247c <HPCA_step+0x27c>
		}

		if (z == (INNER_LOOP-1))
		{
			for(int i = 0; i<K_COMP;i++){
				float n = 0.0f;
 800235c:	f04f 0903 	mov.w	r9, #3
 8002360:	f106 0728 	add.w	r7, r6, #40	; 0x28
 8002364:	f8df c110 	ldr.w	ip, [pc, #272]	; 8002478 <HPCA_step+0x278>
 8002368:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002470 <HPCA_step+0x270>
 800236c:	f50c 74c8 	add.w	r4, ip, #400	; 0x190
		          float sum = 0;
 8002370:	46c6      	mov	lr, r8
 8002372:	4633      	mov	r3, r6
 8002374:	4672      	mov	r2, lr
 8002376:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800246c <HPCA_step+0x26c>
	if (ib==0)
 800237a:	4618      	mov	r0, r3
 800237c:	4661      	mov	r1, ip
		        	  sum += A[j][ui]*Q[ui][i];
 800237e:	ecf1 6a01 	vldmia	r1!, {s13}
 8002382:	4682      	mov	sl, r0
 8002384:	ed9a 7a00 	vldr	s14, [sl]
		          for(int ui=0; ui<D_DIM; ui++)
 8002388:	428c      	cmp	r4, r1
		        	  sum += A[j][ui]*Q[ui][i];
 800238a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800238e:	eee6 7a87 	vfma.f32	s15, s13, s14
		          for(int ui=0; ui<D_DIM; ui++)
 8002392:	d1f4      	bne.n	800237e <HPCA_step+0x17e>
 8002394:	3304      	adds	r3, #4
			for(int i=0; i<K_COMP; i++)
 8002396:	429f      	cmp	r7, r3
		          S[j][i]=sum;
 8002398:	ece2 7a01 	vstmia	r2!, {s15}
			for(int i=0; i<K_COMP; i++)
 800239c:	d1eb      	bne.n	8002376 <HPCA_step+0x176>
 800239e:	f50c 7cc8 	add.w	ip, ip, #400	; 0x190
		for (int j = 0; j<D_DIM; j++)
 80023a2:	45e3      	cmp	fp, ip
 80023a4:	f504 74c8 	add.w	r4, r4, #400	; 0x190
 80023a8:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80023ac:	d1e1      	bne.n	8002372 <HPCA_step+0x172>
		if (z == (INNER_LOOP-1))
 80023ae:	f1b9 0f01 	cmp.w	r9, #1
 80023b2:	d032      	beq.n	800241a <HPCA_step+0x21a>
					n = n + S[j][i] * S[j][i];
				}
				D[i] = sqrt(n);
			}
		}
		qr_opt(S, Q);
 80023b4:	4631      	mov	r1, r6
 80023b6:	482e      	ldr	r0, [pc, #184]	; (8002470 <HPCA_step+0x270>)
 80023b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80023bc:	f7ff fdfc 	bl	8001fb8 <qr_opt>
 80023c0:	e7d0      	b.n	8002364 <HPCA_step+0x164>
		qr_opt(Vinit, Q);
 80023c2:	4611      	mov	r1, r2
 80023c4:	482b      	ldr	r0, [pc, #172]	; (8002474 <HPCA_step+0x274>)
 80023c6:	f7ff fdf7 	bl	8001fb8 <qr_opt>
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HPCA_step+0x278>)
 80023cc:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8002480 <HPCA_step+0x280>
		        	  sum += X[i][ui]*X[j][ui];
 80023d0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800246c <HPCA_step+0x26c>
		qr_opt(Vinit, Q);
 80023d4:	4619      	mov	r1, r3
 80023d6:	463a      	mov	r2, r7
 80023d8:	f507 7cc8 	add.w	ip, r7, #400	; 0x190
			A[i][i] += 1;
 80023dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
 80023e0:	460c      	mov	r4, r1
 80023e2:	4638      	mov	r0, r7
		        	  sum += X[i][ui]*X[j][ui];
 80023e4:	ecf0 7a01 	vldmia	r0!, {s15}
 80023e8:	ed92 6a00 	vldr	s12, [r2]
 80023ec:	eef0 5a66 	vmov.f32	s11, s13
 80023f0:	eee6 5a27 	vfma.f32	s11, s12, s15
			for(int j=0; j<D_DIM; j++)
 80023f4:	4584      	cmp	ip, r0
		          A[i][j]=sum/B;
 80023f6:	ece4 5a01 	vstmia	r4!, {s11}
			for(int j=0; j<D_DIM; j++)
 80023fa:	d1f3      	bne.n	80023e4 <HPCA_step+0x1e4>
			A[i][i] += 1;
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002404:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002408:	edc3 7a00 	vstr	s15, [r3]
 800240c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
		for (int i = 0; i<D_DIM; i++)
 8002410:	459e      	cmp	lr, r3
 8002412:	f102 0204 	add.w	r2, r2, #4
 8002416:	d09f      	beq.n	8002358 <HPCA_step+0x158>
 8002418:	e7e2      	b.n	80023e0 <HPCA_step+0x1e0>
 800241a:	f105 0428 	add.w	r4, r5, #40	; 0x28
				float n = 0.0f;
 800241e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800246c <HPCA_step+0x26c>
 8002422:	f508 627a 	add.w	r2, r8, #4000	; 0xfa0
		          float sum = 0;
 8002426:	4643      	mov	r3, r8
					n = n + S[j][i] * S[j][i];
 8002428:	4619      	mov	r1, r3
 800242a:	ed91 7a00 	vldr	s14, [r1]
 800242e:	3328      	adds	r3, #40	; 0x28
				for(int j=0;j<D_DIM;j++) {
 8002430:	429a      	cmp	r2, r3
					n = n + S[j][i] * S[j][i];
 8002432:	eee7 7a07 	vfma.f32	s15, s14, s14
				for(int j=0;j<D_DIM;j++) {
 8002436:	d1f7      	bne.n	8002428 <HPCA_step+0x228>
				D[i] = sqrt(n);
 8002438:	ee17 0a90 	vmov	r0, s15
 800243c:	f7fe f884 	bl	8000548 <__aeabi_f2d>
 8002440:	ec41 0b10 	vmov	d0, r0, r1
 8002444:	f008 f9d0 	bl	800a7e8 <sqrt>
 8002448:	ec51 0b10 	vmov	r0, r1, d0
 800244c:	f7fe fbcc 	bl	8000be8 <__aeabi_d2f>
 8002450:	f845 0b04 	str.w	r0, [r5], #4
			for(int i = 0; i<K_COMP;i++){
 8002454:	42ac      	cmp	r4, r5
 8002456:	f108 0804 	add.w	r8, r8, #4
 800245a:	d1e0      	bne.n	800241e <HPCA_step+0x21e>
	}

}
 800245c:	ecbd 8b10 	vpop	{d8-d15}
		qr_opt(S, Q);
 8002460:	4631      	mov	r1, r6
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <HPCA_step+0x270>)
}
 8002464:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		qr_opt(S, Q);
 8002468:	f7ff bda6 	b.w	8001fb8 <qr_opt>
 800246c:	00000000 	.word	0x00000000
 8002470:	2000f7a8 	.word	0x2000f7a8
 8002474:	20000000 	.word	0x20000000
 8002478:	200011cc 	.word	0x200011cc
 800247c:	2000ae0c 	.word	0x2000ae0c
 8002480:	2000af9c 	.word	0x2000af9c

08002484 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_DMA_Init+0x30>)
{
 8002486:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	649a      	str	r2, [r3, #72]	; 0x48
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 8002492:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2105      	movs	r1, #5
 800249e:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024a0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80024a2:	f000 f9a9 	bl	80027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024a6:	2010      	movs	r0, #16

}
 80024a8:	b003      	add	sp, #12
 80024aa:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024ae:	f000 b9d9 	b.w	8002864 <HAL_NVIC_EnableIRQ>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024b8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	2400      	movs	r4, #0
{
 80024bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024be:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80024c2:	e9cd 4405 	strd	r4, r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <MX_GPIO_Init+0x80>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024cc:	f042 0204 	orr.w	r2, r2, #4
 80024d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80024d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d4:	f002 0204 	and.w	r2, r2, #4
 80024d8:	9200      	str	r2, [sp, #0]
 80024da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80024e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80024ea:	9201      	str	r2, [sp, #4]
 80024ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	f003 0301 	and.w	r3, r3, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80024fc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002500:	2120      	movs	r1, #32
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002508:	f000 fbb4 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800250e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <MX_GPIO_Init+0x84>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002514:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251a:	f000 fab3 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800251e:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	a903      	add	r1, sp, #12
 8002524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002530:	f000 faa8 	bl	8002a84 <HAL_GPIO_Init>

}
 8002534:	b008      	add	sp, #32
 8002536:	bd10      	pop	{r4, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	48000800 	.word	0x48000800

08002540 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002540:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_TIM6_Init+0x48>)
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <MX_TIM6_Init+0x4c>)
 8002546:	601a      	str	r2, [r3, #0]
{
 8002548:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254a:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 8000-1;
 800254c:	f641 743f 	movw	r4, #7999	; 0x1f3f
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 100-1;
 8002550:	2163      	movs	r1, #99	; 0x63
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002552:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 8000-1;
 8002554:	605c      	str	r4, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002556:	e9c3 2102 	strd	r2, r1, [r3, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255a:	9201      	str	r2, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255c:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255e:	e9cd 2202 	strd	r2, r2, [sp, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002562:	f001 fb9d 	bl	8003ca0 <HAL_TIM_Base_Init>
 8002566:	b958      	cbnz	r0, 8002580 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800256a:	a901      	add	r1, sp, #4
 800256c:	4806      	ldr	r0, [pc, #24]	; (8002588 <MX_TIM6_Init+0x48>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002570:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002572:	f001 fcf7 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	b108      	cbz	r0, 800257c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002578:	f7ff f9fa 	bl	8001970 <Error_Handler>
  }

}
 800257c:	b004      	add	sp, #16
 800257e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002580:	f7ff f9f6 	bl	8001970 <Error_Handler>
 8002584:	e7f0      	b.n	8002568 <MX_TIM6_Init+0x28>
 8002586:	bf00      	nop
 8002588:	20010748 	.word	0x20010748
 800258c:	40001000 	.word	0x40001000

08002590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8002590:	6802      	ldr	r2, [r0, #0]
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_TIM_Base_MspInit+0x3c>)
 8002594:	429a      	cmp	r2, r3
 8002596:	d000      	beq.n	800259a <HAL_TIM_Base_MspInit+0xa>
 8002598:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800259a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 800259e:	b500      	push	{lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025a2:	f042 0210 	orr.w	r2, r2, #16
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80025aa:	b083      	sub	sp, #12
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	9301      	str	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2105      	movs	r1, #5
 80025b6:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80025ba:	f000 f91d 	bl	80027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025be:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80025c0:	b003      	add	sp, #12
 80025c2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025c6:	f000 b94d 	b.w	8002864 <HAL_NVIC_EnableIRQ>
 80025ca:	bf00      	nop
 80025cc:	40001000 	.word	0x40001000

080025d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

    huart2.Instance = USART2;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_USART2_UART_Init+0x34>)
 80025d2:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <MX_USART2_UART_Init+0x38>)
{
 80025d4:	b510      	push	{r4, lr}
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
 80025d6:	210c      	movs	r1, #12
    huart2.Instance = USART2;
 80025d8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80025da:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025de:	2200      	movs	r2, #0
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80025e0:	4618      	mov	r0, r3
    huart2.Init.BaudRate = 115200;
 80025e2:	605c      	str	r4, [r3, #4]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80025e4:	6159      	str	r1, [r3, #20]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80025e6:	e9c3 2202 	strd	r2, r2, [r3, #8]
    huart2.Init.Parity = UART_PARITY_NONE;
 80025ea:	611a      	str	r2, [r3, #16]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ec:	e9c3 2206 	strd	r2, r2, [r3, #24]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80025f4:	f001 feca 	bl	800438c <HAL_UART_Init>
 80025f8:	b900      	cbnz	r0, 80025fc <MX_USART2_UART_Init+0x2c>
    {
        Error_Handler();
    }

}
 80025fa:	bd10      	pop	{r4, pc}
 80025fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Error_Handler();
 8002600:	f7ff b9b6 	b.w	8001970 <Error_Handler>
 8002604:	20010850 	.word	0x20010850
 8002608:	40004400 	.word	0x40004400

0800260c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

    huart3.Instance = USART3;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_USART3_UART_Init+0x34>)
 800260e:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <MX_USART3_UART_Init+0x38>)
{
 8002610:	b510      	push	{r4, lr}
    huart3.Init.BaudRate = 115200;
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
    huart3.Init.StopBits = UART_STOPBITS_1;
    huart3.Init.Parity = UART_PARITY_NONE;
    huart3.Init.Mode = UART_MODE_TX_RX;
 8002612:	210c      	movs	r1, #12
    huart3.Instance = USART3;
 8002614:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8002616:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	2200      	movs	r2, #0
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    if (HAL_UART_Init(&huart3) != HAL_OK)
 800261c:	4618      	mov	r0, r3
    huart3.Init.BaudRate = 115200;
 800261e:	605c      	str	r4, [r3, #4]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8002620:	6159      	str	r1, [r3, #20]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8002622:	e9c3 2202 	strd	r2, r2, [r3, #8]
    huart3.Init.Parity = UART_PARITY_NONE;
 8002626:	611a      	str	r2, [r3, #16]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	e9c3 2206 	strd	r2, r2, [r3, #24]
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8002630:	f001 feac 	bl	800438c <HAL_UART_Init>
 8002634:	b900      	cbnz	r0, 8002638 <MX_USART3_UART_Init+0x2c>
    {
        Error_Handler();
    }

}
 8002636:	bd10      	pop	{r4, pc}
 8002638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Error_Handler();
 800263c:	f7ff b998 	b.w	8001970 <Error_Handler>
 8002640:	200107d0 	.word	0x200107d0
 8002644:	40004800 	.word	0x40004800

08002648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002648:	b5f0      	push	{r4, r5, r6, r7, lr}

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
    if (uartHandle->Instance == USART2)
 800264a:	6803      	ldr	r3, [r0, #0]
 800264c:	4a33      	ldr	r2, [pc, #204]	; (800271c <HAL_UART_MspInit+0xd4>)
{
 800264e:	b08b      	sub	sp, #44	; 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002650:	2400      	movs	r4, #0
    if (uartHandle->Instance == USART2)
 8002652:	4293      	cmp	r3, r2
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002654:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002658:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800265c:	9409      	str	r4, [sp, #36]	; 0x24
    if (uartHandle->Instance == USART2)
 800265e:	d004      	beq.n	800266a <HAL_UART_MspInit+0x22>

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
    else if (uartHandle->Instance == USART3)
 8002660:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_UART_MspInit+0xd8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d039      	beq.n	80026da <HAL_UART_MspInit+0x92>

        /* USER CODE BEGIN USART3_MspInit 1 */

        /* USER CODE END USART3_MspInit 1 */
    }
}
 8002666:	b00b      	add	sp, #44	; 0x2c
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_UART_MspInit+0xdc>)
        hdma_usart2_rx.Instance = DMA1_Channel6;
 800266c:	4e2e      	ldr	r6, [pc, #184]	; (8002728 <HAL_UART_MspInit+0xe0>)
        __HAL_RCC_USART2_CLK_ENABLE();
 800266e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002670:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002674:	659a      	str	r2, [r3, #88]	; 0x58
 8002676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002678:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800267c:	9201      	str	r2, [sp, #4]
 800267e:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	64da      	str	r2, [r3, #76]	; 0x4c
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002690:	230c      	movs	r3, #12
 8002692:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	a905      	add	r1, sp, #20
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2702      	movs	r7, #2
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	9308      	str	r3, [sp, #32]
 800269c:	4605      	mov	r5, r0
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269e:	2307      	movs	r3, #7
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	9a02      	ldr	r2, [sp, #8]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a6:	9309      	str	r3, [sp, #36]	; 0x24
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	9706      	str	r7, [sp, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f000 f9eb 	bl	8002a84 <HAL_GPIO_Init>
        hdma_usart2_rx.Instance = DMA1_Channel6;
 80026ae:	491f      	ldr	r1, [pc, #124]	; (800272c <HAL_UART_MspInit+0xe4>)
        hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80026b0:	6077      	str	r7, [r6, #4]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	2280      	movs	r2, #128	; 0x80
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026b4:	2320      	movs	r3, #32
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026b6:	4630      	mov	r0, r6
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	e9c6 4402 	strd	r4, r4, [r6, #8]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026bc:	e9c6 4405 	strd	r4, r4, [r6, #20]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026c0:	6234      	str	r4, [r6, #32]
        hdma_usart2_rx.Instance = DMA1_Channel6;
 80026c2:	6031      	str	r1, [r6, #0]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	6132      	str	r2, [r6, #16]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026c6:	61f3      	str	r3, [r6, #28]
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026c8:	f000 f8da 	bl	8002880 <HAL_DMA_Init>
 80026cc:	b108      	cbz	r0, 80026d2 <HAL_UART_MspInit+0x8a>
            Error_Handler();
 80026ce:	f7ff f94f 	bl	8001970 <Error_Handler>
        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 80026d2:	66ee      	str	r6, [r5, #108]	; 0x6c
 80026d4:	62b5      	str	r5, [r6, #40]	; 0x28
}
 80026d6:	b00b      	add	sp, #44	; 0x2c
 80026d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_USART3_CLK_ENABLE();
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_UART_MspInit+0xdc>)
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026dc:	4814      	ldr	r0, [pc, #80]	; (8002730 <HAL_UART_MspInit+0xe8>)
        __HAL_RCC_USART3_CLK_ENABLE();
 80026de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80026e4:	659a      	str	r2, [r3, #88]	; 0x58
 80026e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026e8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	9a03      	ldr	r2, [sp, #12]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026f2:	f042 0204 	orr.w	r2, r2, #4
 80026f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2203      	movs	r2, #3
        GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002702:	2307      	movs	r3, #7
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	a905      	add	r1, sp, #20
        GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002706:	2530      	movs	r5, #48	; 0x30
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2402      	movs	r4, #2
        __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	9e04      	ldr	r6, [sp, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	e9cd 5405 	strd	r5, r4, [sp, #20]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002710:	e9cd 2308 	strd	r2, r3, [sp, #32]
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f000 f9b6 	bl	8002a84 <HAL_GPIO_Init>
}
 8002718:	b00b      	add	sp, #44	; 0x2c
 800271a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800271c:	40004400 	.word	0x40004400
 8002720:	40004800 	.word	0x40004800
 8002724:	40021000 	.word	0x40021000
 8002728:	20010788 	.word	0x20010788
 800272c:	4002006c 	.word	0x4002006c
 8002730:	48000800 	.word	0x48000800

08002734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002738:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800273a:	e003      	b.n	8002744 <LoopCopyDataInit>

0800273c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800273e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002740:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002742:	3104      	adds	r1, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002748:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800274a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800274c:	d3f6      	bcc.n	800273c <CopyDataInit>
	ldr	r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002750:	e002      	b.n	8002758 <LoopFillZerobss>

08002752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002752:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002754:	f842 3b04 	str.w	r3, [r2], #4

08002758 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <LoopForever+0x16>)
	cmp	r2, r3
 800275a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800275c:	d3f9      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800275e:	f7ff f867 	bl	8001830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f004 fa47 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002766:	f7ff f8c7 	bl	80018f8 <main>

0800276a <LoopForever>:

LoopForever:
    b LoopForever
 800276a:	e7fe      	b.n	800276a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800276c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002770:	0800b3e4 	.word	0x0800b3e4
	ldr	r0, =_sdata
 8002774:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002778:	20001184 	.word	0x20001184
	ldr	r2, =_sbss
 800277c:	20001184 	.word	0x20001184
	ldr	r3, = _ebss
 8002780:	20010918 	.word	0x20010918

08002784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC1_2_IRQHandler>
	...

08002788 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b500      	push	{lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278a:	2003      	movs	r0, #3
{
 800278c:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278e:	f000 f821 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe ffd2 	bl	800173c <HAL_InitTick>
 8002798:	b118      	cbz	r0, 80027a2 <HAL_Init+0x1a>
  {
    status = HAL_ERROR;
 800279a:	2001      	movs	r0, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800279c:	b003      	add	sp, #12
 800279e:	f85d fb04 	ldr.w	pc, [sp], #4
 80027a2:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 80027a4:	f7fe ffac 	bl	8001700 <HAL_MspInit>
 80027a8:	9801      	ldr	r0, [sp, #4]
}
 80027aa:	b003      	add	sp, #12
 80027ac:	f85d fb04 	ldr.w	pc, [sp], #4

080027b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80027b0:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <HAL_IncTick+0x10>)
 80027b2:	4904      	ldr	r1, [pc, #16]	; (80027c4 <HAL_IncTick+0x14>)
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	6809      	ldr	r1, [r1, #0]
 80027b8:	440b      	add	r3, r1
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	200108d0 	.word	0x200108d0
 80027c4:	20000fa4 	.word	0x20000fa4

080027c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <HAL_GetTick+0x8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200108d0 	.word	0x200108d0

080027d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80027dc:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027de:	0200      	lsls	r0, r0, #8
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80027ec:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80027ee:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_NVIC_SetPriority+0x64>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002802:	f1c3 0507 	rsb	r5, r3, #7
 8002806:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002808:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	bf28      	it	cs
 800280e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002810:	2c06      	cmp	r4, #6
 8002812:	d919      	bls.n	8002848 <HAL_NVIC_SetPriority+0x50>
 8002814:	3b03      	subs	r3, #3
 8002816:	f04f 34ff 	mov.w	r4, #4294967295
 800281a:	409c      	lsls	r4, r3
 800281c:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	40aa      	lsls	r2, r5
 8002826:	ea21 0102 	bic.w	r1, r1, r2
 800282a:	fa01 f203 	lsl.w	r2, r1, r3
 800282e:	4322      	orrs	r2, r4
 8002830:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8002832:	2800      	cmp	r0, #0
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	db0a      	blt.n	800284e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800283c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002840:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002844:	bc30      	pop	{r4, r5}
 8002846:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002848:	2400      	movs	r4, #0
 800284a:	4623      	mov	r3, r4
 800284c:	e7e8      	b.n	8002820 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_NVIC_SetPriority+0x68>)
 8002850:	f000 000f 	and.w	r0, r0, #15
 8002854:	4403      	add	r3, r0
 8002856:	761a      	strb	r2, [r3, #24]
 8002858:	bc30      	pop	{r4, r5}
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	e000ecfc 	.word	0xe000ecfc

08002864 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002864:	2800      	cmp	r0, #0
 8002866:	db07      	blt.n	8002878 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002868:	f000 011f 	and.w	r1, r0, #31
 800286c:	2301      	movs	r3, #1
 800286e:	0940      	lsrs	r0, r0, #5
 8002870:	4a02      	ldr	r2, [pc, #8]	; (800287c <HAL_NVIC_EnableIRQ+0x18>)
 8002872:	408b      	lsls	r3, r1
 8002874:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002880:	2800      	cmp	r0, #0
 8002882:	d04e      	beq.n	8002922 <HAL_DMA_Init+0xa2>
 8002884:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002886:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_DMA_Init+0xbc>)
 8002888:	6800      	ldr	r0, [r0, #0]
 800288a:	4290      	cmp	r0, r2
{
 800288c:	b4f0      	push	{r4, r5, r6, r7}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800288e:	d93f      	bls.n	8002910 <HAL_DMA_Init+0x90>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002890:	492b      	ldr	r1, [pc, #172]	; (8002940 <HAL_DMA_Init+0xc0>)
 8002892:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA2;
 8002894:	4d2c      	ldr	r5, [pc, #176]	; (8002948 <HAL_DMA_Init+0xc8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002896:	4401      	add	r1, r0
 8002898:	fba2 2101 	umull	r2, r1, r2, r1
 800289c:	0909      	lsrs	r1, r1, #4
 800289e:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028a0:	e9d3 4202 	ldrd	r4, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a4:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80028a8:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	433a      	orrs	r2, r7
  hdma->State = HAL_DMA_STATE_BUSY;
 80028ac:	2702      	movs	r7, #2
 80028ae:	f883 7025 	strb.w	r7, [r3, #37]	; 0x25
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	699f      	ldr	r7, [r3, #24]
 80028b4:	641d      	str	r5, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b8:	433a      	orrs	r2, r7
 80028ba:	69df      	ldr	r7, [r3, #28]
  tmp = hdma->Instance->CCR;
 80028bc:	6806      	ldr	r6, [r0, #0]
 80028be:	6459      	str	r1, [r3, #68]	; 0x44
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c2:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028c4:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c8:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028ca:	f026 0670 	bic.w	r6, r6, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80028ce:	4332      	orrs	r2, r6
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028d0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80028d4:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028d6:	d012      	beq.n	80028fe <HAL_DMA_Init+0x7e>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028d8:	4c1c      	ldr	r4, [pc, #112]	; (800294c <HAL_DMA_Init+0xcc>)
 80028da:	6858      	ldr	r0, [r3, #4]
 80028dc:	f001 011c 	and.w	r1, r1, #28
 80028e0:	220f      	movs	r2, #15
 80028e2:	408a      	lsls	r2, r1
 80028e4:	42a5      	cmp	r5, r4
 80028e6:	ea6f 0202 	mvn.w	r2, r2
 80028ea:	fa00 f101 	lsl.w	r1, r0, r1
 80028ee:	d01a      	beq.n	8002926 <HAL_DMA_Init+0xa6>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028f0:	4c17      	ldr	r4, [pc, #92]	; (8002950 <HAL_DMA_Init+0xd0>)
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	4002      	ands	r2, r0
 80028f6:	6022      	str	r2, [r4, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028f8:	6820      	ldr	r0, [r4, #0]
 80028fa:	4301      	orrs	r1, r0
 80028fc:	6021      	str	r1, [r4, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002900:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002902:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002904:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
}
 800290c:	bcf0      	pop	{r4, r5, r6, r7}
 800290e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002910:	4910      	ldr	r1, [pc, #64]	; (8002954 <HAL_DMA_Init+0xd4>)
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA1;
 8002914:	4d0d      	ldr	r5, [pc, #52]	; (800294c <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002916:	4401      	add	r1, r0
 8002918:	fba2 2101 	umull	r2, r1, r2, r1
 800291c:	0909      	lsrs	r1, r1, #4
 800291e:	0089      	lsls	r1, r1, #2
 8002920:	e7be      	b.n	80028a0 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
}
 8002924:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002926:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800292a:	4002      	ands	r2, r0
 800292c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002930:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8002934:	4301      	orrs	r1, r0
 8002936:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 800293a:	e7e0      	b.n	80028fe <HAL_DMA_Init+0x7e>
 800293c:	40020407 	.word	0x40020407
 8002940:	bffdfbf8 	.word	0xbffdfbf8
 8002944:	cccccccd 	.word	0xcccccccd
 8002948:	40020400 	.word	0x40020400
 800294c:	40020000 	.word	0x40020000
 8002950:	400204a8 	.word	0x400204a8
 8002954:	bffdfff8 	.word	0xbffdfff8

08002958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002958:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800295a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800295e:	2c01      	cmp	r4, #1
 8002960:	d034      	beq.n	80029cc <HAL_DMA_Start_IT+0x74>

  if(HAL_DMA_STATE_READY == hdma->State)
 8002962:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8002966:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002968:	b2ed      	uxtb	r5, r5
 800296a:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800296c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8002970:	d126      	bne.n	80029c0 <HAL_DMA_Start_IT+0x68>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002972:	6804      	ldr	r4, [r0, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002974:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297a:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800297c:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002980:	63c6      	str	r6, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002982:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8002984:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002986:	f007 071c 	and.w	r7, r7, #28
    __HAL_DMA_DISABLE(hdma);
 800298a:	f026 0601 	bic.w	r6, r6, #1
 800298e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002990:	40bd      	lsls	r5, r7

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002992:	6886      	ldr	r6, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002994:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 8002998:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800299a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800299e:	bf0b      	itete	eq
 80029a0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80029a2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80029a4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80029a6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80029a8:	b19b      	cbz	r3, 80029d2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	f043 030e 	orr.w	r3, r3, #14
 80029b0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	bcf0      	pop	{r4, r5, r6, r7}
 80029be:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 80029c0:	2300      	movs	r3, #0
 80029c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80029c6:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80029c8:	2002      	movs	r0, #2
}
 80029ca:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80029cc:	2002      	movs	r0, #2
}
 80029ce:	bcf0      	pop	{r4, r5, r6, r7}
 80029d0:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	f043 030a 	orr.w	r3, r3, #10
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	e7e6      	b.n	80029b2 <HAL_DMA_Start_IT+0x5a>

080029e4 <HAL_DMA_IRQHandler>:
{
 80029e4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029e6:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 80029ea:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ec:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029ee:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029f0:	f003 031c 	and.w	r3, r3, #28
 80029f4:	409a      	lsls	r2, r3
 80029f6:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 80029f8:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029fa:	d00a      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x2e>
 80029fc:	f014 0f04 	tst.w	r4, #4
 8002a00:	d007      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x2e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	069b      	lsls	r3, r3, #26
 8002a06:	d537      	bpl.n	8002a78 <HAL_DMA_IRQHandler+0x94>
      if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a0a:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8002a0c:	b1cb      	cbz	r3, 8002a42 <HAL_DMA_IRQHandler+0x5e>
}
 8002a0e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002a10:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a12:	2202      	movs	r2, #2
 8002a14:	409a      	lsls	r2, r3
 8002a16:	420a      	tst	r2, r1
 8002a18:	d015      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x62>
 8002a1a:	f014 0f02 	tst.w	r4, #2
 8002a1e:	d012      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x62>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	0699      	lsls	r1, r3, #26
 8002a24:	d406      	bmi.n	8002a34 <HAL_DMA_IRQHandler+0x50>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a26:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a28:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a2a:	f023 030a 	bic.w	r3, r3, #10
 8002a2e:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a30:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8002a34:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a36:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e5      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x2a>
}
 8002a42:	bc70      	pop	{r4, r5, r6}
 8002a44:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	420a      	tst	r2, r1
 8002a4c:	d0f9      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x5e>
 8002a4e:	0722      	lsls	r2, r4, #28
 8002a50:	d5f7      	bpl.n	8002a42 <HAL_DMA_IRQHandler+0x5e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8002a54:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a56:	f022 020e 	bic.w	r2, r2, #14
 8002a5a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8002a62:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a64:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a66:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002a68:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8002a70:	2900      	cmp	r1, #0
 8002a72:	d0e6      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x5e>
}
 8002a74:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a76:	4708      	bx	r1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	602b      	str	r3, [r5, #0]
 8002a80:	e7c2      	b.n	8002a08 <HAL_DMA_IRQHandler+0x24>
 8002a82:	bf00      	nop

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a88:	f8d1 9000 	ldr.w	r9, [r1]
{
 8002a8c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	f1b9 0f00 	cmp.w	r9, #0
 8002a92:	f000 80b1 	beq.w	8002bf8 <HAL_GPIO_Init+0x174>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a96:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8002c70 <HAL_GPIO_Init+0x1ec>
 8002a9a:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 8002a9c:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	fa03 f705 	lsl.w	r7, r3, r5
    if (iocurrent != 0x00u)
 8002aa4:	ea17 0a09 	ands.w	sl, r7, r9
 8002aa8:	f000 80a1 	beq.w	8002bee <HAL_GPIO_Init+0x16a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002ab0:	f023 0110 	bic.w	r1, r3, #16
 8002ab4:	006c      	lsls	r4, r5, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	3901      	subs	r1, #1
 8002aba:	40a2      	lsls	r2, r4
 8002abc:	2901      	cmp	r1, #1
 8002abe:	ea6f 0202 	mvn.w	r2, r2
 8002ac2:	d80e      	bhi.n	8002ae2 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR;
 8002ac4:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac6:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aca:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002acc:	40a1      	lsls	r1, r4
 8002ace:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8002ad0:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ad2:	6846      	ldr	r6, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ad4:	f3c3 1100 	ubfx	r1, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ad8:	ea26 0607 	bic.w	r6, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002adc:	40a9      	lsls	r1, r5
 8002ade:	4331      	orrs	r1, r6
        GPIOx->OTYPER = temp;
 8002ae0:	6041      	str	r1, [r0, #4]
 8002ae2:	f8d8 6008 	ldr.w	r6, [r8, #8]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ae6:	f003 0103 	and.w	r1, r3, #3
 8002aea:	2903      	cmp	r1, #3
 8002aec:	fa06 f604 	lsl.w	r6, r6, r4
 8002af0:	f000 8085 	beq.w	8002bfe <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8002af4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002af6:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002af8:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afa:	2b02      	cmp	r3, #2
      GPIOx->PUPDR = temp;
 8002afc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afe:	f040 808d 	bne.w	8002c1c <HAL_GPIO_Init+0x198>
        temp = GPIOx->AFR[position >> 3u];
 8002b02:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8002b06:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b0a:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 8002b0e:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b12:	00bf      	lsls	r7, r7, #2
 8002b14:	f04f 0c0f 	mov.w	ip, #15
 8002b18:	fa0c fc07 	lsl.w	ip, ip, r7
 8002b1c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b20:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8002b24:	40be      	lsls	r6, r7
 8002b26:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002b2a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8002b2e:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b30:	40a1      	lsls	r1, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b32:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b34:	4311      	orrs	r1, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b36:	00da      	lsls	r2, r3, #3
      GPIOx->MODER = temp;
 8002b38:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3a:	d558      	bpl.n	8002bee <HAL_GPIO_Init+0x16a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3c:	4945      	ldr	r1, [pc, #276]	; (8002c54 <HAL_GPIO_Init+0x1d0>)
 8002b3e:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	660a      	str	r2, [r1, #96]	; 0x60
 8002b46:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002b48:	f025 0403 	bic.w	r4, r5, #3
 8002b4c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002b50:	f002 0201 	and.w	r2, r2, #1
 8002b54:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8002b58:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b5a:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b60:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	210f      	movs	r1, #15
 8002b66:	4091      	lsls	r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b68:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b6c:	ea26 0101 	bic.w	r1, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b70:	d016      	beq.n	8002ba0 <HAL_GPIO_Init+0x11c>
 8002b72:	4e39      	ldr	r6, [pc, #228]	; (8002c58 <HAL_GPIO_Init+0x1d4>)
 8002b74:	42b0      	cmp	r0, r6
 8002b76:	d059      	beq.n	8002c2c <HAL_GPIO_Init+0x1a8>
 8002b78:	4e38      	ldr	r6, [pc, #224]	; (8002c5c <HAL_GPIO_Init+0x1d8>)
 8002b7a:	42b0      	cmp	r0, r6
 8002b7c:	d051      	beq.n	8002c22 <HAL_GPIO_Init+0x19e>
 8002b7e:	4e38      	ldr	r6, [pc, #224]	; (8002c60 <HAL_GPIO_Init+0x1dc>)
 8002b80:	42b0      	cmp	r0, r6
 8002b82:	d05d      	beq.n	8002c40 <HAL_GPIO_Init+0x1bc>
 8002b84:	4e37      	ldr	r6, [pc, #220]	; (8002c64 <HAL_GPIO_Init+0x1e0>)
 8002b86:	42b0      	cmp	r0, r6
 8002b88:	d05f      	beq.n	8002c4a <HAL_GPIO_Init+0x1c6>
 8002b8a:	4e37      	ldr	r6, [pc, #220]	; (8002c68 <HAL_GPIO_Init+0x1e4>)
 8002b8c:	42b0      	cmp	r0, r6
 8002b8e:	d052      	beq.n	8002c36 <HAL_GPIO_Init+0x1b2>
 8002b90:	4e36      	ldr	r6, [pc, #216]	; (8002c6c <HAL_GPIO_Init+0x1e8>)
 8002b92:	42b0      	cmp	r0, r6
 8002b94:	bf0c      	ite	eq
 8002b96:	2606      	moveq	r6, #6
 8002b98:	2607      	movne	r6, #7
 8002b9a:	fa06 f202 	lsl.w	r2, r6, r2
 8002b9e:	4311      	orrs	r1, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba0:	60a1      	str	r1, [r4, #8]
        temp = EXTI->IMR1;
 8002ba2:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 8002ba6:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002baa:	03df      	lsls	r7, r3, #15
        temp &= ~(iocurrent);
 8002bac:	bf54      	ite	pl
 8002bae:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002bb0:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8002bb4:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR1;
 8002bb8:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bbc:	039e      	lsls	r6, r3, #14
        temp &= ~(iocurrent);
 8002bbe:	bf54      	ite	pl
 8002bc0:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002bc2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8002bc6:	f8cb 2004 	str.w	r2, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bca:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bce:	02dc      	lsls	r4, r3, #11
        temp &= ~(iocurrent);
 8002bd0:	bf54      	ite	pl
 8002bd2:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002bd4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8002bd8:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 8002bdc:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be0:	029b      	lsls	r3, r3, #10
        temp &= ~(iocurrent);
 8002be2:	bf54      	ite	pl
 8002be4:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002be6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8002bea:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 8002bee:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf0:	fa39 f305 	lsrs.w	r3, r9, r5
 8002bf4:	f47f af53 	bne.w	8002a9e <HAL_GPIO_Init+0x1a>
  }
}
 8002bf8:	b003      	add	sp, #12
 8002bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->ASCR;
 8002bfe:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002c02:	f3c3 0ec0 	ubfx	lr, r3, #3, #1
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c06:	ea2c 0c07 	bic.w	ip, ip, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002c0a:	4677      	mov	r7, lr
 8002c0c:	40af      	lsls	r7, r5
 8002c0e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->ASCR = temp;
 8002c12:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002c14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c16:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c18:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002c1a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1c:	2b12      	cmp	r3, #18
 8002c1e:	d186      	bne.n	8002b2e <HAL_GPIO_Init+0xaa>
 8002c20:	e76f      	b.n	8002b02 <HAL_GPIO_Init+0x7e>
 8002c22:	2602      	movs	r6, #2
 8002c24:	fa06 f202 	lsl.w	r2, r6, r2
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	e7b9      	b.n	8002ba0 <HAL_GPIO_Init+0x11c>
 8002c2c:	2601      	movs	r6, #1
 8002c2e:	fa06 f202 	lsl.w	r2, r6, r2
 8002c32:	4311      	orrs	r1, r2
 8002c34:	e7b4      	b.n	8002ba0 <HAL_GPIO_Init+0x11c>
 8002c36:	2605      	movs	r6, #5
 8002c38:	fa06 f202 	lsl.w	r2, r6, r2
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	e7af      	b.n	8002ba0 <HAL_GPIO_Init+0x11c>
 8002c40:	2603      	movs	r6, #3
 8002c42:	fa06 f202 	lsl.w	r2, r6, r2
 8002c46:	4311      	orrs	r1, r2
 8002c48:	e7aa      	b.n	8002ba0 <HAL_GPIO_Init+0x11c>
 8002c4a:	2604      	movs	r6, #4
 8002c4c:	fa06 f202 	lsl.w	r2, r6, r2
 8002c50:	4311      	orrs	r1, r2
 8002c52:	e7a5      	b.n	8002ba0 <HAL_GPIO_Init+0x11c>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	48000800 	.word	0x48000800
 8002c60:	48000c00 	.word	0x48000c00
 8002c64:	48001000 	.word	0x48001000
 8002c68:	48001400 	.word	0x48001400
 8002c6c:	48001800 	.word	0x48001800
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	b90a      	cbnz	r2, 8002c7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c76:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002c78:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c7a:	6181      	str	r1, [r0, #24]
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <HAL_PWREx_GetVoltageRange+0xc>)
 8002c82:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002c84:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c90:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c92:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d02e      	beq.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x72>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d023      	beq.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x72>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cba:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002cbe:	4815      	ldr	r0, [pc, #84]	; (8002d14 <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002cc4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
{
 8002cc8:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ccc:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cce:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cd0:	2332      	movs	r3, #50	; 0x32
 8002cd2:	fb03 f304 	mul.w	r3, r3, r4
 8002cd6:	fba0 0303 	umull	r0, r3, r0, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cdc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cde:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce2:	d506      	bpl.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x62>
 8002ce4:	e000      	b.n	8002ce8 <HAL_PWREx_ControlVoltageScaling+0x58>
 8002ce6:	b123      	cbz	r3, 8002cf2 <HAL_PWREx_ControlVoltageScaling+0x62>
 8002ce8:	6951      	ldr	r1, [r2, #20]
 8002cea:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002cec:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf0:	d4f9      	bmi.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x56>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	d405      	bmi.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8002cfa:	2000      	movs	r0, #0
}
 8002cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d00:	4770      	bx	lr
  return HAL_OK;
 8002d02:	2000      	movs	r0, #0
}
 8002d04:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002d06:	2003      	movs	r0, #3
 8002d08:	e7f8      	b.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x6c>
 8002d0a:	bf00      	nop
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	20000fa0 	.word	0x20000fa0
 8002d14:	431bde83 	.word	0x431bde83

08002d18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d1a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1c:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d1e:	f013 030c 	ands.w	r3, r3, #12
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1e>
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d038      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d034      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7e>
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d30:	bf18      	it	ne
 8002d32:	2000      	movne	r0, #0
 8002d34:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d38:	6811      	ldr	r1, [r2, #0]
 8002d3a:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d3c:	bf54      	ite	pl
 8002d3e:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d42:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002d44:	491f      	ldr	r1, [pc, #124]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d46:	bf54      	ite	pl
 8002d48:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d4c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002d50:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d54:	b303      	cbz	r3, 8002d98 <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d12d      	bne.n	8002db6 <HAL_RCC_GetSysClockFreq+0x9e>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d025      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x9a>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	bf08      	it	eq
 8002d6c:	4610      	moveq	r0, r2
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d70:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d72:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002d7a:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d7c:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d80:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002d84:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d88:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d8a:	0058      	lsls	r0, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d8c:	fbb2 f3f1 	udiv	r3, r2, r1
    sysclockfreq = pllvco / pllr;
 8002d90:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d94:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb0>)
  }

  return sysclockfreq;
}
 8002d98:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d9a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d9e:	2a01      	cmp	r2, #1
 8002da0:	d0c9      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002daa:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dac:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002db0:	d1d9      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002db4:	e7db      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x56>
 8002db6:	2000      	movs	r0, #0
  return sysclockfreq;
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	007a1200 	.word	0x007a1200
 8002dc4:	0800b0bc 	.word	0x0800b0bc
 8002dc8:	00f42400 	.word	0x00f42400

08002dcc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	f000 81a4 	beq.w	800311a <HAL_RCC_OscConfig+0x34e>
{
 8002dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4ab2      	ldr	r2, [pc, #712]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dd8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dda:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ddc:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dde:	06da      	lsls	r2, r3, #27
{
 8002de0:	b085      	sub	sp, #20
 8002de2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dec:	d52e      	bpl.n	8002e4c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dee:	2d00      	cmp	r5, #0
 8002df0:	f000 810e 	beq.w	8003010 <HAL_RCC_OscConfig+0x244>
 8002df4:	2d0c      	cmp	r5, #12
 8002df6:	f000 8108 	beq.w	800300a <HAL_RCC_OscConfig+0x23e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002dfc:	4fa8      	ldr	r7, [pc, #672]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8177 	beq.w	80030f2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_MSI_ENABLE();
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fcdc 	bl	80027c8 <HAL_GetTick>
 8002e10:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e12:	e006      	b.n	8002e22 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e14:	f7ff fcd8 	bl	80027c8 <HAL_GetTick>
 8002e18:	eba0 0008 	sub.w	r0, r0, r8
 8002e1c:	2802      	cmp	r0, #2
 8002e1e:	f200 8178 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	079b      	lsls	r3, r3, #30
 8002e26:	d5f5      	bpl.n	8002e14 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6a22      	ldr	r2, [r4, #32]
 8002e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69e2      	ldr	r2, [r4, #28]
 8002e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4c:	07d9      	lsls	r1, r3, #31
 8002e4e:	f100 80b3 	bmi.w	8002fb8 <HAL_RCC_OscConfig+0x1ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	0799      	lsls	r1, r3, #30
 8002e54:	d523      	bpl.n	8002e9e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e56:	2d04      	cmp	r5, #4
 8002e58:	f000 813b 	beq.w	80030d2 <HAL_RCC_OscConfig+0x306>
 8002e5c:	2d0c      	cmp	r5, #12
 8002e5e:	f000 8135 	beq.w	80030cc <HAL_RCC_OscConfig+0x300>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e62:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002e64:	4e8e      	ldr	r6, [pc, #568]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8183 	beq.w	8003172 <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	6833      	ldr	r3, [r6, #0]
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e72:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002e74:	f7ff fca8 	bl	80027c8 <HAL_GetTick>
 8002e78:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7a:	e005      	b.n	8002e88 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7ff fca4 	bl	80027c8 <HAL_GetTick>
 8002e80:	1bc0      	subs	r0, r0, r7
 8002e82:	2802      	cmp	r0, #2
 8002e84:	f200 8145 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	6833      	ldr	r3, [r6, #0]
 8002e8a:	055b      	lsls	r3, r3, #21
 8002e8c:	d5f6      	bpl.n	8002e7c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	6873      	ldr	r3, [r6, #4]
 8002e90:	6922      	ldr	r2, [r4, #16]
 8002e92:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002e96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e9a:	6073      	str	r3, [r6, #4]
 8002e9c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	0719      	lsls	r1, r3, #28
 8002ea0:	d519      	bpl.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002ea4:	4e7e      	ldr	r6, [pc, #504]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 814d 	beq.w	8003146 <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_LSI_ENABLE();
 8002eac:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002eb8:	f7ff fc86 	bl	80027c8 <HAL_GetTick>
 8002ebc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7ff fc82 	bl	80027c8 <HAL_GetTick>
 8002ec4:	1bc0      	subs	r0, r0, r7
 8002ec6:	2802      	cmp	r0, #2
 8002ec8:	f200 8123 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ecc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002ed0:	079a      	lsls	r2, r3, #30
 8002ed2:	d5f5      	bpl.n	8002ec0 <HAL_RCC_OscConfig+0xf4>
 8002ed4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed6:	0758      	lsls	r0, r3, #29
 8002ed8:	d541      	bpl.n	8002f5e <HAL_RCC_OscConfig+0x192>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eda:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8002edc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ede:	00d1      	lsls	r1, r2, #3
 8002ee0:	f100 8145 	bmi.w	800316e <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ee6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ef6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef8:	4e6a      	ldr	r6, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x2d8>)
 8002efa:	6832      	ldr	r2, [r6, #0]
 8002efc:	05d2      	lsls	r2, r2, #23
 8002efe:	f140 81af 	bpl.w	8003260 <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f02:	68a3      	ldr	r3, [r4, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	f000 81bd 	beq.w	8003284 <HAL_RCC_OscConfig+0x4b8>
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	f000 8188 	beq.w	8003220 <HAL_RCC_OscConfig+0x454>
 8002f10:	4e63      	ldr	r6, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8002f12:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8002f1e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 8185 	bne.w	800323a <HAL_RCC_OscConfig+0x46e>
      tickstart = HAL_GetTick();
 8002f30:	f7ff fc4a 	bl	80027c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f38:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f3a:	e006      	b.n	8002f4a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7ff fc44 	bl	80027c8 <HAL_GetTick>
 8002f40:	eba0 0009 	sub.w	r0, r0, r9
 8002f44:	4540      	cmp	r0, r8
 8002f46:	f200 80e4 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002f4e:	0799      	lsls	r1, r3, #30
 8002f50:	d4f4      	bmi.n	8002f3c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002f52:	b127      	cbz	r7, 8002f5e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8002f56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6593      	str	r3, [r2, #88]	; 0x58
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f60:	b333      	cbz	r3, 8002fb0 <HAL_RCC_OscConfig+0x1e4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f000 81ba 	beq.w	80032dc <HAL_RCC_OscConfig+0x510>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f68:	2d0c      	cmp	r5, #12
 8002f6a:	f000 8094 	beq.w	8003096 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f76:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8002f7e:	d103      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1bc>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	f022 0203 	bic.w	r2, r2, #3
 8002f86:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f88:	4c45      	ldr	r4, [pc, #276]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8002f8a:	68e3      	ldr	r3, [r4, #12]
 8002f8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002f96:	f7ff fc17 	bl	80027c8 <HAL_GetTick>
 8002f9a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	e005      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7ff fc13 	bl	80027c8 <HAL_GetTick>
 8002fa2:	1b40      	subs	r0, r0, r5
 8002fa4:	2802      	cmp	r0, #2
 8002fa6:	f200 80b4 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	d4f6      	bmi.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 8002fb0:	2000      	movs	r0, #0
}
 8002fb2:	b005      	add	sp, #20
 8002fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fb8:	2d08      	cmp	r5, #8
 8002fba:	d07d      	beq.n	80030b8 <HAL_RCC_OscConfig+0x2ec>
 8002fbc:	2d0c      	cmp	r5, #12
 8002fbe:	d079      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	6863      	ldr	r3, [r4, #4]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc6:	f000 80aa 	beq.w	800311e <HAL_RCC_OscConfig+0x352>
 8002fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fce:	f000 81dc 	beq.w	800338a <HAL_RCC_OscConfig+0x5be>
 8002fd2:	4f33      	ldr	r7, [pc, #204]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fda:	603a      	str	r2, [r7, #0]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fe2:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 809f 	bne.w	8003128 <HAL_RCC_OscConfig+0x35c>
        tickstart = HAL_GetTick();
 8002fea:	f7ff fbed 	bl	80027c8 <HAL_GetTick>
 8002fee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff0:	e006      	b.n	8003000 <HAL_RCC_OscConfig+0x234>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff2:	f7ff fbe9 	bl	80027c8 <HAL_GetTick>
 8002ff6:	eba0 0008 	sub.w	r0, r0, r8
 8002ffa:	2864      	cmp	r0, #100	; 0x64
 8002ffc:	f200 8089 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	0398      	lsls	r0, r3, #14
 8003004:	d4f5      	bmi.n	8002ff2 <HAL_RCC_OscConfig+0x226>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	e723      	b.n	8002e52 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800300a:	2e01      	cmp	r6, #1
 800300c:	f47f aef5 	bne.w	8002dfa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	079f      	lsls	r7, r3, #30
 8003016:	d43b      	bmi.n	8003090 <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 800301a:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800301e:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003020:	4f1f      	ldr	r7, [pc, #124]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003022:	0710      	lsls	r0, r2, #28
 8003024:	bf56      	itet	pl
 8003026:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800302a:	681b      	ldrmi	r3, [r3, #0]
 800302c:	091b      	lsrpl	r3, r3, #4
 800302e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003032:	4598      	cmp	r8, r3
 8003034:	f200 80af 	bhi.w	8003196 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003046:	ea43 0308 	orr.w	r3, r3, r8
 800304a:	603b      	str	r3, [r7, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69e2      	ldr	r2, [r4, #28]
 8003050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003054:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003058:	607b      	str	r3, [r7, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305a:	2d00      	cmp	r5, #0
 800305c:	f000 811a 	beq.w	8003294 <HAL_RCC_OscConfig+0x4c8>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003060:	f7ff fe5a 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_RCC_OscConfig+0x2d4>)
 8003066:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x2dc>)
 8003068:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 800306a:	4910      	ldr	r1, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x2e0>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800306c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <HAL_RCC_OscConfig+0x2e4>)
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800307c:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003080:	f7fe fb5c 	bl	800173c <HAL_InitTick>
        if(status != HAL_OK)
 8003084:	b940      	cbnz	r0, 8003098 <HAL_RCC_OscConfig+0x2cc>
 8003086:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003088:	07d9      	lsls	r1, r3, #31
 800308a:	f57f aee2 	bpl.w	8002e52 <HAL_RCC_OscConfig+0x86>
 800308e:	e793      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003090:	69a3      	ldr	r3, [r4, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1c0      	bne.n	8003018 <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 8003096:	2001      	movs	r0, #1
}
 8003098:	b005      	add	sp, #20
 800309a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	0800b0a4 	.word	0x0800b0a4
 80030ac:	20000fa8 	.word	0x20000fa8
 80030b0:	20000fa0 	.word	0x20000fa0
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030b4:	2e03      	cmp	r6, #3
 80030b6:	d183      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	4aba      	ldr	r2, [pc, #744]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	0392      	lsls	r2, r2, #14
 80030be:	f57f aec8 	bpl.w	8002e52 <HAL_RCC_OscConfig+0x86>
 80030c2:	6862      	ldr	r2, [r4, #4]
 80030c4:	2a00      	cmp	r2, #0
 80030c6:	f47f aec4 	bne.w	8002e52 <HAL_RCC_OscConfig+0x86>
 80030ca:	e7e4      	b.n	8003096 <HAL_RCC_OscConfig+0x2ca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030cc:	2e02      	cmp	r6, #2
 80030ce:	f47f aec8 	bne.w	8002e62 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d2:	4ab4      	ldr	r2, [pc, #720]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	0552      	lsls	r2, r2, #21
 80030d8:	d502      	bpl.n	80030e0 <HAL_RCC_OscConfig+0x314>
 80030da:	68e2      	ldr	r2, [r4, #12]
 80030dc:	2a00      	cmp	r2, #0
 80030de:	d0da      	beq.n	8003096 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	49b0      	ldr	r1, [pc, #704]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 80030e2:	6920      	ldr	r0, [r4, #16]
 80030e4:	684a      	ldr	r2, [r1, #4]
 80030e6:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 80030ea:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80030ee:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f0:	e6d5      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80030fa:	f7ff fb65 	bl	80027c8 <HAL_GetTick>
 80030fe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	0798      	lsls	r0, r3, #30
 8003104:	d5bf      	bpl.n	8003086 <HAL_RCC_OscConfig+0x2ba>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003106:	f7ff fb5f 	bl	80027c8 <HAL_GetTick>
 800310a:	eba0 0008 	sub.w	r0, r0, r8
 800310e:	2802      	cmp	r0, #2
 8003110:	d9f6      	bls.n	8003100 <HAL_RCC_OscConfig+0x334>
            return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
}
 8003114:	b005      	add	sp, #20
 8003116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
}
 800311c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	4aa1      	ldr	r2, [pc, #644]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003128:	f7ff fb4e 	bl	80027c8 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312c:	4f9d      	ldr	r7, [pc, #628]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
        tickstart = HAL_GetTick();
 800312e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003130:	e005      	b.n	800313e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003132:	f7ff fb49 	bl	80027c8 <HAL_GetTick>
 8003136:	eba0 0008 	sub.w	r0, r0, r8
 800313a:	2864      	cmp	r0, #100	; 0x64
 800313c:	d8e9      	bhi.n	8003112 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	039b      	lsls	r3, r3, #14
 8003142:	d5f6      	bpl.n	8003132 <HAL_RCC_OscConfig+0x366>
 8003144:	e75f      	b.n	8003006 <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_LSI_DISABLE();
 8003146:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003152:	f7ff fb39 	bl	80027c8 <HAL_GetTick>
 8003156:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003158:	e004      	b.n	8003164 <HAL_RCC_OscConfig+0x398>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315a:	f7ff fb35 	bl	80027c8 <HAL_GetTick>
 800315e:	1bc0      	subs	r0, r0, r7
 8003160:	2802      	cmp	r0, #2
 8003162:	d8d6      	bhi.n	8003112 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003164:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003168:	079b      	lsls	r3, r3, #30
 800316a:	d4f6      	bmi.n	800315a <HAL_RCC_OscConfig+0x38e>
 800316c:	e6b2      	b.n	8002ed4 <HAL_RCC_OscConfig+0x108>
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2700      	movs	r7, #0
 8003170:	e6c2      	b.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8003172:	6833      	ldr	r3, [r6, #0]
 8003174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003178:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800317a:	f7ff fb25 	bl	80027c8 <HAL_GetTick>
 800317e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003180:	e004      	b.n	800318c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7ff fb21 	bl	80027c8 <HAL_GetTick>
 8003186:	1bc0      	subs	r0, r0, r7
 8003188:	2802      	cmp	r0, #2
 800318a:	d8c2      	bhi.n	8003112 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	0558      	lsls	r0, r3, #21
 8003190:	d4f7      	bmi.n	8003182 <HAL_RCC_OscConfig+0x3b6>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	e683      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003198:	00d9      	lsls	r1, r3, #3
 800319a:	d531      	bpl.n	8003200 <HAL_RCC_OscConfig+0x434>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800319c:	f7ff fd70 	bl	8002c80 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80031a4:	f000 8104 	beq.w	80033b0 <HAL_RCC_OscConfig+0x5e4>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a8:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80031ac:	f200 811b 	bhi.w	80033e6 <HAL_RCC_OscConfig+0x61a>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b0:	f000 8175 	beq.w	800349e <HAL_RCC_OscConfig+0x6d2>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031b4:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 80031b8:	fab8 f888 	clz	r8, r8
 80031bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c0:	4a79      	ldr	r2, [pc, #484]	; (80033a8 <HAL_RCC_OscConfig+0x5dc>)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f023 0307 	bic.w	r3, r3, #7
 80031c8:	ea43 0308 	orr.w	r3, r3, r8
 80031cc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4598      	cmp	r8, r3
 80031d6:	f47f af5e 	bne.w	8003096 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	6a21      	ldr	r1, [r4, #32]
 80031e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	69e1      	ldr	r1, [r4, #28]
 80031f4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80031f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	e72f      	b.n	8003060 <HAL_RCC_OscConfig+0x294>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	65bb      	str	r3, [r7, #88]	; 0x58
 8003208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 8003212:	f7ff fd35 	bl	8002c80 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321c:	65bb      	str	r3, [r7, #88]	; 0x58
 800321e:	e7bf      	b.n	80031a0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003220:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 8003222:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003226:	f042 0204 	orr.w	r2, r2, #4
 800322a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800322e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 800323a:	f7ff fac5 	bl	80027c8 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	4e59      	ldr	r6, [pc, #356]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8003240:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	e006      	b.n	8003256 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7ff fabe 	bl	80027c8 <HAL_GetTick>
 800324c:	eba0 0009 	sub.w	r0, r0, r9
 8003250:	4540      	cmp	r0, r8
 8003252:	f63f af5e 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003256:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800325a:	0798      	lsls	r0, r3, #30
 800325c:	d5f4      	bpl.n	8003248 <HAL_RCC_OscConfig+0x47c>
 800325e:	e678      	b.n	8002f52 <HAL_RCC_OscConfig+0x186>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003260:	6832      	ldr	r2, [r6, #0]
 8003262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003266:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 8003268:	f7ff faae 	bl	80027c8 <HAL_GetTick>
 800326c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326e:	6833      	ldr	r3, [r6, #0]
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	f53f ae46 	bmi.w	8002f02 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7ff faa7 	bl	80027c8 <HAL_GetTick>
 800327a:	eba0 0008 	sub.w	r0, r0, r8
 800327e:	2802      	cmp	r0, #2
 8003280:	d9f5      	bls.n	800326e <HAL_RCC_OscConfig+0x4a2>
 8003282:	e746      	b.n	8003112 <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003284:	4a47      	ldr	r2, [pc, #284]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 8003286:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003292:	e7d2      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003296:	00da      	lsls	r2, r3, #3
 8003298:	f140 8095 	bpl.w	80033c6 <HAL_RCC_OscConfig+0x5fa>
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff fcf0 	bl	8002c80 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80032a4:	f000 80a2 	beq.w	80033ec <HAL_RCC_OscConfig+0x620>
    if(msirange > RCC_MSIRANGE_8)
 80032a8:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80032ac:	f200 80ee 	bhi.w	800348c <HAL_RCC_OscConfig+0x6c0>
      if(msirange == RCC_MSIRANGE_8)
 80032b0:	f000 80f8 	beq.w	80034a4 <HAL_RCC_OscConfig+0x6d8>
      else if(msirange == RCC_MSIRANGE_7)
 80032b4:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 80032b8:	fab8 f888 	clz	r8, r8
 80032bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
  __HAL_FLASH_SET_LATENCY(latency);
 80032c0:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x5dc>)
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	f023 0307 	bic.w	r3, r3, #7
 80032c8:	ea43 0308 	orr.w	r3, r3, r8
 80032cc:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4598      	cmp	r8, r3
 80032d6:	f47f aede 	bne.w	8003096 <HAL_RCC_OscConfig+0x2ca>
 80032da:	e6c1      	b.n	8003060 <HAL_RCC_OscConfig+0x294>
      pll_config = RCC->PLLCFGR;
 80032dc:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 80032e0:	68d3      	ldr	r3, [r2, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	f003 0003 	and.w	r0, r3, #3
 80032e6:	4288      	cmp	r0, r1
 80032e8:	f000 808b 	beq.w	8003402 <HAL_RCC_OscConfig+0x636>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ec:	2d0c      	cmp	r5, #12
 80032ee:	f43f aed2 	beq.w	8003096 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032f2:	4d2c      	ldr	r5, [pc, #176]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
 80032f4:	682a      	ldr	r2, [r5, #0]
 80032f6:	0152      	lsls	r2, r2, #5
 80032f8:	f53f aecd 	bmi.w	8003096 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032fc:	682a      	ldr	r2, [r5, #0]
 80032fe:	00d3      	lsls	r3, r2, #3
 8003300:	f53f aec9 	bmi.w	8003096 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8003304:	682a      	ldr	r2, [r5, #0]
 8003306:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800330a:	602a      	str	r2, [r5, #0]
            tickstart = HAL_GetTick();
 800330c:	f7ff fa5c 	bl	80027c8 <HAL_GetTick>
 8003310:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003312:	e005      	b.n	8003320 <HAL_RCC_OscConfig+0x554>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7ff fa58 	bl	80027c8 <HAL_GetTick>
 8003318:	1b80      	subs	r0, r0, r6
 800331a:	2802      	cmp	r0, #2
 800331c:	f63f aef9 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	019f      	lsls	r7, r3, #6
 8003324:	d4f6      	bmi.n	8003314 <HAL_RCC_OscConfig+0x548>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003326:	68e9      	ldr	r1, [r5, #12]
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x5e0>)
 800332a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800332c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800332e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003330:	400b      	ands	r3, r1
 8003332:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8003336:	4313      	orrs	r3, r2
 8003338:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800333c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800333e:	1e74      	subs	r4, r6, #1
 8003340:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003344:	0900      	lsrs	r0, r0, #4
 8003346:	0849      	lsrs	r1, r1, #1
 8003348:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 800334c:	3901      	subs	r1, #1
 800334e:	0852      	lsrs	r2, r2, #1
 8003350:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003354:	3a01      	subs	r2, #1
 8003356:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800335a:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800335c:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	4c11      	ldr	r4, [pc, #68]	; (80033a4 <HAL_RCC_OscConfig+0x5d8>)
            __HAL_RCC_PLL_ENABLE();
 8003360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003364:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003366:	68eb      	ldr	r3, [r5, #12]
 8003368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336c:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800336e:	f7ff fa2b 	bl	80027c8 <HAL_GetTick>
 8003372:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	e005      	b.n	8003382 <HAL_RCC_OscConfig+0x5b6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7ff fa27 	bl	80027c8 <HAL_GetTick>
 800337a:	1b40      	subs	r0, r0, r5
 800337c:	2802      	cmp	r0, #2
 800337e:	f63f aec8 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	0198      	lsls	r0, r3, #6
 8003386:	d5f6      	bpl.n	8003376 <HAL_RCC_OscConfig+0x5aa>
 8003388:	e612      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800338e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e6c1      	b.n	8003128 <HAL_RCC_OscConfig+0x35c>
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40022000 	.word	0x40022000
 80033ac:	f99d808c 	.word	0xf99d808c
    if(msirange > RCC_MSIRANGE_8)
 80033b0:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80033b4:	d96d      	bls.n	8003492 <HAL_RCC_OscConfig+0x6c6>
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b6:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 80033ba:	bf34      	ite	cc
 80033bc:	f04f 0801 	movcc.w	r8, #1
 80033c0:	f04f 0802 	movcs.w	r8, #2
 80033c4:	e6fc      	b.n	80031c0 <HAL_RCC_OscConfig+0x3f4>
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	9303      	str	r3, [sp, #12]
 80033d6:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033d8:	f7ff fc52 	bl	8002c80 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80033e4:	e75c      	b.n	80032a0 <HAL_RCC_OscConfig+0x4d4>
      latency = FLASH_LATENCY_3; /* 3WS */
 80033e6:	f04f 0803 	mov.w	r8, #3
 80033ea:	e6e9      	b.n	80031c0 <HAL_RCC_OscConfig+0x3f4>
    if(msirange > RCC_MSIRANGE_8)
 80033ec:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80033f0:	d952      	bls.n	8003498 <HAL_RCC_OscConfig+0x6cc>
        latency = FLASH_LATENCY_2; /* 2WS */
 80033f2:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 80033f6:	bf34      	ite	cc
 80033f8:	f04f 0801 	movcc.w	r8, #1
 80033fc:	f04f 0802 	movcs.w	r8, #2
 8003400:	e75e      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003402:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003404:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8003408:	3801      	subs	r0, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	ebb1 1f00 	cmp.w	r1, r0, lsl #4
 800340e:	f47f af6d 	bne.w	80032ec <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003412:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003414:	f403 41fe 	and.w	r1, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003418:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
 800341c:	f47f af66 	bne.w	80032ec <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003420:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003422:	3907      	subs	r1, #7
 8003424:	f403 3000 	and.w	r0, r3, #131072	; 0x20000
 8003428:	bf18      	it	ne
 800342a:	2101      	movne	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800342c:	4288      	cmp	r0, r1
 800342e:	f47f af5d 	bne.w	80032ec <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003432:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003434:	0849      	lsrs	r1, r1, #1
 8003436:	3901      	subs	r1, #1
 8003438:	f403 00c0 	and.w	r0, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800343c:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 8003440:	f47f af54 	bne.w	80032ec <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003444:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003446:	0849      	lsrs	r1, r1, #1
 8003448:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800344c:	3901      	subs	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344e:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 8003452:	f47f af4b 	bne.w	80032ec <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	0199      	lsls	r1, r3, #6
 800345a:	f53f ada9 	bmi.w	8002fb0 <HAL_RCC_OscConfig+0x1e4>
          __HAL_RCC_PLL_ENABLE();
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003464:	6013      	str	r3, [r2, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003466:	68d3      	ldr	r3, [r2, #12]
 8003468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346c:	60d3      	str	r3, [r2, #12]
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	4614      	mov	r4, r2
          tickstart = HAL_GetTick();
 8003470:	f7ff f9aa 	bl	80027c8 <HAL_GetTick>
 8003474:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	e005      	b.n	8003484 <HAL_RCC_OscConfig+0x6b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7ff f9a6 	bl	80027c8 <HAL_GetTick>
 800347c:	1b40      	subs	r0, r0, r5
 800347e:	2802      	cmp	r0, #2
 8003480:	f63f ae47 	bhi.w	8003112 <HAL_RCC_OscConfig+0x346>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	019a      	lsls	r2, r3, #6
 8003488:	d5f6      	bpl.n	8003478 <HAL_RCC_OscConfig+0x6ac>
 800348a:	e591      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1e4>
      latency = FLASH_LATENCY_3; /* 3WS */
 800348c:	f04f 0803 	mov.w	r8, #3
 8003490:	e716      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f4>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003492:	f04f 0800 	mov.w	r8, #0
 8003496:	e693      	b.n	80031c0 <HAL_RCC_OscConfig+0x3f4>
 8003498:	f04f 0800 	mov.w	r8, #0
 800349c:	e710      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f4>
        latency = FLASH_LATENCY_2; /* 2WS */
 800349e:	f04f 0802 	mov.w	r8, #2
 80034a2:	e68d      	b.n	80031c0 <HAL_RCC_OscConfig+0x3f4>
 80034a4:	f04f 0802 	mov.w	r8, #2
 80034a8:	e70a      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f4>
 80034aa:	bf00      	nop

080034ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80034ac:	b178      	cbz	r0, 80034ce <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ae:	4a46      	ldr	r2, [pc, #280]	; (80035c8 <HAL_RCC_ClockConfig+0x11c>)
 80034b0:	6813      	ldr	r3, [r2, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	428b      	cmp	r3, r1
 80034b8:	d20b      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	6813      	ldr	r3, [r2, #0]
 80034bc:	f023 0307 	bic.w	r3, r3, #7
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c4:	6813      	ldr	r3, [r2, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	428b      	cmp	r3, r1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
}
 80034d0:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	6803      	ldr	r3, [r0, #0]
{
 80034d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	07d9      	lsls	r1, r3, #31
 80034dc:	4604      	mov	r4, r0
 80034de:	d524      	bpl.n	800352a <HAL_RCC_ClockConfig+0x7e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e0:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	4a3a      	ldr	r2, [pc, #232]	; (80035cc <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e4:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e8:	d062      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x104>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d065      	beq.n	80035ba <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d166      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x114>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f2:	0796      	lsls	r6, r2, #30
 80034f4:	d532      	bpl.n	800355c <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4e35      	ldr	r6, [pc, #212]	; (80035cc <HAL_RCC_ClockConfig+0x120>)
 80034f8:	68b2      	ldr	r2, [r6, #8]
 80034fa:	f022 0203 	bic.w	r2, r2, #3
 80034fe:	4313      	orrs	r3, r2
 8003500:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003502:	f7ff f961 	bl	80027c8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003506:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800350a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	e005      	b.n	800351a <HAL_RCC_ClockConfig+0x6e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350e:	f7ff f95b 	bl	80027c8 <HAL_GetTick>
 8003512:	eba0 0008 	sub.w	r0, r0, r8
 8003516:	42b8      	cmp	r0, r7
 8003518:	d84d      	bhi.n	80035b6 <HAL_RCC_ClockConfig+0x10a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	68b3      	ldr	r3, [r6, #8]
 800351c:	6862      	ldr	r2, [r4, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003526:	d1f2      	bne.n	800350e <HAL_RCC_ClockConfig+0x62>
 8003528:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352a:	0799      	lsls	r1, r3, #30
 800352c:	d506      	bpl.n	800353c <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352e:	4927      	ldr	r1, [pc, #156]	; (80035cc <HAL_RCC_ClockConfig+0x120>)
 8003530:	68a0      	ldr	r0, [r4, #8]
 8003532:	688a      	ldr	r2, [r1, #8]
 8003534:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003538:	4302      	orrs	r2, r0
 800353a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x11c>)
 800353e:	680a      	ldr	r2, [r1, #0]
 8003540:	f002 0207 	and.w	r2, r2, #7
 8003544:	42aa      	cmp	r2, r5
 8003546:	d90c      	bls.n	8003562 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003548:	680a      	ldr	r2, [r1, #0]
 800354a:	f022 0207 	bic.w	r2, r2, #7
 800354e:	432a      	orrs	r2, r5
 8003550:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	680a      	ldr	r2, [r1, #0]
 8003554:	f002 0207 	and.w	r2, r2, #7
 8003558:	42aa      	cmp	r2, r5
 800355a:	d002      	beq.n	8003562 <HAL_RCC_ClockConfig+0xb6>
    return HAL_ERROR;
 800355c:	2001      	movs	r0, #1
}
 800355e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	075a      	lsls	r2, r3, #29
 8003564:	d506      	bpl.n	8003574 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003566:	4919      	ldr	r1, [pc, #100]	; (80035cc <HAL_RCC_ClockConfig+0x120>)
 8003568:	68e0      	ldr	r0, [r4, #12]
 800356a:	688a      	ldr	r2, [r1, #8]
 800356c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003570:	4302      	orrs	r2, r0
 8003572:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	071b      	lsls	r3, r3, #28
 8003576:	d507      	bpl.n	8003588 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003578:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_RCC_ClockConfig+0x120>)
 800357a:	6921      	ldr	r1, [r4, #16]
 800357c:	6893      	ldr	r3, [r2, #8]
 800357e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003582:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003586:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003588:	f7ff fbc6 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_RCC_ClockConfig+0x120>)
 800358e:	4c10      	ldr	r4, [pc, #64]	; (80035d0 <HAL_RCC_ClockConfig+0x124>)
 8003590:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8003592:	4910      	ldr	r1, [pc, #64]	; (80035d4 <HAL_RCC_ClockConfig+0x128>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003594:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_RCC_ClockConfig+0x12c>)
 8003596:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800359a:	5ce3      	ldrb	r3, [r4, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa20 f303 	lsr.w	r3, r0, r3
}
 80035a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80035a8:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035aa:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 80035ac:	f7fe b8c6 	b.w	800173c <HAL_InitTick>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b0:	0192      	lsls	r2, r2, #6
 80035b2:	d4a0      	bmi.n	80034f6 <HAL_RCC_ClockConfig+0x4a>
 80035b4:	e7d2      	b.n	800355c <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 80035b6:	2003      	movs	r0, #3
 80035b8:	e7d1      	b.n	800355e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	0397      	lsls	r7, r2, #14
 80035bc:	d49b      	bmi.n	80034f6 <HAL_RCC_ClockConfig+0x4a>
 80035be:	e7cd      	b.n	800355c <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c0:	0550      	lsls	r0, r2, #21
 80035c2:	d5cb      	bpl.n	800355c <HAL_RCC_ClockConfig+0xb0>
 80035c4:	e797      	b.n	80034f6 <HAL_RCC_ClockConfig+0x4a>
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40021000 	.word	0x40021000
 80035d0:	0800b0a4 	.word	0x0800b0a4
 80035d4:	20000fa8 	.word	0x20000fa8
 80035d8:	20000fa0 	.word	0x20000fa0

080035dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80035de:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80035e0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80035e2:	4906      	ldr	r1, [pc, #24]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80035e8:	6808      	ldr	r0, [r1, #0]
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
}
 80035f0:	40d8      	lsrs	r0, r3
 80035f2:	4770      	bx	lr
 80035f4:	40021000 	.word	0x40021000
 80035f8:	0800b0b4 	.word	0x0800b0b4
 80035fc:	20000fa0 	.word	0x20000fa0

08003600 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003602:	4a06      	ldr	r2, [pc, #24]	; (800361c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003604:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003606:	4906      	ldr	r1, [pc, #24]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003608:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800360c:	6808      	ldr	r0, [r1, #0]
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	f003 031f 	and.w	r3, r3, #31
}
 8003614:	40d8      	lsrs	r0, r3
 8003616:	4770      	bx	lr
 8003618:	40021000 	.word	0x40021000
 800361c:	0800b0b4 	.word	0x0800b0b4
 8003620:	20000fa0 	.word	0x20000fa0

08003624 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003626:	220f      	movs	r2, #15
 8003628:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	f002 0203 	and.w	r2, r2, #3
 8003630:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003638:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003640:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	08db      	lsrs	r3, r3, #3
{
 8003646:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800364c:	4c05      	ldr	r4, [pc, #20]	; (8003664 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800364e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003650:	6823      	ldr	r3, [r4, #0]
}
 8003652:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	600b      	str	r3, [r1, #0]
}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40022000 	.word	0x40022000

08003668 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003668:	4a45      	ldr	r2, [pc, #276]	; (8003780 <RCCEx_PLLSAI1_Config+0x118>)
{
 800366a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800366c:	68d4      	ldr	r4, [r2, #12]
 800366e:	6803      	ldr	r3, [r0, #0]
 8003670:	07a4      	lsls	r4, r4, #30
 8003672:	d006      	beq.n	8003682 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003674:	68d4      	ldr	r4, [r2, #12]
 8003676:	f004 0403 	and.w	r4, r4, #3
 800367a:	429c      	cmp	r4, r3
 800367c:	d00b      	beq.n	8003696 <RCCEx_PLLSAI1_Config+0x2e>
 800367e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003682:	2b02      	cmp	r3, #2
 8003684:	d011      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x42>
 8003686:	2b03      	cmp	r3, #3
 8003688:	d056      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0xd0>
 800368a:	2b01      	cmp	r3, #1
 800368c:	d1f7      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	0797      	lsls	r7, r2, #30
 8003692:	d5f4      	bpl.n	800367e <RCCEx_PLLSAI1_Config+0x16>
 8003694:	e00c      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x48>
       ||
 8003696:	2c00      	cmp	r4, #0
 8003698:	d0f1      	beq.n	800367e <RCCEx_PLLSAI1_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800369a:	68d3      	ldr	r3, [r2, #12]
       ||
 800369c:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800369e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036a2:	3301      	adds	r3, #1
       ||
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d1ea      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x16>
 80036a8:	e00c      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	0556      	lsls	r6, r2, #21
 80036ae:	d5e6      	bpl.n	800367e <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036b0:	4d33      	ldr	r5, [pc, #204]	; (8003780 <RCCEx_PLLSAI1_Config+0x118>)
 80036b2:	6844      	ldr	r4, [r0, #4]
 80036b4:	68ea      	ldr	r2, [r5, #12]
 80036b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80036ba:	4313      	orrs	r3, r2
 80036bc:	3c01      	subs	r4, #1
 80036be:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80036c2:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80036c4:	4c2e      	ldr	r4, [pc, #184]	; (8003780 <RCCEx_PLLSAI1_Config+0x118>)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	460f      	mov	r7, r1
 80036d0:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 80036d2:	f7ff f879 	bl	80027c8 <HAL_GetTick>
 80036d6:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d8:	e004      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036da:	f7ff f875 	bl	80027c8 <HAL_GetTick>
 80036de:	1b80      	subs	r0, r0, r6
 80036e0:	2802      	cmp	r0, #2
 80036e2:	d827      	bhi.n	8003734 <RCCEx_PLLSAI1_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	011a      	lsls	r2, r3, #4
 80036e8:	d4f7      	bmi.n	80036da <RCCEx_PLLSAI1_Config+0x72>
 80036ea:	68ab      	ldr	r3, [r5, #8]
 80036ec:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80036ee:	bb57      	cbnz	r7, 8003746 <RCCEx_PLLSAI1_Config+0xde>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f0:	6923      	ldr	r3, [r4, #16]
 80036f2:	68ea      	ldr	r2, [r5, #12]
 80036f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	430b      	orrs	r3, r1
 80036fe:	0912      	lsrs	r2, r2, #4
 8003700:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003704:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003706:	4c1e      	ldr	r4, [pc, #120]	; (8003780 <RCCEx_PLLSAI1_Config+0x118>)
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800370e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003710:	f7ff f85a 	bl	80027c8 <HAL_GetTick>
 8003714:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003716:	e004      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003718:	f7ff f856 	bl	80027c8 <HAL_GetTick>
 800371c:	1b80      	subs	r0, r0, r6
 800371e:	2802      	cmp	r0, #2
 8003720:	d808      	bhi.n	8003734 <RCCEx_PLLSAI1_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	d5f7      	bpl.n	8003718 <RCCEx_PLLSAI1_Config+0xb0>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003728:	69aa      	ldr	r2, [r5, #24]
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	2000      	movs	r0, #0
}
 8003732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 8003734:	2003      	movs	r0, #3
}
 8003736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003738:	6814      	ldr	r4, [r2, #0]
 800373a:	03a5      	lsls	r5, r4, #14
 800373c:	d4b8      	bmi.n	80036b0 <RCCEx_PLLSAI1_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	0354      	lsls	r4, r2, #13
 8003742:	d59c      	bpl.n	800367e <RCCEx_PLLSAI1_Config+0x16>
 8003744:	e7b4      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x48>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003746:	2f01      	cmp	r7, #1
 8003748:	d00c      	beq.n	8003764 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800374a:	6922      	ldr	r2, [r4, #16]
 800374c:	696b      	ldr	r3, [r5, #20]
 800374e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003752:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	430a      	orrs	r2, r1
 800375a:	3b01      	subs	r3, #1
 800375c:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 8003760:	6122      	str	r2, [r4, #16]
 8003762:	e7d0      	b.n	8003706 <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	692a      	ldr	r2, [r5, #16]
 8003768:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800376c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003770:	0852      	lsrs	r2, r2, #1
 8003772:	430b      	orrs	r3, r1
 8003774:	3a01      	subs	r2, #1
 8003776:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	e7c3      	b.n	8003706 <RCCEx_PLLSAI1_Config+0x9e>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000

08003784 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003784:	4a3d      	ldr	r2, [pc, #244]	; (800387c <RCCEx_PLLSAI2_Config+0xf8>)
{
 8003786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003788:	68d4      	ldr	r4, [r2, #12]
 800378a:	6803      	ldr	r3, [r0, #0]
 800378c:	07a4      	lsls	r4, r4, #30
 800378e:	d006      	beq.n	800379e <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003790:	68d4      	ldr	r4, [r2, #12]
 8003792:	f004 0403 	and.w	r4, r4, #3
 8003796:	429c      	cmp	r4, r3
 8003798:	d00b      	beq.n	80037b2 <RCCEx_PLLSAI2_Config+0x2e>
 800379a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800379c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d011      	beq.n	80037c6 <RCCEx_PLLSAI2_Config+0x42>
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d056      	beq.n	8003854 <RCCEx_PLLSAI2_Config+0xd0>
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d1f7      	bne.n	800379a <RCCEx_PLLSAI2_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	0797      	lsls	r7, r2, #30
 80037ae:	d5f4      	bpl.n	800379a <RCCEx_PLLSAI2_Config+0x16>
 80037b0:	e00c      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x48>
       ||
 80037b2:	2c00      	cmp	r4, #0
 80037b4:	d0f1      	beq.n	800379a <RCCEx_PLLSAI2_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037b6:	68d3      	ldr	r3, [r2, #12]
       ||
 80037b8:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037be:	3301      	adds	r3, #1
       ||
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d1ea      	bne.n	800379a <RCCEx_PLLSAI2_Config+0x16>
 80037c4:	e00c      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	0556      	lsls	r6, r2, #21
 80037ca:	d5e6      	bpl.n	800379a <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037cc:	4d2b      	ldr	r5, [pc, #172]	; (800387c <RCCEx_PLLSAI2_Config+0xf8>)
 80037ce:	6844      	ldr	r4, [r0, #4]
 80037d0:	68ea      	ldr	r2, [r5, #12]
 80037d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80037d6:	4313      	orrs	r3, r2
 80037d8:	3c01      	subs	r4, #1
 80037da:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80037de:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80037e0:	4c26      	ldr	r4, [pc, #152]	; (800387c <RCCEx_PLLSAI2_Config+0xf8>)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	460f      	mov	r7, r1
 80037ec:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 80037ee:	f7fe ffeb 	bl	80027c8 <HAL_GetTick>
 80037f2:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f4:	e004      	b.n	8003800 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f6:	f7fe ffe7 	bl	80027c8 <HAL_GetTick>
 80037fa:	1b80      	subs	r0, r0, r6
 80037fc:	2802      	cmp	r0, #2
 80037fe:	d827      	bhi.n	8003850 <RCCEx_PLLSAI2_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	009a      	lsls	r2, r3, #2
 8003804:	d4f7      	bmi.n	80037f6 <RCCEx_PLLSAI2_Config+0x72>
 8003806:	68ab      	ldr	r3, [r5, #8]
 8003808:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800380a:	bb57      	cbnz	r7, 8003862 <RCCEx_PLLSAI2_Config+0xde>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800380c:	6962      	ldr	r2, [r4, #20]
 800380e:	68eb      	ldr	r3, [r5, #12]
 8003810:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8003814:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003818:	430a      	orrs	r2, r1
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8003820:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003822:	4c16      	ldr	r4, [pc, #88]	; (800387c <RCCEx_PLLSAI2_Config+0xf8>)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800382c:	f7fe ffcc 	bl	80027c8 <HAL_GetTick>
 8003830:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003832:	e004      	b.n	800383e <RCCEx_PLLSAI2_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003834:	f7fe ffc8 	bl	80027c8 <HAL_GetTick>
 8003838:	1b80      	subs	r0, r0, r6
 800383a:	2802      	cmp	r0, #2
 800383c:	d808      	bhi.n	8003850 <RCCEx_PLLSAI2_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	d5f7      	bpl.n	8003834 <RCCEx_PLLSAI2_Config+0xb0>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003844:	696a      	ldr	r2, [r5, #20]
 8003846:	6963      	ldr	r3, [r4, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	6163      	str	r3, [r4, #20]
 800384c:	2000      	movs	r0, #0
}
 800384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 8003850:	2003      	movs	r0, #3
}
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003854:	6814      	ldr	r4, [r2, #0]
 8003856:	03a5      	lsls	r5, r4, #14
 8003858:	d4b8      	bmi.n	80037cc <RCCEx_PLLSAI2_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	0354      	lsls	r4, r2, #13
 800385e:	d59c      	bpl.n	800379a <RCCEx_PLLSAI2_Config+0x16>
 8003860:	e7b4      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x48>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003862:	6963      	ldr	r3, [r4, #20]
 8003864:	692a      	ldr	r2, [r5, #16]
 8003866:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800386a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	430b      	orrs	r3, r1
 8003872:	3a01      	subs	r2, #1
 8003874:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003878:	6163      	str	r3, [r4, #20]
 800387a:	e7d2      	b.n	8003822 <RCCEx_PLLSAI2_Config+0x9e>
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003884:	6803      	ldr	r3, [r0, #0]
 8003886:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 800388a:	b083      	sub	sp, #12
 800388c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800388e:	d017      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003890:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003892:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003896:	f000 81bb 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800389a:	f240 81ee 	bls.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800389e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80038a2:	f000 81af 	beq.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80038a6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80038aa:	f040 81ec 	bne.w	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ae:	48c3      	ldr	r0, [pc, #780]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80038b4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80038b8:	4311      	orrs	r1, r2
 80038ba:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80038be:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038c0:	04d8      	lsls	r0, r3, #19
 80038c2:	f140 8100 	bpl.w	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->Sai2ClockSelection)
 80038c6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80038c8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80038cc:	f000 8187 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80038d0:	f240 81ca 	bls.w	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80038d4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80038d8:	f000 818d 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038dc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80038e0:	f040 80f0 	bne.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80038e4:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 80038e6:	2f00      	cmp	r7, #0
 80038e8:	f040 8183 	bne.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ec:	49b3      	ldr	r1, [pc, #716]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80038f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038f8:	4302      	orrs	r2, r0
 80038fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038fe:	0399      	lsls	r1, r3, #14
 8003900:	f100 80e5 	bmi.w	8003ace <HAL_RCCEx_PeriphCLKConfig+0x24e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003904:	07da      	lsls	r2, r3, #31
 8003906:	d508      	bpl.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003908:	49ac      	ldr	r1, [pc, #688]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800390a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800390c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003910:	f022 0203 	bic.w	r2, r2, #3
 8003914:	4302      	orrs	r2, r0
 8003916:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800391a:	079f      	lsls	r7, r3, #30
 800391c:	d508      	bpl.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800391e:	49a7      	ldr	r1, [pc, #668]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003920:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003922:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003926:	f022 020c 	bic.w	r2, r2, #12
 800392a:	4302      	orrs	r2, r0
 800392c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003930:	075d      	lsls	r5, r3, #29
 8003932:	d508      	bpl.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003934:	49a1      	ldr	r1, [pc, #644]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003936:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003938:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800393c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003940:	4302      	orrs	r2, r0
 8003942:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003946:	0718      	lsls	r0, r3, #28
 8003948:	d508      	bpl.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800394a:	499c      	ldr	r1, [pc, #624]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800394c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800394e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003952:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003956:	4302      	orrs	r2, r0
 8003958:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800395c:	06d9      	lsls	r1, r3, #27
 800395e:	d508      	bpl.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003960:	4996      	ldr	r1, [pc, #600]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003962:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003964:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003968:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800396c:	4302      	orrs	r2, r0
 800396e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003972:	069a      	lsls	r2, r3, #26
 8003974:	d508      	bpl.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x108>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003976:	4991      	ldr	r1, [pc, #580]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003978:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800397a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800397e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003982:	4302      	orrs	r2, r0
 8003984:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003988:	059f      	lsls	r7, r3, #22
 800398a:	d508      	bpl.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800398c:	498b      	ldr	r1, [pc, #556]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800398e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003990:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003994:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003998:	4302      	orrs	r2, r0
 800399a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800399e:	055d      	lsls	r5, r3, #21
 80039a0:	d508      	bpl.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039a2:	4986      	ldr	r1, [pc, #536]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80039a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80039ae:	4302      	orrs	r2, r0
 80039b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b4:	0658      	lsls	r0, r3, #25
 80039b6:	d508      	bpl.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b8:	4980      	ldr	r1, [pc, #512]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80039bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80039c4:	4302      	orrs	r2, r0
 80039c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ca:	0619      	lsls	r1, r3, #24
 80039cc:	d508      	bpl.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ce:	497b      	ldr	r1, [pc, #492]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80039da:	4302      	orrs	r2, r0
 80039dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e0:	05da      	lsls	r2, r3, #23
 80039e2:	d508      	bpl.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039e4:	4975      	ldr	r1, [pc, #468]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80039f0:	4302      	orrs	r2, r0
 80039f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039f6:	049f      	lsls	r7, r3, #18
 80039f8:	d510      	bpl.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039fa:	4970      	ldr	r1, [pc, #448]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003a02:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a06:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a08:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a0c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a10:	f000 80ce 	beq.w	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a14:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003a18:	f000 8116 	beq.w	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a1c:	031d      	lsls	r5, r3, #12
 8003a1e:	d510      	bpl.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a20:	4966      	ldr	r1, [pc, #408]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a22:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003a24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003a28:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a2c:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a2e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a36:	f000 80c5 	beq.w	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a3a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003a3e:	f000 810b 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a42:	0358      	lsls	r0, r3, #13
 8003a44:	d510      	bpl.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a46:	495d      	ldr	r1, [pc, #372]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a48:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003a4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003a4e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a52:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a54:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a5c:	f000 80a3 	beq.w	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x326>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a60:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003a64:	f000 80e8 	beq.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a68:	0459      	lsls	r1, r3, #17
 8003a6a:	d510      	bpl.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a6c:	4853      	ldr	r0, [pc, #332]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a6e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003a70:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a78:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a7a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a7e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a82:	f000 80a4 	beq.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a86:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003a8a:	f000 80cc 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a8e:	041a      	lsls	r2, r3, #16
 8003a90:	d508      	bpl.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a92:	494a      	ldr	r1, [pc, #296]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a94:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003a96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003a9a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003a9e:	4302      	orrs	r2, r0
 8003aa0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa4:	03db      	lsls	r3, r3, #15
 8003aa6:	d509      	bpl.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa8:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aaa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003aae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003abc:	4630      	mov	r0, r6
 8003abe:	b003      	add	sp, #12
 8003ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 8003ac4:	2601      	movs	r6, #1
 8003ac6:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac8:	0399      	lsls	r1, r3, #14
 8003aca:	f57f af1b 	bpl.w	8003904 <HAL_RCCEx_PeriphCLKConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ad2:	00d2      	lsls	r2, r2, #3
 8003ad4:	d559      	bpl.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x30a>
    FlagStatus       pwrclkchanged = RESET;
 8003ad6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ada:	4d39      	ldr	r5, [pc, #228]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003ae4:	f7fe fe70 	bl	80027c8 <HAL_GetTick>
 8003ae8:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aea:	e005      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fe fe6c 	bl	80027c8 <HAL_GetTick>
 8003af0:	eba0 0009 	sub.w	r0, r0, r9
 8003af4:	2802      	cmp	r0, #2
 8003af6:	d854      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	05db      	lsls	r3, r3, #23
 8003afc:	d5f6      	bpl.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if(ret == HAL_OK)
 8003afe:	2f00      	cmp	r7, #0
 8003b00:	f040 80c9 	bne.w	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x416>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b04:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b06:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b0e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8003b12:	d028      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003b14:	428a      	cmp	r2, r1
 8003b16:	d026      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b18:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b2c:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b34:	07c0      	lsls	r0, r0, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003b3a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b3e:	d512      	bpl.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b40:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8003b42:	f7fe fe41 	bl	80027c8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b4a:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4c:	e005      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe fe3b 	bl	80027c8 <HAL_GetTick>
 8003b52:	eba0 0009 	sub.w	r0, r0, r9
 8003b56:	42b8      	cmp	r0, r7
 8003b58:	d823      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x322>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003b5e:	0799      	lsls	r1, r3, #30
 8003b60:	d5f5      	bpl.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003b62:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b66:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	430b      	orrs	r3, r1
 8003b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003b76:	f1b8 0f00 	cmp.w	r8, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7c:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6593      	str	r3, [r2, #88]	; 0x58
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	e6bc      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b90:	659a      	str	r2, [r3, #88]	; 0x58
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b9c:	f04f 0801 	mov.w	r8, #1
 8003ba0:	e79b      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = HAL_TIMEOUT;
 8003ba2:	2603      	movs	r6, #3
 8003ba4:	e7e7      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba6:	68ca      	ldr	r2, [r1, #12]
 8003ba8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bac:	60ca      	str	r2, [r1, #12]
 8003bae:	e75b      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb0:	68ca      	ldr	r2, [r1, #12]
 8003bb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bb6:	60ca      	str	r2, [r1, #12]
 8003bb8:	e730      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc4:	68ca      	ldr	r2, [r1, #12]
 8003bc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bca:	60ca      	str	r2, [r1, #12]
 8003bcc:	e739      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	1d20      	adds	r0, r4, #4
 8003bd2:	f7ff fd49 	bl	8003668 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003bd6:	b368      	cbz	r0, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      if(ret != HAL_OK)
 8003bd8:	4606      	mov	r6, r0
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	e757      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bde:	2100      	movs	r1, #0
 8003be0:	f104 0020 	add.w	r0, r4, #32
 8003be4:	f7ff fdce 	bl	8003784 <RCCEx_PLLSAI2_Config>
 8003be8:	4607      	mov	r7, r0
 8003bea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003bec:	2f00      	cmp	r7, #0
 8003bee:	f43f ae7d 	beq.w	80038ec <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003bf2:	463e      	mov	r6, r7
 8003bf4:	e768      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bf6:	4929      	ldr	r1, [pc, #164]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003bf8:	68ca      	ldr	r2, [r1, #12]
 8003bfa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bfe:	60ca      	str	r2, [r1, #12]
      break;
 8003c00:	4637      	mov	r7, r6
 8003c02:	e670      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c04:	4825      	ldr	r0, [pc, #148]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003c06:	68c2      	ldr	r2, [r0, #12]
 8003c08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c0c:	60c2      	str	r2, [r0, #12]
 8003c0e:	e64e      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c10:	2100      	movs	r1, #0
 8003c12:	3020      	adds	r0, #32
 8003c14:	f7ff fdb6 	bl	8003784 <RCCEx_PLLSAI2_Config>
 8003c18:	4606      	mov	r6, r0
 8003c1a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003c1c:	2e00      	cmp	r6, #0
 8003c1e:	f47f ae4f 	bne.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c22:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003c24:	e643      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c26:	2102      	movs	r1, #2
 8003c28:	f104 0020 	add.w	r0, r4, #32
 8003c2c:	f7ff fdaa 	bl	8003784 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d1d1      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	e72a      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c38:	2101      	movs	r1, #1
 8003c3a:	1d20      	adds	r0, r4, #4
 8003c3c:	f7ff fd14 	bl	8003668 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003c40:	b338      	cbz	r0, 8003c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8003c42:	4606      	mov	r6, r0
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	e70f      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c48:	2101      	movs	r1, #1
 8003c4a:	1d20      	adds	r0, r4, #4
 8003c4c:	f7ff fd0c 	bl	8003668 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003c50:	b1e8      	cbz	r0, 8003c8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c52:	4606      	mov	r6, r0
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	e6e1      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c58:	2101      	movs	r1, #1
 8003c5a:	1d20      	adds	r0, r4, #4
 8003c5c:	f7ff fd04 	bl	8003668 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003c60:	b198      	cbz	r0, 8003c8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003c62:	4606      	mov	r6, r0
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	e6ec      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	f47f af2b 	bne.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c6e:	1d20      	adds	r0, r4, #4
 8003c70:	f7ff fcfa 	bl	8003668 <RCCEx_PLLSAI1_Config>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	4607      	mov	r7, r0
      break;
 8003c78:	e635      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c7a:	b921      	cbnz	r1, 8003c86 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7c:	3004      	adds	r0, #4
 8003c7e:	f7ff fcf3 	bl	8003668 <RCCEx_PLLSAI1_Config>
 8003c82:	4606      	mov	r6, r0
      break;
 8003c84:	e7c9      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = HAL_ERROR;
 8003c86:	2601      	movs	r6, #1
 8003c88:	e61a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	e6d9      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	e6c4      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	e6e8      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c96:	463e      	mov	r6, r7
 8003c98:	e76d      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d06f      	beq.n	8003d84 <HAL_TIM_Base_Init+0xe4>
{
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003caa:	4604      	mov	r4, r0
 8003cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cb0:	b383      	cbz	r3, 8003d14 <HAL_TIM_Base_Init+0x74>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb4:	4e3d      	ldr	r6, [pc, #244]	; (8003dac <HAL_TIM_Base_Init+0x10c>)
 8003cb6:	69a5      	ldr	r5, [r4, #24]
 8003cb8:	68e0      	ldr	r0, [r4, #12]
 8003cba:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc2:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8003cc4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc6:	d05f      	beq.n	8003d88 <HAL_TIM_Base_Init+0xe8>
 8003cc8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003ccc:	d040      	beq.n	8003d50 <HAL_TIM_Base_Init+0xb0>
 8003cce:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8003cd2:	42b2      	cmp	r2, r6
 8003cd4:	d023      	beq.n	8003d1e <HAL_TIM_Base_Init+0x7e>
 8003cd6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003cda:	42b2      	cmp	r2, r6
 8003cdc:	d01f      	beq.n	8003d1e <HAL_TIM_Base_Init+0x7e>
 8003cde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003ce2:	42b2      	cmp	r2, r6
 8003ce4:	d01b      	beq.n	8003d1e <HAL_TIM_Base_Init+0x7e>
 8003ce6:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 8003cea:	42b2      	cmp	r2, r6
 8003cec:	d017      	beq.n	8003d1e <HAL_TIM_Base_Init+0x7e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cee:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003cf2:	42b2      	cmp	r2, r6
 8003cf4:	d057      	beq.n	8003da6 <HAL_TIM_Base_Init+0x106>
 8003cf6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003cfa:	42b2      	cmp	r2, r6
 8003cfc:	d053      	beq.n	8003da6 <HAL_TIM_Base_Init+0x106>
 8003cfe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d02:	42b2      	cmp	r2, r6
 8003d04:	d04f      	beq.n	8003da6 <HAL_TIM_Base_Init+0x106>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0a:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0e:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d10:	6291      	str	r1, [r2, #40]	; 0x28
 8003d12:	e017      	b.n	8003d44 <HAL_TIM_Base_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 8003d14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d18:	f7fe fc3a 	bl	8002590 <HAL_TIM_Base_MspInit>
 8003d1c:	e7c9      	b.n	8003cb2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003d1e:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d20:	4f23      	ldr	r7, [pc, #140]	; (8003db0 <HAL_TIM_Base_Init+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d26:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d28:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d34:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d36:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8003d38:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d3a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d3c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d3e:	d115      	bne.n	8003d6c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d40:	6963      	ldr	r3, [r4, #20]
 8003d42:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	2301      	movs	r3, #1
 8003d46:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003d48:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8003d50:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d58:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d64:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003d66:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d6a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_TIM_Base_Init+0x114>)
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d0e6      	beq.n	8003d40 <HAL_TIM_Base_Init+0xa0>
 8003d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d0e2      	beq.n	8003d40 <HAL_TIM_Base_Init+0xa0>
 8003d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d1e0      	bne.n	8003d44 <HAL_TIM_Base_Init+0xa4>
 8003d82:	e7dd      	b.n	8003d40 <HAL_TIM_Base_Init+0xa0>
    return HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
}
 8003d86:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003d88:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d90:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003d9e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003da2:	6291      	str	r1, [r2, #40]	; 0x28
 8003da4:	e7cc      	b.n	8003d40 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	6926      	ldr	r6, [r4, #16]
 8003da8:	e7f3      	b.n	8003d92 <HAL_TIM_Base_Init+0xf2>
 8003daa:	bf00      	nop
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40013400 	.word	0x40013400
 8003db4:	40014000 	.word	0x40014000

08003db8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dbc:	68d9      	ldr	r1, [r3, #12]
 8003dbe:	f041 0101 	orr.w	r1, r1, #1
 8003dc2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc4:	6899      	ldr	r1, [r3, #8]
 8003dc6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	2a06      	cmp	r2, #6
 8003dca:	d006      	beq.n	8003dda <HAL_TIM_Base_Start_IT+0x22>
 8003dcc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	2000      	movs	r0, #0
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	00010007 	.word	0x00010007

08003de4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <HAL_TIM_IC_CaptureCallback>:
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <HAL_TIM_PWM_PulseFinishedCallback>:
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <HAL_TIM_TriggerCallback>:
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df4:	6803      	ldr	r3, [r0, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	0791      	lsls	r1, r2, #30
{
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfe:	d502      	bpl.n	8003e06 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	0792      	lsls	r2, r2, #30
 8003e04:	d468      	bmi.n	8003ed8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	0752      	lsls	r2, r2, #29
 8003e0a:	d502      	bpl.n	8003e12 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	0750      	lsls	r0, r2, #29
 8003e10:	d44f      	bmi.n	8003eb2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	0711      	lsls	r1, r2, #28
 8003e16:	d502      	bpl.n	8003e1e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	0712      	lsls	r2, r2, #28
 8003e1c:	d437      	bmi.n	8003e8e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	06d0      	lsls	r0, r2, #27
 8003e22:	d502      	bpl.n	8003e2a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	06d1      	lsls	r1, r2, #27
 8003e28:	d41e      	bmi.n	8003e68 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	07d2      	lsls	r2, r2, #31
 8003e2e:	d502      	bpl.n	8003e36 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	07d0      	lsls	r0, r2, #31
 8003e34:	d469      	bmi.n	8003f0a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	0611      	lsls	r1, r2, #24
 8003e3a:	d502      	bpl.n	8003e42 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	0612      	lsls	r2, r2, #24
 8003e40:	d46b      	bmi.n	8003f1a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	05d0      	lsls	r0, r2, #23
 8003e46:	d502      	bpl.n	8003e4e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	0611      	lsls	r1, r2, #24
 8003e4c:	d46d      	bmi.n	8003f2a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	0652      	lsls	r2, r2, #25
 8003e52:	d502      	bpl.n	8003e5a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	0650      	lsls	r0, r2, #25
 8003e58:	d46f      	bmi.n	8003f3a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	0691      	lsls	r1, r2, #26
 8003e5e:	d502      	bpl.n	8003e66 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	0692      	lsls	r2, r2, #26
 8003e64:	d449      	bmi.n	8003efa <HAL_TIM_IRQHandler+0x106>
}
 8003e66:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e70:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e72:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e76:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003e78:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e7a:	d16f      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7c:	f7ff ffb2 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff ffb3 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	2200      	movs	r2, #0
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	7722      	strb	r2, [r4, #28]
 8003e8c:	e7cd      	b.n	8003e2a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8e:	f06f 0208 	mvn.w	r2, #8
 8003e92:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e94:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e98:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9e:	d15a      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea0:	f7ff ffa0 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f7ff ffa1 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	2200      	movs	r2, #0
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	7722      	strb	r2, [r4, #28]
 8003eb0:	e7b5      	b.n	8003e1e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb2:	f06f 0204 	mvn.w	r2, #4
 8003eb6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eba:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ebc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec4:	d144      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	f7ff ff8d 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff ff8e 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	7722      	strb	r2, [r4, #28]
 8003ed6:	e79c      	b.n	8003e12 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ed8:	f06f 0202 	mvn.w	r2, #2
 8003edc:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ede:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee2:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee6:	d130      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee8:	f7ff ff7c 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	4620      	mov	r0, r4
 8003eee:	f7ff ff7d 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	7722      	strb	r2, [r4, #28]
 8003ef8:	e785      	b.n	8003e06 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003efe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f00:	611a      	str	r2, [r3, #16]
}
 8003f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003f06:	f000 b87f 	b.w	8004008 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f0a:	f06f 0201 	mvn.w	r2, #1
 8003f0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7fd fd23 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	e78d      	b.n	8003e36 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 f873 	bl	800400c <HAL_TIMEx_BreakCallback>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	e78b      	b.n	8003e42 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 f86d 	bl	8004010 <HAL_TIMEx_Break2Callback>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	e789      	b.n	8003e4e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff ff55 	bl	8003df0 <HAL_TIM_TriggerCallback>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	e787      	b.n	8003e5a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	f7ff ff4d 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003f4e:	e7d0      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f50:	f7ff ff4a 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003f54:	e7bc      	b.n	8003ed0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	f7ff ff47 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003f5a:	e7a6      	b.n	8003eaa <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5c:	f7ff ff44 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e791      	b.n	8003e86 <HAL_TIM_IRQHandler+0x92>
 8003f62:	bf00      	nop

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d047      	beq.n	8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x98>
{
 8003f6c:	b4f0      	push	{r4, r5, r6, r7}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f6e:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f70:	4c23      	ldr	r4, [pc, #140]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f72:	680e      	ldr	r6, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	2202      	movs	r2, #2
 8003f76:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003f7a:	2501      	movs	r5, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f7c:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8003f7e:	685a      	ldr	r2, [r3, #4]
  __HAL_LOCK(htim);
 8003f80:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003f84:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f86:	d027      	beq.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003f88:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003f8c:	42a3      	cmp	r3, r4
 8003f8e:	d02c      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x86>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8003f9a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003f9e:	4a19      	ldr	r2, [pc, #100]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00b      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003fb4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbc:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fbe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003fc6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003fd2:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003fd4:	4618      	mov	r0, r3
}
 8003fd6:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fd8:	684c      	ldr	r4, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fde:	4322      	orrs	r2, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe4:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	e7e8      	b.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fea:	684f      	ldr	r7, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fec:	f422 0470 	bic.w	r4, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ff0:	433c      	orrs	r4, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff6:	4334      	orrs	r4, r6
  htim->Instance->CR2 = tmpcr2;
 8003ff8:	605c      	str	r4, [r3, #4]
 8003ffa:	e7df      	b.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x58>
  __HAL_LOCK(htim);
 8003ffc:	2002      	movs	r0, #2
}
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400

08004008 <HAL_TIMEx_CommutCallback>:
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop

0800400c <HAL_TIMEx_BreakCallback>:
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <HAL_TIMEx_Break2Callback>:
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop

08004014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004018:	460e      	mov	r6, r1
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800401c:	2920      	cmp	r1, #32
{
 800401e:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8004020:	d144      	bne.n	80040ac <HAL_UART_Transmit+0x98>
  {
    if ((pData == NULL) || (Size == 0U))
 8004022:	2e00      	cmp	r6, #0
 8004024:	d046      	beq.n	80040b4 <HAL_UART_Transmit+0xa0>
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	2a00      	cmp	r2, #0
 800402a:	d043      	beq.n	80040b4 <HAL_UART_Transmit+0xa0>
 800402c:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800402e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004032:	2b01      	cmp	r3, #1
 8004034:	4604      	mov	r4, r0
 8004036:	d039      	beq.n	80040ac <HAL_UART_Transmit+0x98>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004038:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800403a:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	2700      	movs	r7, #0
 800403e:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8004040:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004044:	6743      	str	r3, [r0, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004046:	f7fe fbbf 	bl	80027c8 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800404c:	9a01      	ldr	r2, [sp, #4]
 800404e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004056:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8004058:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	f000 808e 	beq.w	800417c <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8004060:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004064:	6820      	ldr	r0, [r4, #0]
    __HAL_UNLOCK(huart);
 8004066:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8004068:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800406a:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800406e:	b1a3      	cbz	r3, 800409a <HAL_UART_Transmit+0x86>
 8004070:	1c6a      	adds	r2, r5, #1
 8004072:	d123      	bne.n	80040bc <HAL_UART_Transmit+0xa8>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	69c2      	ldr	r2, [r0, #28]
 8004076:	0613      	lsls	r3, r2, #24
 8004078:	d5fc      	bpl.n	8004074 <HAL_UART_Transmit+0x60>
      if (pdata8bits == NULL)
 800407a:	2e00      	cmp	r6, #0
 800407c:	d044      	beq.n	8004108 <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004082:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8004084:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004088:	3b01      	subs	r3, #1
 800408a:	b29b      	uxth	r3, r3
 800408c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004090:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ea      	bne.n	8004070 <HAL_UART_Transmit+0x5c>
 800409a:	1c6a      	adds	r2, r5, #1
 800409c:	d139      	bne.n	8004112 <HAL_UART_Transmit+0xfe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409e:	69c3      	ldr	r3, [r0, #28]
 80040a0:	065b      	lsls	r3, r3, #25
 80040a2:	d5fc      	bpl.n	800409e <HAL_UART_Transmit+0x8a>
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	2320      	movs	r3, #32
 80040a6:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80040a8:	2000      	movs	r0, #0
 80040aa:	e000      	b.n	80040ae <HAL_UART_Transmit+0x9a>
    return HAL_BUSY;
 80040ac:	2002      	movs	r0, #2
}
 80040ae:	b003      	add	sp, #12
 80040b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80040b4:	2001      	movs	r0, #1
}
 80040b6:	b003      	add	sp, #12
 80040b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040bc:	69c3      	ldr	r3, [r0, #28]
 80040be:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 80040c2:	d1da      	bne.n	800407a <HAL_UART_Transmit+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c4:	f7fe fb80 	bl	80027c8 <HAL_GetTick>
 80040c8:	eba0 0008 	sub.w	r0, r0, r8
 80040cc:	4285      	cmp	r5, r0
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	d344      	bcc.n	800415c <HAL_UART_Transmit+0x148>
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	d042      	beq.n	800415c <HAL_UART_Transmit+0x148>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d6:	6803      	ldr	r3, [r0, #0]
 80040d8:	075b      	lsls	r3, r3, #29
 80040da:	d5c9      	bpl.n	8004070 <HAL_UART_Transmit+0x5c>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040dc:	69c3      	ldr	r3, [r0, #28]
 80040de:	0519      	lsls	r1, r3, #20
 80040e0:	d5c6      	bpl.n	8004070 <HAL_UART_Transmit+0x5c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e6:	6203      	str	r3, [r0, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040e8:	6803      	ldr	r3, [r0, #0]
 80040ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ee:	6003      	str	r3, [r0, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	6882      	ldr	r2, [r0, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040f2:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80040fa:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_TIMEOUT;
 80040fc:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80040fe:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004100:	f884 9070 	strb.w	r9, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004104:	67e3      	str	r3, [r4, #124]	; 0x7c
 8004106:	e7d2      	b.n	80040ae <HAL_UART_Transmit+0x9a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004108:	f837 3b02 	ldrh.w	r3, [r7], #2
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	e7b7      	b.n	8004082 <HAL_UART_Transmit+0x6e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004112:	69c6      	ldr	r6, [r0, #28]
 8004114:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8004118:	d1c4      	bne.n	80040a4 <HAL_UART_Transmit+0x90>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe fb55 	bl	80027c8 <HAL_GetTick>
 800411e:	eba0 0008 	sub.w	r0, r0, r8
 8004122:	4285      	cmp	r5, r0
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	d319      	bcc.n	800415c <HAL_UART_Transmit+0x148>
 8004128:	b1c5      	cbz	r5, 800415c <HAL_UART_Transmit+0x148>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800412a:	6803      	ldr	r3, [r0, #0]
 800412c:	075f      	lsls	r7, r3, #29
 800412e:	d5b4      	bpl.n	800409a <HAL_UART_Transmit+0x86>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004130:	69c3      	ldr	r3, [r0, #28]
 8004132:	0519      	lsls	r1, r3, #20
 8004134:	d5b1      	bpl.n	800409a <HAL_UART_Transmit+0x86>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800413a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	6803      	ldr	r3, [r0, #0]
 800413e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004142:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	6882      	ldr	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004146:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800414e:	6763      	str	r3, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8004150:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8004152:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8004154:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004158:	67e3      	str	r3, [r4, #124]	; 0x7c
 800415a:	e7a8      	b.n	80040ae <HAL_UART_Transmit+0x9a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415c:	6803      	ldr	r3, [r0, #0]
 800415e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004162:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	6883      	ldr	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004166:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 800416c:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004170:	6762      	str	r2, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8004172:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8004174:	f884 1070 	strb.w	r1, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8004178:	67a2      	str	r2, [r4, #120]	; 0x78
 800417a:	e798      	b.n	80040ae <HAL_UART_Transmit+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417c:	6923      	ldr	r3, [r4, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f47f af6e 	bne.w	8004060 <HAL_UART_Transmit+0x4c>
 8004184:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8004186:	461e      	mov	r6, r3
 8004188:	e76a      	b.n	8004060 <HAL_UART_Transmit+0x4c>
 800418a:	bf00      	nop

0800418c <HAL_UART_Receive_DMA>:
{
 800418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004190:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8004192:	2e20      	cmp	r6, #32
 8004194:	d13b      	bne.n	800420e <HAL_UART_Receive_DMA+0x82>
    if ((pData == NULL) || (Size == 0U))
 8004196:	2900      	cmp	r1, #0
 8004198:	d03c      	beq.n	8004214 <HAL_UART_Receive_DMA+0x88>
 800419a:	2a00      	cmp	r2, #0
 800419c:	d03a      	beq.n	8004214 <HAL_UART_Receive_DMA+0x88>
    __HAL_LOCK(huart);
 800419e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d033      	beq.n	800420e <HAL_UART_Receive_DMA+0x82>
 80041a6:	4605      	mov	r5, r0
    if (huart->hdmarx != NULL)
 80041a8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80041aa:	682f      	ldr	r7, [r5, #0]
    huart->pRxBuffPtr = pData;
 80041ac:	6569      	str	r1, [r5, #84]	; 0x54
 80041ae:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 80041b4:	2401      	movs	r4, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
    huart->RxXferSize = Size;
 80041bc:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
    __HAL_LOCK(huart);
 80041c0:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041c4:	67aa      	str	r2, [r5, #120]	; 0x78
    if (huart->hdmarx != NULL)
 80041c6:	b188      	cbz	r0, 80041ec <HAL_UART_Receive_DMA+0x60>
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041c8:	f8df c060 	ldr.w	ip, [pc, #96]	; 800422c <HAL_UART_Receive_DMA+0xa0>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041cc:	f8df e060 	ldr.w	lr, [pc, #96]	; 8004230 <HAL_UART_Receive_DMA+0xa4>
      huart->hdmarx->XferAbortCallback = NULL;
 80041d0:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80041d4:	460a      	mov	r2, r1
 80041d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041da:	4f13      	ldr	r7, [pc, #76]	; (8004228 <HAL_UART_Receive_DMA+0x9c>)
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041dc:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041e0:	e9c0 c70c 	strd	ip, r7, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80041e4:	f7fe fbb8 	bl	8002958 <HAL_DMA_Start_IT>
 80041e8:	b9b8      	cbnz	r0, 800421a <HAL_UART_Receive_DMA+0x8e>
 80041ea:	682f      	ldr	r7, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ec:	683b      	ldr	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 80041ee:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 80041f4:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f8:	603b      	str	r3, [r7, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004208:	60bb      	str	r3, [r7, #8]
}
 800420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800420e:	2002      	movs	r0, #2
}
 8004210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8004214:	2001      	movs	r0, #1
}
 8004216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800421a:	2310      	movs	r3, #16
 800421c:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800421e:	f885 8070 	strb.w	r8, [r5, #112]	; 0x70
        return HAL_ERROR;
 8004222:	4620      	mov	r0, r4
        huart->gState = HAL_UART_STATE_READY;
 8004224:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 8004226:	e7f3      	b.n	8004210 <HAL_UART_Receive_DMA+0x84>
 8004228:	0800427d 	.word	0x0800427d
 800422c:	0800426d 	.word	0x0800426d
 8004230:	08004235 	.word	0x08004235

08004234 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004234:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004236:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004238:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f013 0320 	ands.w	r3, r3, #32
 8004240:	d110      	bne.n	8004264 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8004244:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004248:	6813      	ldr	r3, [r2, #0]
 800424a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424e:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	6893      	ldr	r3, [r2, #8]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	6093      	str	r3, [r2, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004258:	6893      	ldr	r3, [r2, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800425a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004262:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004264:	f7fd f9ee 	bl	8001644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004268:	bd08      	pop	{r3, pc}
 800426a:	bf00      	nop

0800426c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800426c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800426e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004270:	f7fd f9d2 	bl	8001618 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004274:	bd08      	pop	{r3, pc}
 8004276:	bf00      	nop

08004278 <HAL_UART_ErrorCallback>:
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop

0800427c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800427c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800427e:	6803      	ldr	r3, [r0, #0]
{
 8004280:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004282:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004284:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	0612      	lsls	r2, r2, #24
 800428a:	d501      	bpl.n	8004290 <UART_DMAError+0x14>
 800428c:	2c21      	cmp	r4, #33	; 0x21
 800428e:	d01a      	beq.n	80042c6 <UART_DMAError+0x4a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	0652      	lsls	r2, r2, #25
 8004294:	d501      	bpl.n	800429a <UART_DMAError+0x1e>
 8004296:	2922      	cmp	r1, #34	; 0x22
 8004298:	d006      	beq.n	80042a8 <UART_DMAError+0x2c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800429a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800429c:	f043 0310 	orr.w	r3, r3, #16
 80042a0:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a2:	f7ff ffe9 	bl	8004278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a6:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 80042a8:	2100      	movs	r1, #0
 80042aa:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 80042c0:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 80042c2:	6784      	str	r4, [r0, #120]	; 0x78
 80042c4:	e7e9      	b.n	800429a <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042cc:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80042d4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80042d6:	6744      	str	r4, [r0, #116]	; 0x74
 80042d8:	e7da      	b.n	8004290 <UART_DMAError+0x14>
 80042da:	bf00      	nop

080042dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042de:	07da      	lsls	r2, r3, #31
{
 80042e0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e2:	d506      	bpl.n	80042f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e4:	6801      	ldr	r1, [r0, #0]
 80042e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80042e8:	684a      	ldr	r2, [r1, #4]
 80042ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80042ee:	4322      	orrs	r2, r4
 80042f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f2:	079c      	lsls	r4, r3, #30
 80042f4:	d506      	bpl.n	8004304 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f6:	6801      	ldr	r1, [r0, #0]
 80042f8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80042fa:	684a      	ldr	r2, [r1, #4]
 80042fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004300:	4322      	orrs	r2, r4
 8004302:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004304:	0759      	lsls	r1, r3, #29
 8004306:	d506      	bpl.n	8004316 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004308:	6801      	ldr	r1, [r0, #0]
 800430a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800430c:	684a      	ldr	r2, [r1, #4]
 800430e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004312:	4322      	orrs	r2, r4
 8004314:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004316:	071a      	lsls	r2, r3, #28
 8004318:	d506      	bpl.n	8004328 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800431a:	6801      	ldr	r1, [r0, #0]
 800431c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800431e:	684a      	ldr	r2, [r1, #4]
 8004320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004324:	4322      	orrs	r2, r4
 8004326:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004328:	06dc      	lsls	r4, r3, #27
 800432a:	d506      	bpl.n	800433a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800432c:	6801      	ldr	r1, [r0, #0]
 800432e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004330:	688a      	ldr	r2, [r1, #8]
 8004332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004336:	4322      	orrs	r2, r4
 8004338:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433a:	0699      	lsls	r1, r3, #26
 800433c:	d506      	bpl.n	800434c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800433e:	6801      	ldr	r1, [r0, #0]
 8004340:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004342:	688a      	ldr	r2, [r1, #8]
 8004344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004348:	4322      	orrs	r2, r4
 800434a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	065a      	lsls	r2, r3, #25
 800434e:	d509      	bpl.n	8004364 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004350:	6801      	ldr	r1, [r0, #0]
 8004352:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004354:	684a      	ldr	r2, [r1, #4]
 8004356:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800435a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800435c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004360:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	d00b      	beq.n	800437c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	d506      	bpl.n	8004376 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004368:	6802      	ldr	r2, [r0, #0]
 800436a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800436c:	6853      	ldr	r3, [r2, #4]
 800436e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004372:	430b      	orrs	r3, r1
 8004374:	6053      	str	r3, [r2, #4]
}
 8004376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800437c:	684a      	ldr	r2, [r1, #4]
 800437e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004380:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004384:	4322      	orrs	r2, r4
 8004386:	604a      	str	r2, [r1, #4]
 8004388:	e7ec      	b.n	8004364 <UART_AdvFeatureConfig+0x88>
 800438a:	bf00      	nop

0800438c <HAL_UART_Init>:
  if (huart == NULL)
 800438c:	2800      	cmp	r0, #0
 800438e:	f000 81a7 	beq.w	80046e0 <HAL_UART_Init+0x354>
{
 8004392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004394:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004396:	4604      	mov	r4, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04c      	beq.n	8004436 <HAL_UART_Init+0xaa>
  __HAL_UART_DISABLE(huart);
 800439c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439e:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a0:	49b2      	ldr	r1, [pc, #712]	; (800466c <HAL_UART_Init+0x2e0>)
  huart->gState = HAL_UART_STATE_BUSY;
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80043a6:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a8:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80043aa:	f020 0001 	bic.w	r0, r0, #1
 80043ae:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b0:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b4:	4332      	orrs	r2, r6
 80043b6:	4302      	orrs	r2, r0
 80043b8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ba:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043bc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043be:	430a      	orrs	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043c6:	49aa      	ldr	r1, [pc, #680]	; (8004670 <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80043cc:	432a      	orrs	r2, r5
 80043ce:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043d0:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043d2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043d4:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043d6:	d033      	beq.n	8004440 <HAL_UART_Init+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 80043d8:	6a26      	ldr	r6, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043da:	4da6      	ldr	r5, [pc, #664]	; (8004674 <HAL_UART_Init+0x2e8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043dc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80043e0:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043e2:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e4:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043e6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e8:	d044      	beq.n	8004474 <HAL_UART_Init+0xe8>
 80043ea:	4aa3      	ldr	r2, [pc, #652]	; (8004678 <HAL_UART_Init+0x2ec>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d05a      	beq.n	80044a6 <HAL_UART_Init+0x11a>
 80043f0:	4aa2      	ldr	r2, [pc, #648]	; (800467c <HAL_UART_Init+0x2f0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	f000 812d 	beq.w	8004652 <HAL_UART_Init+0x2c6>
 80043f8:	4aa1      	ldr	r2, [pc, #644]	; (8004680 <HAL_UART_Init+0x2f4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	f000 80eb 	beq.w	80045d6 <HAL_UART_Init+0x24a>
 8004400:	4aa0      	ldr	r2, [pc, #640]	; (8004684 <HAL_UART_Init+0x2f8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d112      	bne.n	800442c <HAL_UART_Init+0xa0>
 8004406:	4ba0      	ldr	r3, [pc, #640]	; (8004688 <HAL_UART_Init+0x2fc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004414:	f000 80cc 	beq.w	80045b0 <HAL_UART_Init+0x224>
 8004418:	f240 80f6 	bls.w	8004608 <HAL_UART_Init+0x27c>
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	f000 8191 	beq.w	8004746 <HAL_UART_Init+0x3ba>
 8004424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004428:	f000 80e3 	beq.w	80045f2 <HAL_UART_Init+0x266>
  huart->RxISR = NULL;
 800442c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800442e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 8004432:	2001      	movs	r0, #1
}
 8004434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004436:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800443a:	f7fe f905 	bl	8002648 <HAL_UART_MspInit>
 800443e:	e7ad      	b.n	800439c <HAL_UART_Init+0x10>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004440:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004444:	4890      	ldr	r0, [pc, #576]	; (8004688 <HAL_UART_Init+0x2fc>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444a:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800444e:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8004452:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004456:	f000 816f 	beq.w	8004738 <HAL_UART_Init+0x3ac>
 800445a:	f240 8143 	bls.w	80046e4 <HAL_UART_Init+0x358>
 800445e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004462:	f000 81b8 	beq.w	80047d6 <HAL_UART_Init+0x44a>
 8004466:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800446a:	d1df      	bne.n	800442c <HAL_UART_Init+0xa0>
 800446c:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800446e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004472:	e13e      	b.n	80046f2 <HAL_UART_Init+0x366>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004474:	4b84      	ldr	r3, [pc, #528]	; (8004688 <HAL_UART_Init+0x2fc>)
 8004476:	4a85      	ldr	r2, [pc, #532]	; (800468c <HAL_UART_Init+0x300>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004482:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004486:	f000 8105 	beq.w	8004694 <HAL_UART_Init+0x308>
    switch (clocksource)
 800448a:	2b08      	cmp	r3, #8
 800448c:	f200 81a9 	bhi.w	80047e2 <HAL_UART_Init+0x456>
 8004490:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004494:	0011009e 	.word	0x0011009e
 8004498:	01a70083 	.word	0x01a70083
 800449c:	01a70092 	.word	0x01a70092
 80044a0:	01a701a7 	.word	0x01a701a7
 80044a4:	0095      	.short	0x0095
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a6:	4b78      	ldr	r3, [pc, #480]	; (8004688 <HAL_UART_Init+0x2fc>)
 80044a8:	4a79      	ldr	r2, [pc, #484]	; (8004690 <HAL_UART_Init+0x304>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	5cd3      	ldrb	r3, [r2, r3]
 80044b4:	e7e5      	b.n	8004482 <HAL_UART_Init+0xf6>
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b6:	f7ff f8a3 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ba:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 80044bc:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044be:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 80044c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044c6:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c8:	f1a3 0010 	sub.w	r0, r3, #16
 80044cc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80044d0:	4288      	cmp	r0, r1
 80044d2:	d8ab      	bhi.n	800442c <HAL_UART_Init+0xa0>
      huart->Instance->BRR = usartdiv;
 80044d4:	6820      	ldr	r0, [r4, #0]
  huart->RxISR = NULL;
 80044d6:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 80044d8:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 80044da:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d1a7      	bne.n	8004432 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 80b0 	bne.w	800464a <HAL_UART_Init+0x2be>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80044fc:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fe:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004508:	f7fe f95e 	bl	80027c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004512:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004514:	d409      	bmi.n	800452a <HAL_UART_Init+0x19e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	0750      	lsls	r0, r2, #29
 800451a:	d42b      	bmi.n	8004574 <HAL_UART_Init+0x1e8>
  huart->gState = HAL_UART_STATE_READY;
 800451c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800451e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004520:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8004522:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452a:	69dd      	ldr	r5, [r3, #28]
 800452c:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004530:	d1f1      	bne.n	8004516 <HAL_UART_Init+0x18a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe f949 	bl	80027c8 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004536:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	1b80      	subs	r0, r0, r6
 800453a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004540:	f080 80c0 	bcs.w	80046c4 <HAL_UART_Init+0x338>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004544:	0752      	lsls	r2, r2, #29
 8004546:	d5f0      	bpl.n	800452a <HAL_UART_Init+0x19e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	0517      	lsls	r7, r2, #20
 800454c:	d5ed      	bpl.n	800452a <HAL_UART_Init+0x19e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004552:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800455a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800455e:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	f021 0101 	bic.w	r1, r1, #1
 8004564:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 8004566:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8004568:	6762      	str	r2, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800456a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800456e:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004570:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8004572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004574:	69dd      	ldr	r5, [r3, #28]
 8004576:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800457a:	d1cf      	bne.n	800451c <HAL_UART_Init+0x190>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	f7fe f924 	bl	80027c8 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004580:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004582:	1b80      	subs	r0, r0, r6
 8004584:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004588:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f080 809b 	bcs.w	80046c4 <HAL_UART_Init+0x338>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800458e:	0751      	lsls	r1, r2, #29
 8004590:	d5f0      	bpl.n	8004574 <HAL_UART_Init+0x1e8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	0512      	lsls	r2, r2, #20
 8004596:	d5ed      	bpl.n	8004574 <HAL_UART_Init+0x1e8>
 8004598:	e7d9      	b.n	800454e <HAL_UART_Init+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800459a:	6861      	ldr	r1, [r4, #4]
 800459c:	084b      	lsrs	r3, r1, #1
 800459e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80045a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a6:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80045a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	e78b      	b.n	80044c8 <HAL_UART_Init+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045b4:	f000 80d5 	beq.w	8004762 <HAL_UART_Init+0x3d6>
        pclk = HAL_RCC_GetSysClockFreq();
 80045b8:	f7fe fbae 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 80045bc:	e77d      	b.n	80044ba <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045be:	6861      	ldr	r1, [r4, #4]
 80045c0:	084b      	lsrs	r3, r1, #1
 80045c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c6:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	e77b      	b.n	80044c8 <HAL_UART_Init+0x13c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7ff f804 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 80045d4:	e771      	b.n	80044ba <HAL_UART_Init+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d6:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <HAL_UART_Init+0x2fc>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d0e5      	beq.n	80045b0 <HAL_UART_Init+0x224>
 80045e4:	d910      	bls.n	8004608 <HAL_UART_Init+0x27c>
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	f000 80ad 	beq.w	8004746 <HAL_UART_Init+0x3ba>
 80045ec:	2bc0      	cmp	r3, #192	; 0xc0
 80045ee:	f47f af1d 	bne.w	800442c <HAL_UART_Init+0xa0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045f6:	d1e2      	bne.n	80045be <HAL_UART_Init+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80045f8:	6862      	ldr	r2, [r4, #4]
 80045fa:	0853      	lsrs	r3, r2, #1
 80045fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004600:	fbb3 f3f2 	udiv	r3, r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	e00e      	b.n	8004626 <HAL_UART_Init+0x29a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f af0f 	bne.w	800442c <HAL_UART_Init+0xa0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004612:	d1dd      	bne.n	80045d0 <HAL_UART_Init+0x244>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7fe ffe2 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004618:	6862      	ldr	r2, [r4, #4]
 800461a:	0853      	lsrs	r3, r2, #1
 800461c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004620:	fbb3 f3f2 	udiv	r3, r3, r2
 8004624:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004626:	f1a3 0110 	sub.w	r1, r3, #16
 800462a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800462e:	4291      	cmp	r1, r2
 8004630:	f63f aefc 	bhi.w	800442c <HAL_UART_Init+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004634:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8004638:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800463e:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 8004640:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 8004642:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 8004644:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
 8004648:	e74b      	b.n	80044e2 <HAL_UART_Init+0x156>
    UART_AdvFeatureConfig(huart);
 800464a:	4620      	mov	r0, r4
 800464c:	f7ff fe46 	bl	80042dc <UART_AdvFeatureConfig>
 8004650:	e74b      	b.n	80044ea <HAL_UART_Init+0x15e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_UART_Init+0x2fc>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800465c:	2b10      	cmp	r3, #16
 800465e:	d0a7      	beq.n	80045b0 <HAL_UART_Init+0x224>
 8004660:	d9d2      	bls.n	8004608 <HAL_UART_Init+0x27c>
 8004662:	2b20      	cmp	r3, #32
 8004664:	d06f      	beq.n	8004746 <HAL_UART_Init+0x3ba>
 8004666:	2b30      	cmp	r3, #48	; 0x30
 8004668:	d0c3      	beq.n	80045f2 <HAL_UART_Init+0x266>
 800466a:	e6df      	b.n	800442c <HAL_UART_Init+0xa0>
 800466c:	efff69f3 	.word	0xefff69f3
 8004670:	40008000 	.word	0x40008000
 8004674:	40013800 	.word	0x40013800
 8004678:	40004400 	.word	0x40004400
 800467c:	40004800 	.word	0x40004800
 8004680:	40004c00 	.word	0x40004c00
 8004684:	40005000 	.word	0x40005000
 8004688:	40021000 	.word	0x40021000
 800468c:	0800b0ec 	.word	0x0800b0ec
 8004690:	0800b0f0 	.word	0x0800b0f0
    switch (clocksource)
 8004694:	2b08      	cmp	r3, #8
 8004696:	f63f aec9 	bhi.w	800442c <HAL_UART_Init+0xa0>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <HAL_UART_Init+0x314>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	08004615 	.word	0x08004615
 80046a4:	08004741 	.word	0x08004741
 80046a8:	0800474f 	.word	0x0800474f
 80046ac:	0800442d 	.word	0x0800442d
 80046b0:	08004763 	.word	0x08004763
 80046b4:	0800442d 	.word	0x0800442d
 80046b8:	0800442d 	.word	0x0800442d
 80046bc:	0800442d 	.word	0x0800442d
 80046c0:	080045f9 	.word	0x080045f9
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80046cc:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80046d4:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80046d6:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80046d8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80046dc:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80046de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80046e0:	2001      	movs	r0, #1
}
 80046e2:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	f47f aea1 	bne.w	800442c <HAL_UART_Init+0xa0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80046ea:	f7fe ff77 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d074      	beq.n	80047dc <HAL_UART_Init+0x450>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80046f8:	4283      	cmp	r3, r0
 80046fa:	f63f ae97 	bhi.w	800442c <HAL_UART_Init+0xa0>
 80046fe:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004702:	f63f ae93 	bhi.w	800442c <HAL_UART_Init+0xa0>
        switch (clocksource)
 8004706:	2d08      	cmp	r5, #8
 8004708:	f63f ae90 	bhi.w	800442c <HAL_UART_Init+0xa0>
 800470c:	a301      	add	r3, pc, #4	; (adr r3, 8004714 <HAL_UART_Init+0x388>)
 800470e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8004712:	bf00      	nop
 8004714:	080047d1 	.word	0x080047d1
 8004718:	0800442d 	.word	0x0800442d
 800471c:	080047b7 	.word	0x080047b7
 8004720:	0800442d 	.word	0x0800442d
 8004724:	08004795 	.word	0x08004795
 8004728:	0800442d 	.word	0x0800442d
 800472c:	0800442d 	.word	0x0800442d
 8004730:	0800442d 	.word	0x0800442d
 8004734:	08004769 	.word	0x08004769
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004738:	f7fe faee 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 800473c:	2504      	movs	r5, #4
 800473e:	e7d6      	b.n	80046ee <HAL_UART_Init+0x362>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe ff5e 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8004744:	e768      	b.n	8004618 <HAL_UART_Init+0x28c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800474a:	f47f af26 	bne.w	800459a <HAL_UART_Init+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800474e:	6862      	ldr	r2, [r4, #4]
 8004750:	0853      	lsrs	r3, r2, #1
 8004752:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004756:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800475a:	fbb3 f3f2 	udiv	r3, r3, r2
 800475e:	b29b      	uxth	r3, r3
 8004760:	e761      	b.n	8004626 <HAL_UART_Init+0x29a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004762:	f7fe fad9 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004766:	e757      	b.n	8004618 <HAL_UART_Init+0x28c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004768:	0850      	lsrs	r0, r2, #1
 800476a:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800476e:	f04f 0600 	mov.w	r6, #0
 8004772:	f146 0100 	adc.w	r1, r6, #0
 8004776:	2300      	movs	r3, #0
 8004778:	f7fc fa86 	bl	8000c88 <__aeabi_uldivmod>
 800477c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_UART_Init+0x45c>)
 8004782:	429a      	cmp	r2, r3
 8004784:	f63f ae52 	bhi.w	800442c <HAL_UART_Init+0xa0>
          huart->Instance->BRR = usartdiv;
 8004788:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 800478a:	2300      	movs	r3, #0
          huart->Instance->BRR = usartdiv;
 800478c:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800478e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8004792:	e6a6      	b.n	80044e2 <HAL_UART_Init+0x156>
            pclk = HAL_RCC_GetSysClockFreq();
 8004794:	f7fe fac0 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800479e:	0856      	lsrs	r6, r2, #1
 80047a0:	2700      	movs	r7, #0
 80047a2:	fbe3 6700 	umlal	r6, r7, r3, r0
 80047a6:	4630      	mov	r0, r6
 80047a8:	4639      	mov	r1, r7
 80047aa:	2300      	movs	r3, #0
 80047ac:	f7fc fa6c 	bl	8000c88 <__aeabi_uldivmod>
 80047b0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80047b4:	e7e4      	b.n	8004780 <HAL_UART_Init+0x3f4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80047b6:	4d0d      	ldr	r5, [pc, #52]	; (80047ec <HAL_UART_Init+0x460>)
 80047b8:	0853      	lsrs	r3, r2, #1
 80047ba:	18e8      	adds	r0, r5, r3
 80047bc:	f04f 0600 	mov.w	r6, #0
 80047c0:	f146 0100 	adc.w	r1, r6, #0
 80047c4:	2300      	movs	r3, #0
 80047c6:	f7fc fa5f 	bl	8000c88 <__aeabi_uldivmod>
 80047ca:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80047ce:	e7d7      	b.n	8004780 <HAL_UART_Init+0x3f4>
            pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7fe ff04 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 80047d4:	e7e0      	b.n	8004798 <HAL_UART_Init+0x40c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d6:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80047d8:	4805      	ldr	r0, [pc, #20]	; (80047f0 <HAL_UART_Init+0x464>)
 80047da:	e78a      	b.n	80046f2 <HAL_UART_Init+0x366>
  huart->TxISR = NULL;
 80047dc:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 80047e0:	e67f      	b.n	80044e2 <HAL_UART_Init+0x156>
        ret = HAL_ERROR;
 80047e2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e66f      	b.n	80044c8 <HAL_UART_Init+0x13c>
 80047e8:	000ffcff 	.word	0x000ffcff
 80047ec:	f4240000 	.word	0xf4240000
 80047f0:	00f42400 	.word	0x00f42400

080047f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047f4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80047f6:	f001 f903 	bl	8005a00 <vTaskStartScheduler>
  
  return osOK;
}
 80047fa:	2000      	movs	r0, #0
 80047fc:	bd08      	pop	{r3, pc}
 80047fe:	bf00      	nop

08004800 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004800:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004802:	6945      	ldr	r5, [r0, #20]
 8004804:	6902      	ldr	r2, [r0, #16]
 8004806:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800480a:	460b      	mov	r3, r1
 800480c:	b086      	sub	sp, #24
 800480e:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004812:	b16d      	cbz	r5, 8004830 <osThreadCreate+0x30>
 8004814:	6980      	ldr	r0, [r0, #24]
 8004816:	b158      	cbz	r0, 8004830 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 8004818:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800481a:	bf14      	ite	ne
 800481c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800481e:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004820:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004824:	9400      	str	r4, [sp, #0]
 8004826:	4630      	mov	r0, r6
 8004828:	f001 f806 	bl	8005838 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800482c:	b006      	add	sp, #24
 800482e:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8004830:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004832:	bf14      	ite	ne
 8004834:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004836:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004838:	ad05      	add	r5, sp, #20
 800483a:	b292      	uxth	r2, r2
 800483c:	9400      	str	r4, [sp, #0]
 800483e:	4630      	mov	r0, r6
 8004840:	9501      	str	r5, [sp, #4]
 8004842:	f001 f831 	bl	80058a8 <xTaskCreate>
 8004846:	2801      	cmp	r0, #1
 8004848:	bf0c      	ite	eq
 800484a:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 800484c:	2000      	movne	r0, #0
}
 800484e:	b006      	add	sp, #24
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	bf00      	nop

08004854 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004854:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004856:	2800      	cmp	r0, #0
 8004858:	bf08      	it	eq
 800485a:	2001      	moveq	r0, #1
 800485c:	f001 fa84 	bl	8005d68 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004860:	2000      	movs	r0, #0
 8004862:	bd08      	pop	{r3, pc}

08004864 <xEventGroupSetBits.part.1>:

	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 8004864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	460d      	mov	r5, r1
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
 800486c:	f001 f938 	bl	8005ae0 <vTaskSuspendAll>
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004870:	6823      	ldr	r3, [r4, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004872:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004874:	432b      	orrs	r3, r5
 8004876:	6023      	str	r3, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004878:	f104 070c 	add.w	r7, r4, #12
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800487c:	2500      	movs	r5, #0

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800487e:	4287      	cmp	r7, r0
 8004880:	6821      	ldr	r1, [r4, #0]
 8004882:	d015      	beq.n	80048b0 <xEventGroupSetBits.part.1+0x4c>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004884:	e9d0 2800 	ldrd	r2, r8, [r0]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004888:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800488c:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8004890:	ea03 0601 	and.w	r6, r3, r1
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004894:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004898:	d101      	bne.n	800489e <xEventGroupSetBits.part.1+0x3a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800489a:	b916      	cbnz	r6, 80048a2 <xEventGroupSetBits.part.1+0x3e>
 800489c:	e006      	b.n	80048ac <xEventGroupSetBits.part.1+0x48>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800489e:	42b3      	cmp	r3, r6
 80048a0:	d104      	bne.n	80048ac <xEventGroupSetBits.part.1+0x48>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80048a2:	01d2      	lsls	r2, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 80048a4:	bf48      	it	mi
 80048a6:	431d      	orrmi	r5, r3
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80048a8:	f001 fbde 	bl	8006068 <vTaskRemoveFromUnorderedEventList>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 80048ac:	4640      	mov	r0, r8
 80048ae:	e7e6      	b.n	800487e <xEventGroupSetBits.part.1+0x1a>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80048b0:	ea21 0105 	bic.w	r1, r1, r5
 80048b4:	6021      	str	r1, [r4, #0]
	}
	( void ) xTaskResumeAll();
 80048b6:	f001 f9cd 	bl	8005c54 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048c0 <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
 80048c0:	b178      	cbz	r0, 80048e2 <xEventGroupCreateStatic+0x22>
	{
 80048c2:	b510      	push	{r4, lr}
 80048c4:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80048c6:	231c      	movs	r3, #28
 80048c8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80048ca:	9b01      	ldr	r3, [sp, #4]
 80048cc:	2b1c      	cmp	r3, #28
 80048ce:	d011      	beq.n	80048f4 <xEventGroupCreateStatic+0x34>
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	e7fe      	b.n	80048e0 <xEventGroupCreateStatic+0x20>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	e7fe      	b.n	80048f2 <xEventGroupCreateStatic+0x32>
			pxEventBits->uxEventBits = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	4604      	mov	r4, r0
 80048f8:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048fc:	f000 f8a4 	bl	8004a48 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004900:	2301      	movs	r3, #1
	}
 8004902:	4620      	mov	r0, r4
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004904:	7623      	strb	r3, [r4, #24]
	}
 8004906:	b002      	add	sp, #8
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop

0800490c <xEventGroupWaitBits>:
{
 800490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004910:	f8dd 9020 	ldr.w	r9, [sp, #32]
	configASSERT( xEventGroup );
 8004914:	b1a8      	cbz	r0, 8004942 <xEventGroupWaitBits+0x36>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004916:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 800491a:	d008      	beq.n	800492e <xEventGroupWaitBits+0x22>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	e7fe      	b.n	800492c <xEventGroupWaitBits+0x20>
	configASSERT( uxBitsToWaitFor != 0 );
 800492e:	b989      	cbnz	r1, 8004954 <xEventGroupWaitBits+0x48>
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	e7fe      	b.n	8004940 <xEventGroupWaitBits+0x34>
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	e7fe      	b.n	8004952 <xEventGroupWaitBits+0x46>
 8004954:	4606      	mov	r6, r0
 8004956:	4698      	mov	r8, r3
 8004958:	4617      	mov	r7, r2
 800495a:	460c      	mov	r4, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800495c:	f001 fc22 	bl	80061a4 <xTaskGetSchedulerState>
 8004960:	b958      	cbnz	r0, 800497a <xEventGroupWaitBits+0x6e>
 8004962:	f1b9 0f00 	cmp.w	r9, #0
 8004966:	d008      	beq.n	800497a <xEventGroupWaitBits+0x6e>
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	e7fe      	b.n	8004978 <xEventGroupWaitBits+0x6c>
	vTaskSuspendAll();
 800497a:	f001 f8b1 	bl	8005ae0 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800497e:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8004980:	f1b8 0f00 	cmp.w	r8, #0
 8004984:	d10a      	bne.n	800499c <xEventGroupWaitBits+0x90>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004986:	422c      	tst	r4, r5
 8004988:	d00b      	beq.n	80049a2 <xEventGroupWaitBits+0x96>
			if( xClearOnExit != pdFALSE )
 800498a:	b117      	cbz	r7, 8004992 <xEventGroupWaitBits+0x86>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800498c:	ea25 0404 	bic.w	r4, r5, r4
 8004990:	6034      	str	r4, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 8004992:	f001 f95f 	bl	8005c54 <xTaskResumeAll>
}
 8004996:	4628      	mov	r0, r5
 8004998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800499c:	ea34 0305 	bics.w	r3, r4, r5
 80049a0:	d0f3      	beq.n	800498a <xEventGroupWaitBits+0x7e>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80049a2:	f1b9 0f00 	cmp.w	r9, #0
 80049a6:	d0f4      	beq.n	8004992 <xEventGroupWaitBits+0x86>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80049a8:	2f00      	cmp	r7, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2100      	moveq	r1, #0
 80049ae:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 80049b2:	f1b8 0f00 	cmp.w	r8, #0
 80049b6:	d001      	beq.n	80049bc <xEventGroupWaitBits+0xb0>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80049b8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80049bc:	464a      	mov	r2, r9
 80049be:	4321      	orrs	r1, r4
 80049c0:	1d30      	adds	r0, r6, #4
 80049c2:	f001 fa83 	bl	8005ecc <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80049c6:	f001 f945 	bl	8005c54 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80049ca:	b938      	cbnz	r0, 80049dc <xEventGroupWaitBits+0xd0>
			portYIELD_WITHIN_API();
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <xEventGroupWaitBits+0x108>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80049dc:	f001 fc4a 	bl	8006274 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80049e0:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
 80049e2:	4605      	mov	r5, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80049e4:	d502      	bpl.n	80049ec <xEventGroupWaitBits+0xe0>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80049e6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
	return uxReturn;
 80049ea:	e7d4      	b.n	8004996 <xEventGroupWaitBits+0x8a>
			taskENTER_CRITICAL();
 80049ec:	f001 feba 	bl	8006764 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80049f0:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 80049f2:	f1b8 0f00 	cmp.w	r8, #0
 80049f6:	d108      	bne.n	8004a0a <xEventGroupWaitBits+0xfe>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80049f8:	422c      	tst	r4, r5
 80049fa:	d003      	beq.n	8004a04 <xEventGroupWaitBits+0xf8>
					if( xClearOnExit != pdFALSE )
 80049fc:	b117      	cbz	r7, 8004a04 <xEventGroupWaitBits+0xf8>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049fe:	ea25 0404 	bic.w	r4, r5, r4
 8004a02:	6034      	str	r4, [r6, #0]
			taskEXIT_CRITICAL();
 8004a04:	f001 fed0 	bl	80067a8 <vPortExitCritical>
 8004a08:	e7ed      	b.n	80049e6 <xEventGroupWaitBits+0xda>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004a0a:	ea34 0305 	bics.w	r3, r4, r5
 8004a0e:	d1f9      	bne.n	8004a04 <xEventGroupWaitBits+0xf8>
 8004a10:	e7f4      	b.n	80049fc <xEventGroupWaitBits+0xf0>
 8004a12:	bf00      	nop
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
 8004a18:	b158      	cbz	r0, 8004a32 <vEventGroupSetBitsCallback+0x1a>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004a1a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8004a1e:	d011      	beq.n	8004a44 <vEventGroupSetBitsCallback+0x2c>
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	e7fe      	b.n	8004a30 <vEventGroupSetBitsCallback+0x18>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	e7fe      	b.n	8004a42 <vEventGroupSetBitsCallback+0x2a>
 8004a44:	f7ff bf0e 	b.w	8004864 <xEventGroupSetBits.part.1>

08004a48 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a4c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a50:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a52:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a54:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a56:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a58:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop

08004a68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a68:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004a6a:	6802      	ldr	r2, [r0, #0]
{
 8004a6c:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a6e:	689c      	ldr	r4, [r3, #8]
 8004a70:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a72:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004a74:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004a76:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a78:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a7a:	6099      	str	r1, [r3, #8]
}
 8004a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8004a80:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a82:	6002      	str	r2, [r0, #0]
}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a88:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a8a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a8c:	1c6b      	adds	r3, r5, #1
 8004a8e:	d011      	beq.n	8004ab4 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a90:	f100 0208 	add.w	r2, r0, #8
 8004a94:	e000      	b.n	8004a98 <vListInsert+0x10>
 8004a96:	461a      	mov	r2, r3
 8004a98:	6853      	ldr	r3, [r2, #4]
 8004a9a:	681c      	ldr	r4, [r3, #0]
 8004a9c:	42ac      	cmp	r4, r5
 8004a9e:	d9fa      	bls.n	8004a96 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004aa0:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aa2:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004aa4:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004aa6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004aa8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aaa:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 8004aac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004aae:	6004      	str	r4, [r0, #0]
}
 8004ab0:	bc30      	pop	{r4, r5}
 8004ab2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ab4:	6902      	ldr	r2, [r0, #16]
 8004ab6:	6853      	ldr	r3, [r2, #4]
 8004ab8:	e7f2      	b.n	8004aa0 <vListInsert+0x18>
 8004aba:	bf00      	nop

08004abc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004abc:	6842      	ldr	r2, [r0, #4]
 8004abe:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ac0:	6903      	ldr	r3, [r0, #16]
{
 8004ac2:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ac4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ac6:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ac8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004aca:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8004acc:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8004ace:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ad0:	bf08      	it	eq
 8004ad2:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004ad4:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004ada:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004adc:	6818      	ldr	r0, [r3, #0]
}
 8004ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ae8:	f001 fe3c 	bl	8006764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004aec:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004af0:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	dd16      	ble.n	8004b24 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004af8:	b1a3      	cbz	r3, 8004b24 <prvUnlockQueue+0x40>
 8004afa:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8004afe:	e005      	b.n	8004b0c <prvUnlockQueue+0x28>
 8004b00:	3c01      	subs	r4, #1
 8004b02:	b2e3      	uxtb	r3, r4
 8004b04:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b06:	b16b      	cbz	r3, 8004b24 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b0a:	b15b      	cbz	r3, 8004b24 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f001 fa67 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d0f4      	beq.n	8004b00 <prvUnlockQueue+0x1c>
 8004b16:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b18:	f001 fb3e 	bl	8006198 <vTaskMissedYield>
 8004b1c:	b2e3      	uxtb	r3, r4
 8004b1e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f1      	bne.n	8004b08 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b24:	23ff      	movs	r3, #255	; 0xff
 8004b26:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b2a:	f001 fe3d 	bl	80067a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b2e:	f001 fe19 	bl	8006764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b32:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004b36:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b38:	2c00      	cmp	r4, #0
 8004b3a:	dd16      	ble.n	8004b6a <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b3c:	692b      	ldr	r3, [r5, #16]
 8004b3e:	b1a3      	cbz	r3, 8004b6a <prvUnlockQueue+0x86>
 8004b40:	f105 0610 	add.w	r6, r5, #16
 8004b44:	e005      	b.n	8004b52 <prvUnlockQueue+0x6e>
 8004b46:	3c01      	subs	r4, #1
 8004b48:	b2e3      	uxtb	r3, r4
 8004b4a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b4c:	b16b      	cbz	r3, 8004b6a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4e:	692b      	ldr	r3, [r5, #16]
 8004b50:	b15b      	cbz	r3, 8004b6a <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b52:	4630      	mov	r0, r6
 8004b54:	f001 fa44 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d0f4      	beq.n	8004b46 <prvUnlockQueue+0x62>
 8004b5c:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8004b5e:	f001 fb1b 	bl	8006198 <vTaskMissedYield>
 8004b62:	b2e3      	uxtb	r3, r4
 8004b64:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f1      	bne.n	8004b4e <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b6a:	23ff      	movs	r3, #255	; 0xff
 8004b6c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004b74:	f001 be18 	b.w	80067a8 <vPortExitCritical>

08004b78 <xQueueGenericReset>:
{
 8004b78:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004b7a:	b1e0      	cbz	r0, 8004bb6 <xQueueGenericReset+0x3e>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004b80:	f001 fdf0 	bl	8006764 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b84:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8004b88:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b8a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b8c:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b90:	1acb      	subs	r3, r1, r3
 8004b92:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b94:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b96:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8004b98:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b9a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b9c:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ba0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ba4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004ba8:	b975      	cbnz	r5, 8004bc8 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	b9ab      	cbnz	r3, 8004bda <xQueueGenericReset+0x62>
	taskEXIT_CRITICAL();
 8004bae:	f001 fdfb 	bl	80067a8 <vPortExitCritical>
}
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bc8:	f104 0010 	add.w	r0, r4, #16
 8004bcc:	f7ff ff3c 	bl	8004a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bd4:	f7ff ff38 	bl	8004a48 <vListInitialise>
 8004bd8:	e7e9      	b.n	8004bae <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bda:	f104 0010 	add.w	r0, r4, #16
 8004bde:	f001 f9ff 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d0e3      	beq.n	8004bae <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004be6:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <xQueueGenericReset+0x80>)
 8004be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	e7da      	b.n	8004bae <xQueueGenericReset+0x36>
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bfc:	b940      	cbnz	r0, 8004c10 <xQueueGenericCreateStatic+0x14>
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	e7fe      	b.n	8004c0e <xQueueGenericCreateStatic+0x12>
	{
 8004c10:	b510      	push	{r4, lr}
 8004c12:	461c      	mov	r4, r3
 8004c14:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 8004c16:	b17b      	cbz	r3, 8004c38 <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c18:	b372      	cbz	r2, 8004c78 <xQueueGenericCreateStatic+0x7c>
 8004c1a:	b1b1      	cbz	r1, 8004c4a <xQueueGenericCreateStatic+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c1c:	2348      	movs	r3, #72	; 0x48
 8004c1e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c20:	9b01      	ldr	r3, [sp, #4]
 8004c22:	2b48      	cmp	r3, #72	; 0x48
 8004c24:	d01a      	beq.n	8004c5c <xQueueGenericCreateStatic+0x60>
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	e7fe      	b.n	8004c36 <xQueueGenericCreateStatic+0x3a>
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericCreateStatic+0x4c>
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	e7fe      	b.n	8004c5a <xQueueGenericCreateStatic+0x5e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c5c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004c64:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 8004c68:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7ff ff83 	bl	8004b78 <xQueueGenericReset>
	}
 8004c72:	4620      	mov	r0, r4
 8004c74:	b002      	add	sp, #8
 8004c76:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c78:	b141      	cbz	r1, 8004c8c <xQueueGenericCreateStatic+0x90>
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	e7fe      	b.n	8004c8a <xQueueGenericCreateStatic+0x8e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c8c:	2348      	movs	r3, #72	; 0x48
 8004c8e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c90:	9b01      	ldr	r3, [sp, #4]
 8004c92:	2b48      	cmp	r3, #72	; 0x48
 8004c94:	d1c7      	bne.n	8004c26 <xQueueGenericCreateStatic+0x2a>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c96:	2301      	movs	r3, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c98:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	e7e0      	b.n	8004c64 <xQueueGenericCreateStatic+0x68>
 8004ca2:	bf00      	nop

08004ca4 <xQueueGenericSend>:
{
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f000 8125 	beq.w	8004efc <xQueueGenericSend+0x258>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb2:	2900      	cmp	r1, #0
 8004cb4:	f000 8115 	beq.w	8004ee2 <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d10b      	bne.n	8004cd4 <xQueueGenericSend+0x30>
 8004cbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004cbe:	2a01      	cmp	r2, #1
 8004cc0:	d008      	beq.n	8004cd4 <xQueueGenericSend+0x30>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	e7fe      	b.n	8004cd2 <xQueueGenericSend+0x2e>
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cda:	f001 fa63 	bl	80061a4 <xTaskGetSchedulerState>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	f040 80fc 	bne.w	8004edc <xQueueGenericSend+0x238>
 8004ce4:	9b01      	ldr	r3, [sp, #4]
 8004ce6:	b143      	cbz	r3, 8004cfa <xQueueGenericSend+0x56>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericSend+0x54>
 8004cfa:	469a      	mov	sl, r3
		taskENTER_CRITICAL();
 8004cfc:	f001 fd32 	bl	8006764 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 8004d04:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8004fc4 <xQueueGenericSend+0x320>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d08:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 8004d0a:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d0e:	d375      	bcc.n	8004dfc <xQueueGenericSend+0x158>
 8004d10:	2f02      	cmp	r7, #2
 8004d12:	f000 80fc 	beq.w	8004f0e <xQueueGenericSend+0x26a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d16:	9d01      	ldr	r5, [sp, #4]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	f000 814e 	beq.w	8004fba <xQueueGenericSend+0x316>
				else if( xEntryTimeSet == pdFALSE )
 8004d1e:	f1ba 0f00 	cmp.w	sl, #0
 8004d22:	d102      	bne.n	8004d2a <xQueueGenericSend+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d24:	a802      	add	r0, sp, #8
 8004d26:	f001 f9e5 	bl	80060f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004d2a:	f001 fd3d 	bl	80067a8 <vPortExitCritical>
		vTaskSuspendAll();
 8004d2e:	f000 fed7 	bl	8005ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d32:	f001 fd17 	bl	8006764 <vPortEnterCritical>
 8004d36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d3a:	2bff      	cmp	r3, #255	; 0xff
 8004d3c:	bf08      	it	eq
 8004d3e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004d42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d46:	2bff      	cmp	r3, #255	; 0xff
 8004d48:	bf08      	it	eq
 8004d4a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004d4e:	f001 fd2b 	bl	80067a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d52:	a901      	add	r1, sp, #4
 8004d54:	a802      	add	r0, sp, #8
 8004d56:	f001 f9d9 	bl	800610c <xTaskCheckForTimeOut>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f040 8126 	bne.w	8004fac <xQueueGenericSend+0x308>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d60:	f001 fd00 	bl	8006764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d06a      	beq.n	8004e42 <xQueueGenericSend+0x19e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004d6c:	f001 fd1c 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004d70:	f001 fcf8 	bl	8006764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004d74:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8004d78:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	dd11      	ble.n	8004da2 <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d80:	b17b      	cbz	r3, 8004da2 <xQueueGenericSend+0xfe>
 8004d82:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8004d86:	e001      	b.n	8004d8c <xQueueGenericSend+0xe8>
 8004d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8a:	b153      	cbz	r3, 8004da2 <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	f001 f927 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004d92:	b108      	cbz	r0, 8004d98 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 8004d94:	f001 fa00 	bl	8006198 <vTaskMissedYield>
 8004d98:	3d01      	subs	r5, #1
 8004d9a:	b2eb      	uxtb	r3, r5
 8004d9c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f2      	bne.n	8004d88 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 8004da2:	23ff      	movs	r3, #255	; 0xff
 8004da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004da8:	f001 fcfe 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004dac:	f001 fcda 	bl	8006764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004db0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004db4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	dd11      	ble.n	8004dde <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dba:	6923      	ldr	r3, [r4, #16]
 8004dbc:	b17b      	cbz	r3, 8004dde <xQueueGenericSend+0x13a>
 8004dbe:	f104 0a10 	add.w	sl, r4, #16
 8004dc2:	e001      	b.n	8004dc8 <xQueueGenericSend+0x124>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	b153      	cbz	r3, 8004dde <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc8:	4650      	mov	r0, sl
 8004dca:	f001 f909 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004dce:	b108      	cbz	r0, 8004dd4 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 8004dd0:	f001 f9e2 	bl	8006198 <vTaskMissedYield>
 8004dd4:	3d01      	subs	r5, #1
 8004dd6:	b2eb      	uxtb	r3, r5
 8004dd8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f2      	bne.n	8004dc4 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004de4:	f001 fce0 	bl	80067a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8004de8:	f000 ff34 	bl	8005c54 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004dec:	f001 fcba 	bl	8006764 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004df0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004df2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004df4:	429a      	cmp	r2, r3
 8004df6:	f04f 0a01 	mov.w	sl, #1
 8004dfa:	d289      	bcs.n	8004d10 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dfe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	f000 8087 	beq.w	8004f14 <xQueueGenericSend+0x270>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e06:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	f040 80bb 	bne.w	8004f84 <xQueueGenericSend+0x2e0>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e0e:	6860      	ldr	r0, [r4, #4]
 8004e10:	f001 ff14 	bl	8006c3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e18:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e1a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e22:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e24:	d379      	bcc.n	8004f1a <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e26:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e2a:	6822      	ldr	r2, [r4, #0]
 8004e2c:	6062      	str	r2, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d077      	beq.n	8004f22 <xQueueGenericSend+0x27e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e36:	f001 f8d3 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	f040 8082 	bne.w	8004f44 <xQueueGenericSend+0x2a0>
 8004e40:	e06f      	b.n	8004f22 <xQueueGenericSend+0x27e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e42:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8004e46:	f001 fcaf 	bl	80067a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	9901      	ldr	r1, [sp, #4]
 8004e4e:	f000 ffed 	bl	8005e2c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8004e52:	f001 fc87 	bl	8006764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004e56:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8004e5a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	dd11      	ble.n	8004e84 <xQueueGenericSend+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e62:	b17b      	cbz	r3, 8004e84 <xQueueGenericSend+0x1e0>
 8004e64:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8004e68:	e001      	b.n	8004e6e <xQueueGenericSend+0x1ca>
 8004e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e6c:	b153      	cbz	r3, 8004e84 <xQueueGenericSend+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e6e:	4658      	mov	r0, fp
 8004e70:	f001 f8b6 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004e74:	b108      	cbz	r0, 8004e7a <xQueueGenericSend+0x1d6>
						vTaskMissedYield();
 8004e76:	f001 f98f 	bl	8006198 <vTaskMissedYield>
 8004e7a:	3d01      	subs	r5, #1
 8004e7c:	b2eb      	uxtb	r3, r5
 8004e7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f2      	bne.n	8004e6a <xQueueGenericSend+0x1c6>
		pxQueue->cTxLock = queueUNLOCKED;
 8004e84:	23ff      	movs	r3, #255	; 0xff
 8004e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004e8a:	f001 fc8d 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004e8e:	f001 fc69 	bl	8006764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004e92:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004e96:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	dc0a      	bgt.n	8004eb2 <xQueueGenericSend+0x20e>
 8004e9c:	e00c      	b.n	8004eb8 <xQueueGenericSend+0x214>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f001 f89e 	bl	8005fe0 <xTaskRemoveFromEventList>
 8004ea4:	b108      	cbz	r0, 8004eaa <xQueueGenericSend+0x206>
					vTaskMissedYield();
 8004ea6:	f001 f977 	bl	8006198 <vTaskMissedYield>
 8004eaa:	3d01      	subs	r5, #1
 8004eac:	b2eb      	uxtb	r3, r5
 8004eae:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb0:	b113      	cbz	r3, 8004eb8 <xQueueGenericSend+0x214>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f2      	bne.n	8004e9e <xQueueGenericSend+0x1fa>
		pxQueue->cRxLock = queueUNLOCKED;
 8004eb8:	23ff      	movs	r3, #255	; 0xff
 8004eba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004ebe:	f001 fc73 	bl	80067a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8004ec2:	f000 fec7 	bl	8005c54 <xTaskResumeAll>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d190      	bne.n	8004dec <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 8004eca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ece:	f8c9 3000 	str.w	r3, [r9]
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	e787      	b.n	8004dec <xQueueGenericSend+0x148>
 8004edc:	f04f 0a00 	mov.w	sl, #0
 8004ee0:	e70c      	b.n	8004cfc <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004ee4:	2a00      	cmp	r2, #0
 8004ee6:	f43f aee7 	beq.w	8004cb8 <xQueueGenericSend+0x14>
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	e7fe      	b.n	8004efa <xQueueGenericSend+0x256>
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericSend+0x268>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f10:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f12:	bb02      	cbnz	r2, 8004f56 <xQueueGenericSend+0x2b2>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f14:	6826      	ldr	r6, [r4, #0]
 8004f16:	3501      	adds	r5, #1
 8004f18:	b14e      	cbz	r6, 8004f2e <xQueueGenericSend+0x28a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f1a:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d187      	bne.n	8004e32 <xQueueGenericSend+0x18e>
				taskEXIT_CRITICAL();
 8004f22:	f001 fc41 	bl	80067a8 <vPortExitCritical>
				return pdPASS;
 8004f26:	2001      	movs	r0, #1
}
 8004f28:	b005      	add	sp, #20
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f2e:	68a0      	ldr	r0, [r4, #8]
 8004f30:	f001 f948 	bl	80061c4 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f34:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f38:	60a6      	str	r6, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f47f af79 	bne.w	8004e32 <xQueueGenericSend+0x18e>
					else if( xYieldRequired != pdFALSE )
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d0ee      	beq.n	8004f22 <xQueueGenericSend+0x27e>
						queueYIELD_IF_USING_PREEMPTION();
 8004f44:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <xQueueGenericSend+0x320>)
 8004f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	e7e5      	b.n	8004f22 <xQueueGenericSend+0x27e>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f56:	4631      	mov	r1, r6
 8004f58:	68e0      	ldr	r0, [r4, #12]
 8004f5a:	f001 fe6f 	bl	8006c3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f60:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f62:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f64:	425b      	negs	r3, r3
 8004f66:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f68:	4291      	cmp	r1, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f6a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f6c:	d916      	bls.n	8004f9c <xQueueGenericSend+0x2f8>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f6e:	68a2      	ldr	r2, [r4, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004f74:	2f02      	cmp	r7, #2
 8004f76:	d011      	beq.n	8004f9c <xQueueGenericSend+0x2f8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f78:	3501      	adds	r5, #1
 8004f7a:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0cf      	beq.n	8004f22 <xQueueGenericSend+0x27e>
 8004f82:	e756      	b.n	8004e32 <xQueueGenericSend+0x18e>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f84:	68e0      	ldr	r0, [r4, #12]
 8004f86:	f001 fe59 	bl	8006c3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f8c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f8e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f90:	425b      	negs	r3, r3
 8004f92:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f94:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f96:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f98:	d2ec      	bcs.n	8004f74 <xQueueGenericSend+0x2d0>
 8004f9a:	e7e8      	b.n	8004f6e <xQueueGenericSend+0x2ca>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	d1bc      	bne.n	8004f1a <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0bb      	beq.n	8004f22 <xQueueGenericSend+0x27e>
 8004faa:	e742      	b.n	8004e32 <xQueueGenericSend+0x18e>
			prvUnlockQueue( pxQueue );
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff fd99 	bl	8004ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fb2:	f000 fe4f 	bl	8005c54 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e7b6      	b.n	8004f28 <xQueueGenericSend+0x284>
					taskEXIT_CRITICAL();
 8004fba:	f001 fbf5 	bl	80067a8 <vPortExitCritical>
					return errQUEUE_FULL;
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	e7b2      	b.n	8004f28 <xQueueGenericSend+0x284>
 8004fc2:	bf00      	nop
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d037      	beq.n	800503c <xQueueGenericSendFromISR+0x74>
{
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd0:	b341      	cbz	r1, 8005024 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d10b      	bne.n	8004fee <xQueueGenericSendFromISR+0x26>
 8004fd6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004fd8:	2c01      	cmp	r4, #1
 8004fda:	d008      	beq.n	8004fee <xQueueGenericSendFromISR+0x26>
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	e7fe      	b.n	8004fec <xQueueGenericSendFromISR+0x24>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	461f      	mov	r7, r3
 8004ff2:	4691      	mov	r9, r2
 8004ff4:	468a      	mov	sl, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ff6:	f001 fcd9 	bl	80069ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ffa:	f3ef 8811 	mrs	r8, BASEPRI
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800500e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005012:	429a      	cmp	r2, r3
 8005014:	d31b      	bcc.n	800504e <xQueueGenericSendFromISR+0x86>
 8005016:	2f02      	cmp	r7, #2
 8005018:	d034      	beq.n	8005084 <xQueueGenericSendFromISR+0xbc>
			xReturn = errQUEUE_FULL;
 800501a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800501c:	f388 8811 	msr	BASEPRI, r8
}
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005024:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005026:	2c00      	cmp	r4, #0
 8005028:	d0d3      	beq.n	8004fd2 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	e7fe      	b.n	800503a <xQueueGenericSendFromISR+0x72>
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	e7fe      	b.n	800504c <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 800504e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005052:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005054:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8005056:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005058:	b1da      	cbz	r2, 8005092 <xQueueGenericSendFromISR+0xca>
	else if( xPosition == queueSEND_TO_BACK )
 800505a:	b36f      	cbz	r7, 80050b8 <xQueueGenericSendFromISR+0xf0>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800505c:	4651      	mov	r1, sl
 800505e:	68e0      	ldr	r0, [r4, #12]
 8005060:	f001 fdec 	bl	8006c3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005066:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005068:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800506a:	425b      	negs	r3, r3
 800506c:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800506e:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005070:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005072:	d202      	bcs.n	800507a <xQueueGenericSendFromISR+0xb2>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005074:	68a2      	ldr	r2, [r4, #8]
 8005076:	4413      	add	r3, r2
 8005078:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800507a:	2f02      	cmp	r7, #2
 800507c:	d10f      	bne.n	800509e <xQueueGenericSendFromISR+0xd6>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507e:	b176      	cbz	r6, 800509e <xQueueGenericSendFromISR+0xd6>
				--uxMessagesWaiting;
 8005080:	3e01      	subs	r6, #1
 8005082:	e00c      	b.n	800509e <xQueueGenericSendFromISR+0xd6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005084:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005088:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800508a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800508c:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800508e:	2a00      	cmp	r2, #0
 8005090:	d1e4      	bne.n	800505c <xQueueGenericSendFromISR+0x94>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005092:	6827      	ldr	r7, [r4, #0]
 8005094:	b91f      	cbnz	r7, 800509e <xQueueGenericSendFromISR+0xd6>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005096:	68a0      	ldr	r0, [r4, #8]
 8005098:	f001 f894 	bl	80061c4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800509c:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800509e:	3601      	adds	r6, #1
			if( cTxLock == queueUNLOCKED )
 80050a0:	1c6b      	adds	r3, r5, #1
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050a2:	63a6      	str	r6, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80050a4:	d016      	beq.n	80050d4 <xQueueGenericSendFromISR+0x10c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050a6:	1c6b      	adds	r3, r5, #1
 80050a8:	b25b      	sxtb	r3, r3
 80050aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80050ae:	2001      	movs	r0, #1
	__asm volatile
 80050b0:	f388 8811 	msr	BASEPRI, r8
}
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b8:	4651      	mov	r1, sl
 80050ba:	6860      	ldr	r0, [r4, #4]
 80050bc:	f001 fdbe 	bl	8006c3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c4:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050c6:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ca:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050cc:	d3e7      	bcc.n	800509e <xQueueGenericSendFromISR+0xd6>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	6063      	str	r3, [r4, #4]
 80050d2:	e7e4      	b.n	800509e <xQueueGenericSendFromISR+0xd6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0e9      	beq.n	80050ae <xQueueGenericSendFromISR+0xe6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050de:	f000 ff7f 	bl	8005fe0 <xTaskRemoveFromEventList>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d0e3      	beq.n	80050ae <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 80050e6:	f1b9 0f00 	cmp.w	r9, #0
 80050ea:	d0e0      	beq.n	80050ae <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050ec:	2001      	movs	r0, #1
 80050ee:	f8c9 0000 	str.w	r0, [r9]
 80050f2:	e793      	b.n	800501c <xQueueGenericSendFromISR+0x54>

080050f4 <xQueueReceive>:
{
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f000 8142 	beq.w	8005386 <xQueueReceive+0x292>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005102:	2900      	cmp	r1, #0
 8005104:	f000 8132 	beq.w	800536c <xQueueReceive+0x278>
 8005108:	4604      	mov	r4, r0
 800510a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800510c:	f001 f84a 	bl	80061a4 <xTaskGetSchedulerState>
 8005110:	b950      	cbnz	r0, 8005128 <xQueueReceive+0x34>
 8005112:	9b01      	ldr	r3, [sp, #4]
 8005114:	b143      	cbz	r3, 8005128 <xQueueReceive+0x34>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	e7fe      	b.n	8005126 <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 8005128:	f001 fb1c 	bl	8006764 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512e:	2d00      	cmp	r5, #0
 8005130:	f040 80ba 	bne.w	80052a8 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005134:	9b01      	ldr	r3, [sp, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d06a      	beq.n	8005210 <xQueueReceive+0x11c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800513a:	a802      	add	r0, sp, #8
 800513c:	f000 ffda 	bl	80060f4 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 8005140:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80053b8 <xQueueReceive+0x2c4>
		prvLockQueue( pxQueue );
 8005144:	46a8      	mov	r8, r5
 8005146:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800514a:	f001 fb2d 	bl	80067a8 <vPortExitCritical>
		vTaskSuspendAll();
 800514e:	f000 fcc7 	bl	8005ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005152:	f001 fb07 	bl	8006764 <vPortEnterCritical>
 8005156:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800515a:	2bff      	cmp	r3, #255	; 0xff
 800515c:	bf08      	it	eq
 800515e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005162:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005166:	2bff      	cmp	r3, #255	; 0xff
 8005168:	bf08      	it	eq
 800516a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800516e:	f001 fb1b 	bl	80067a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005172:	a901      	add	r1, sp, #4
 8005174:	a802      	add	r0, sp, #8
 8005176:	f000 ffc9 	bl	800610c <xTaskCheckForTimeOut>
 800517a:	2800      	cmp	r0, #0
 800517c:	d14e      	bne.n	800521c <xQueueReceive+0x128>
	taskENTER_CRITICAL();
 800517e:	f001 faf1 	bl	8006764 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80a7 	beq.w	80052d8 <xQueueReceive+0x1e4>
	taskEXIT_CRITICAL();
 800518a:	f001 fb0d 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800518e:	f001 fae9 	bl	8006764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005192:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005196:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005198:	2d00      	cmp	r5, #0
 800519a:	dc0a      	bgt.n	80051b2 <xQueueReceive+0xbe>
 800519c:	e00c      	b.n	80051b8 <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800519e:	4630      	mov	r0, r6
 80051a0:	f000 ff1e 	bl	8005fe0 <xTaskRemoveFromEventList>
 80051a4:	b108      	cbz	r0, 80051aa <xQueueReceive+0xb6>
						vTaskMissedYield();
 80051a6:	f000 fff7 	bl	8006198 <vTaskMissedYield>
 80051aa:	3d01      	subs	r5, #1
 80051ac:	b2eb      	uxtb	r3, r5
 80051ae:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051b0:	b113      	cbz	r3, 80051b8 <xQueueReceive+0xc4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f2      	bne.n	800519e <xQueueReceive+0xaa>
		pxQueue->cTxLock = queueUNLOCKED;
 80051b8:	23ff      	movs	r3, #255	; 0xff
 80051ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80051be:	f001 faf3 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80051c2:	f001 facf 	bl	8006764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80051c6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80051ca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	dd10      	ble.n	80051f2 <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	b173      	cbz	r3, 80051f2 <xQueueReceive+0xfe>
 80051d4:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d8:	4650      	mov	r0, sl
 80051da:	f000 ff01 	bl	8005fe0 <xTaskRemoveFromEventList>
 80051de:	b108      	cbz	r0, 80051e4 <xQueueReceive+0xf0>
					vTaskMissedYield();
 80051e0:	f000 ffda 	bl	8006198 <vTaskMissedYield>
 80051e4:	3d01      	subs	r5, #1
 80051e6:	b2eb      	uxtb	r3, r5
 80051e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ea:	b113      	cbz	r3, 80051f2 <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f2      	bne.n	80051d8 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 80051f2:	23ff      	movs	r3, #255	; 0xff
 80051f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80051f8:	f001 fad6 	bl	80067a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80051fc:	f000 fd2a 	bl	8005c54 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005200:	f001 fab0 	bl	8006764 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005204:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005206:	2d00      	cmp	r5, #0
 8005208:	d14e      	bne.n	80052a8 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800520a:	9b01      	ldr	r3, [sp, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d19c      	bne.n	800514a <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 8005210:	f001 faca 	bl	80067a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005214:	2000      	movs	r0, #0
}
 8005216:	b004      	add	sp, #16
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskENTER_CRITICAL();
 800521c:	f001 faa2 	bl	8006764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005220:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005224:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005226:	2d00      	cmp	r5, #0
 8005228:	dc0a      	bgt.n	8005240 <xQueueReceive+0x14c>
 800522a:	e00c      	b.n	8005246 <xQueueReceive+0x152>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800522c:	4630      	mov	r0, r6
 800522e:	f000 fed7 	bl	8005fe0 <xTaskRemoveFromEventList>
 8005232:	b108      	cbz	r0, 8005238 <xQueueReceive+0x144>
						vTaskMissedYield();
 8005234:	f000 ffb0 	bl	8006198 <vTaskMissedYield>
 8005238:	3d01      	subs	r5, #1
 800523a:	b2eb      	uxtb	r3, r5
 800523c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800523e:	b113      	cbz	r3, 8005246 <xQueueReceive+0x152>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f2      	bne.n	800522c <xQueueReceive+0x138>
		pxQueue->cTxLock = queueUNLOCKED;
 8005246:	23ff      	movs	r3, #255	; 0xff
 8005248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800524c:	f001 faac 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005250:	f001 fa88 	bl	8006764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005254:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005258:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800525a:	2d00      	cmp	r5, #0
 800525c:	dd11      	ble.n	8005282 <xQueueReceive+0x18e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	b17b      	cbz	r3, 8005282 <xQueueReceive+0x18e>
 8005262:	f104 0a10 	add.w	sl, r4, #16
 8005266:	e001      	b.n	800526c <xQueueReceive+0x178>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	b153      	cbz	r3, 8005282 <xQueueReceive+0x18e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526c:	4650      	mov	r0, sl
 800526e:	f000 feb7 	bl	8005fe0 <xTaskRemoveFromEventList>
 8005272:	b108      	cbz	r0, 8005278 <xQueueReceive+0x184>
					vTaskMissedYield();
 8005274:	f000 ff90 	bl	8006198 <vTaskMissedYield>
 8005278:	3d01      	subs	r5, #1
 800527a:	b2eb      	uxtb	r3, r5
 800527c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f2      	bne.n	8005268 <xQueueReceive+0x174>
		pxQueue->cRxLock = queueUNLOCKED;
 8005282:	23ff      	movs	r3, #255	; 0xff
 8005284:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005288:	f001 fa8e 	bl	80067a8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800528c:	f000 fce2 	bl	8005c54 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005290:	f001 fa68 	bl	8006764 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ba      	beq.n	8005210 <xQueueReceive+0x11c>
	taskEXIT_CRITICAL();
 800529a:	f001 fa85 	bl	80067a8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800529e:	f001 fa61 	bl	8006764 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	d0b0      	beq.n	800520a <xQueueReceive+0x116>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052aa:	b152      	cbz	r2, 80052c2 <xQueueReceive+0x1ce>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052ac:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052b0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052b2:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052b4:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052b6:	bf24      	itt	cs
 80052b8:	6821      	ldrcs	r1, [r4, #0]
 80052ba:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052bc:	4638      	mov	r0, r7
 80052be:	f001 fcbd 	bl	8006c3c <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052c2:	3d01      	subs	r5, #1
 80052c4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d165      	bne.n	8005398 <xQueueReceive+0x2a4>
				taskEXIT_CRITICAL();
 80052cc:	f001 fa6c 	bl	80067a8 <vPortExitCritical>
				return pdPASS;
 80052d0:	2001      	movs	r0, #1
}
 80052d2:	b004      	add	sp, #16
 80052d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80052d8:	f001 fa66 	bl	80067a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052dc:	9901      	ldr	r1, [sp, #4]
 80052de:	4630      	mov	r0, r6
 80052e0:	f000 fda4 	bl	8005e2c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80052e4:	f001 fa3e 	bl	8006764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80052e8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80052ec:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	dc0a      	bgt.n	8005308 <xQueueReceive+0x214>
 80052f2:	e00c      	b.n	800530e <xQueueReceive+0x21a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 fe73 	bl	8005fe0 <xTaskRemoveFromEventList>
 80052fa:	b108      	cbz	r0, 8005300 <xQueueReceive+0x20c>
						vTaskMissedYield();
 80052fc:	f000 ff4c 	bl	8006198 <vTaskMissedYield>
 8005300:	3d01      	subs	r5, #1
 8005302:	b2eb      	uxtb	r3, r5
 8005304:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005306:	b113      	cbz	r3, 800530e <xQueueReceive+0x21a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f2      	bne.n	80052f4 <xQueueReceive+0x200>
		pxQueue->cTxLock = queueUNLOCKED;
 800530e:	23ff      	movs	r3, #255	; 0xff
 8005310:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005314:	f001 fa48 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005318:	f001 fa24 	bl	8006764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800531c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005320:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005322:	2d00      	cmp	r5, #0
 8005324:	dd10      	ble.n	8005348 <xQueueReceive+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	b173      	cbz	r3, 8005348 <xQueueReceive+0x254>
 800532a:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532e:	4650      	mov	r0, sl
 8005330:	f000 fe56 	bl	8005fe0 <xTaskRemoveFromEventList>
 8005334:	b108      	cbz	r0, 800533a <xQueueReceive+0x246>
					vTaskMissedYield();
 8005336:	f000 ff2f 	bl	8006198 <vTaskMissedYield>
 800533a:	3d01      	subs	r5, #1
 800533c:	b2eb      	uxtb	r3, r5
 800533e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005340:	b113      	cbz	r3, 8005348 <xQueueReceive+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f2      	bne.n	800532e <xQueueReceive+0x23a>
		pxQueue->cRxLock = queueUNLOCKED;
 8005348:	23ff      	movs	r3, #255	; 0xff
 800534a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800534e:	f001 fa2b 	bl	80067a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005352:	f000 fc7f 	bl	8005c54 <xTaskResumeAll>
 8005356:	2800      	cmp	r0, #0
 8005358:	d1a1      	bne.n	800529e <xQueueReceive+0x1aa>
					portYIELD_WITHIN_API();
 800535a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800535e:	f8c9 3000 	str.w	r3, [r9]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	e798      	b.n	800529e <xQueueReceive+0x1aa>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	f43f aeca 	beq.w	8005108 <xQueueReceive+0x14>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	e7fe      	b.n	8005384 <xQueueReceive+0x290>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	e7fe      	b.n	8005396 <xQueueReceive+0x2a2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005398:	f104 0010 	add.w	r0, r4, #16
 800539c:	f000 fe20 	bl	8005fe0 <xTaskRemoveFromEventList>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d093      	beq.n	80052cc <xQueueReceive+0x1d8>
						queueYIELD_IF_USING_PREEMPTION();
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <xQueueReceive+0x2c4>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	e78a      	b.n	80052cc <xQueueReceive+0x1d8>
 80053b6:	bf00      	nop
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <vQueueAddToRegistry+0x50>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	b17a      	cbz	r2, 80053e2 <vQueueAddToRegistry+0x26>
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	b1b2      	cbz	r2, 80053f4 <vQueueAddToRegistry+0x38>
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	b1b2      	cbz	r2, 80053f8 <vQueueAddToRegistry+0x3c>
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	b1b2      	cbz	r2, 80053fc <vQueueAddToRegistry+0x40>
 80053ce:	6a1a      	ldr	r2, [r3, #32]
 80053d0:	b1b2      	cbz	r2, 8005400 <vQueueAddToRegistry+0x44>
 80053d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d4:	b1b2      	cbz	r2, 8005404 <vQueueAddToRegistry+0x48>
 80053d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d8:	b112      	cbz	r2, 80053e0 <vQueueAddToRegistry+0x24>
 80053da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053dc:	b1a2      	cbz	r2, 8005408 <vQueueAddToRegistry+0x4c>
 80053de:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e0:	2206      	movs	r2, #6
	{
 80053e2:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053e4:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ec:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f4:	2201      	movs	r2, #1
 80053f6:	e7f4      	b.n	80053e2 <vQueueAddToRegistry+0x26>
 80053f8:	2202      	movs	r2, #2
 80053fa:	e7f2      	b.n	80053e2 <vQueueAddToRegistry+0x26>
 80053fc:	2203      	movs	r2, #3
 80053fe:	e7f0      	b.n	80053e2 <vQueueAddToRegistry+0x26>
 8005400:	2204      	movs	r2, #4
 8005402:	e7ee      	b.n	80053e2 <vQueueAddToRegistry+0x26>
 8005404:	2205      	movs	r2, #5
 8005406:	e7ec      	b.n	80053e2 <vQueueAddToRegistry+0x26>
 8005408:	2207      	movs	r2, #7
 800540a:	e7ea      	b.n	80053e2 <vQueueAddToRegistry+0x26>
 800540c:	200108d4 	.word	0x200108d4

08005410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	460c      	mov	r4, r1
 8005416:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005418:	f001 f9a4 	bl	8006764 <vPortEnterCritical>
 800541c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005420:	2bff      	cmp	r3, #255	; 0xff
 8005422:	bf04      	itt	eq
 8005424:	2300      	moveq	r3, #0
 8005426:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800542a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800542e:	2bff      	cmp	r3, #255	; 0xff
 8005430:	bf04      	itt	eq
 8005432:	2300      	moveq	r3, #0
 8005434:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8005438:	f001 f9b6 	bl	80067a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800543c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800543e:	b92b      	cbnz	r3, 800544c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005440:	4632      	mov	r2, r6
 8005442:	4621      	mov	r1, r4
 8005444:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005448:	f000 fd6c 	bl	8005f24 <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 800544c:	f001 f98a 	bl	8006764 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005450:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005454:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005456:	2c00      	cmp	r4, #0
 8005458:	dd16      	ble.n	8005488 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800545a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800545c:	b1a3      	cbz	r3, 8005488 <vQueueWaitForMessageRestricted+0x78>
 800545e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005462:	e005      	b.n	8005470 <vQueueWaitForMessageRestricted+0x60>
 8005464:	3c01      	subs	r4, #1
 8005466:	b2e3      	uxtb	r3, r4
 8005468:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800546a:	b16b      	cbz	r3, 8005488 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800546c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800546e:	b15b      	cbz	r3, 8005488 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005470:	4630      	mov	r0, r6
 8005472:	f000 fdb5 	bl	8005fe0 <xTaskRemoveFromEventList>
 8005476:	2800      	cmp	r0, #0
 8005478:	d0f4      	beq.n	8005464 <vQueueWaitForMessageRestricted+0x54>
 800547a:	3c01      	subs	r4, #1
						vTaskMissedYield();
 800547c:	f000 fe8c 	bl	8006198 <vTaskMissedYield>
 8005480:	b2e3      	uxtb	r3, r4
 8005482:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f1      	bne.n	800546c <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 8005488:	23ff      	movs	r3, #255	; 0xff
 800548a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800548e:	f001 f98b 	bl	80067a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005492:	f001 f967 	bl	8006764 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005496:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800549a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800549c:	2c00      	cmp	r4, #0
 800549e:	dd16      	ble.n	80054ce <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a0:	692b      	ldr	r3, [r5, #16]
 80054a2:	b1a3      	cbz	r3, 80054ce <vQueueWaitForMessageRestricted+0xbe>
 80054a4:	f105 0610 	add.w	r6, r5, #16
 80054a8:	e005      	b.n	80054b6 <vQueueWaitForMessageRestricted+0xa6>
 80054aa:	3c01      	subs	r4, #1
 80054ac:	b2e3      	uxtb	r3, r4
 80054ae:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054b0:	b16b      	cbz	r3, 80054ce <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054b2:	692b      	ldr	r3, [r5, #16]
 80054b4:	b15b      	cbz	r3, 80054ce <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 fd92 	bl	8005fe0 <xTaskRemoveFromEventList>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d0f4      	beq.n	80054aa <vQueueWaitForMessageRestricted+0x9a>
 80054c0:	3c01      	subs	r4, #1
					vTaskMissedYield();
 80054c2:	f000 fe69 	bl	8006198 <vTaskMissedYield>
 80054c6:	b2e3      	uxtb	r3, r4
 80054c8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f1      	bne.n	80054b2 <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 80054ce:	23ff      	movs	r3, #255	; 0xff
 80054d0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80054d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80054d8:	f001 b966 	b.w	80067a8 <vPortExitCritical>

080054dc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054e2:	f001 f93f 	bl	8006764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054e6:	4a35      	ldr	r2, [pc, #212]	; (80055bc <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80054e8:	4d35      	ldr	r5, [pc, #212]	; (80055c0 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80054ea:	6813      	ldr	r3, [r2, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d034      	beq.n	8005560 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054f6:	4f33      	ldr	r7, [pc, #204]	; (80055c4 <prvAddNewTaskToReadyList+0xe8>)
 80054f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	b343      	cbz	r3, 8005550 <prvAddNewTaskToReadyList+0x74>
 80054fe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80055e8 <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005502:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80055ec <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005506:	4e30      	ldr	r6, [pc, #192]	; (80055c8 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8005508:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 800550c:	6831      	ldr	r1, [r6, #0]
 800550e:	2301      	movs	r3, #1
 8005510:	4083      	lsls	r3, r0
 8005512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005516:	430b      	orrs	r3, r1
		uxTaskNumber++;
 8005518:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 800551a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800551e:	1d21      	adds	r1, r4, #4
 8005520:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 8005522:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8005526:	f7ff fa9f 	bl	8004a68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800552a:	f001 f93d 	bl	80067a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	b163      	cbz	r3, 800554c <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005532:	682a      	ldr	r2, [r5, #0]
 8005534:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005538:	429a      	cmp	r2, r3
 800553a:	d207      	bcs.n	800554c <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <prvAddNewTaskToReadyList+0xf0>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80055e8 <prvAddNewTaskToReadyList+0x10c>
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800555a:	bf98      	it	ls
 800555c:	602c      	strls	r4, [r5, #0]
 800555e:	e7d0      	b.n	8005502 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8005560:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d004      	beq.n	8005572 <prvAddNewTaskToReadyList+0x96>
 8005568:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800556a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80055e8 <prvAddNewTaskToReadyList+0x10c>
 800556e:	4f15      	ldr	r7, [pc, #84]	; (80055c4 <prvAddNewTaskToReadyList+0xe8>)
 8005570:	e7c7      	b.n	8005502 <prvAddNewTaskToReadyList+0x26>
 8005572:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80055e8 <prvAddNewTaskToReadyList+0x10c>
 8005576:	4646      	mov	r6, r8
 8005578:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800557c:	4630      	mov	r0, r6
 800557e:	3614      	adds	r6, #20
 8005580:	f7ff fa62 	bl	8004a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005584:	42b7      	cmp	r7, r6
 8005586:	d1f9      	bne.n	800557c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005588:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80055f0 <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 800558c:	4e10      	ldr	r6, [pc, #64]	; (80055d0 <prvAddNewTaskToReadyList+0xf4>)
 800558e:	4f0d      	ldr	r7, [pc, #52]	; (80055c4 <prvAddNewTaskToReadyList+0xe8>)
	vListInitialise( &xDelayedTaskList1 );
 8005590:	4648      	mov	r0, r9
 8005592:	f7ff fa59 	bl	8004a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005596:	4630      	mov	r0, r6
 8005598:	f7ff fa56 	bl	8004a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800559c:	480d      	ldr	r0, [pc, #52]	; (80055d4 <prvAddNewTaskToReadyList+0xf8>)
 800559e:	f7ff fa53 	bl	8004a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055a2:	480d      	ldr	r0, [pc, #52]	; (80055d8 <prvAddNewTaskToReadyList+0xfc>)
 80055a4:	f7ff fa50 	bl	8004a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055a8:	480c      	ldr	r0, [pc, #48]	; (80055dc <prvAddNewTaskToReadyList+0x100>)
 80055aa:	f7ff fa4d 	bl	8004a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ae:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 80055b2:	f8c2 9000 	str.w	r9, [r2]
 80055b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055b8:	601e      	str	r6, [r3, #0]
 80055ba:	e7a2      	b.n	8005502 <prvAddNewTaskToReadyList+0x26>
 80055bc:	2000d0ac 	.word	0x2000d0ac
 80055c0:	2000d014 	.word	0x2000d014
 80055c4:	2000d108 	.word	0x2000d108
 80055c8:	2000d0c0 	.word	0x2000d0c0
 80055cc:	e000ed04 	.word	0xe000ed04
 80055d0:	2000d0d8 	.word	0x2000d0d8
 80055d4:	2000d0f4 	.word	0x2000d0f4
 80055d8:	2000d120 	.word	0x2000d120
 80055dc:	2000d10c 	.word	0x2000d10c
 80055e0:	2000d018 	.word	0x2000d018
 80055e4:	2000d01c 	.word	0x2000d01c
 80055e8:	2000d020 	.word	0x2000d020
 80055ec:	2000d0bc 	.word	0x2000d0bc
 80055f0:	2000d0c4 	.word	0x2000d0c4

080055f4 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055fa:	9d08      	ldr	r5, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055fc:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80055fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005600:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005604:	3a01      	subs	r2, #1
 8005606:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800560a:	4680      	mov	r8, r0
 800560c:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800560e:	f026 0907 	bic.w	r9, r6, #7
	if( pcName != NULL )
 8005612:	2900      	cmp	r1, #0
 8005614:	d076      	beq.n	8005704 <prvInitialiseNewTask.isra.2+0x110>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005616:	780b      	ldrb	r3, [r1, #0]
 8005618:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800561c:	780b      	ldrb	r3, [r1, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04d      	beq.n	80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005622:	784b      	ldrb	r3, [r1, #1]
 8005624:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8005628:	784b      	ldrb	r3, [r1, #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d047      	beq.n	80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800562e:	788b      	ldrb	r3, [r1, #2]
 8005630:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8005634:	788b      	ldrb	r3, [r1, #2]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d041      	beq.n	80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800563a:	78cb      	ldrb	r3, [r1, #3]
 800563c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005640:	78cb      	ldrb	r3, [r1, #3]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03b      	beq.n	80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005646:	790b      	ldrb	r3, [r1, #4]
 8005648:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800564c:	790b      	ldrb	r3, [r1, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d035      	beq.n	80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005652:	794b      	ldrb	r3, [r1, #5]
 8005654:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8005658:	794b      	ldrb	r3, [r1, #5]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d02f      	beq.n	80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800565e:	798b      	ldrb	r3, [r1, #6]
 8005660:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8005664:	798b      	ldrb	r3, [r1, #6]
 8005666:	b353      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005668:	79cb      	ldrb	r3, [r1, #7]
 800566a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 800566e:	79cb      	ldrb	r3, [r1, #7]
 8005670:	b32b      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005672:	7a0b      	ldrb	r3, [r1, #8]
 8005674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8005678:	7a0b      	ldrb	r3, [r1, #8]
 800567a:	b303      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800567c:	7a4b      	ldrb	r3, [r1, #9]
 800567e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005682:	7a4b      	ldrb	r3, [r1, #9]
 8005684:	b1db      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005686:	7a8b      	ldrb	r3, [r1, #10]
 8005688:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800568c:	7a8b      	ldrb	r3, [r1, #10]
 800568e:	b1b3      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005690:	7acb      	ldrb	r3, [r1, #11]
 8005692:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005696:	7acb      	ldrb	r3, [r1, #11]
 8005698:	b18b      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800569a:	7b0b      	ldrb	r3, [r1, #12]
 800569c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80056a0:	7b0b      	ldrb	r3, [r1, #12]
 80056a2:	b163      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056a4:	7b4b      	ldrb	r3, [r1, #13]
 80056a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80056aa:	7b4b      	ldrb	r3, [r1, #13]
 80056ac:	b13b      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056ae:	7b8b      	ldrb	r3, [r1, #14]
 80056b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 80056b4:	7b8b      	ldrb	r3, [r1, #14]
 80056b6:	b113      	cbz	r3, 80056be <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056b8:	7bcb      	ldrb	r3, [r1, #15]
 80056ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056be:	2300      	movs	r3, #0
 80056c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c4:	2d06      	cmp	r5, #6
 80056c6:	bf28      	it	cs
 80056c8:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80056ca:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 80056cc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80056ce:	e9c4 5611 	strd	r5, r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056d2:	1d20      	adds	r0, r4, #4
 80056d4:	f7ff f9c4 	bl	8004a60 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056dc:	f104 0018 	add.w	r0, r4, #24
 80056e0:	f7ff f9be 	bl	8004a60 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80056e4:	64e6      	str	r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056e8:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056ea:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056ee:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056f0:	4652      	mov	r2, sl
 80056f2:	4641      	mov	r1, r8
 80056f4:	4648      	mov	r0, r9
 80056f6:	f001 f807 	bl	8006708 <pxPortInitialiseStack>
 80056fa:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80056fc:	b107      	cbz	r7, 8005700 <prvInitialiseNewTask.isra.2+0x10c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056fe:	603c      	str	r4, [r7, #0]
}
 8005700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005704:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005708:	e7dc      	b.n	80056c4 <prvInitialiseNewTask.isra.2+0xd0>
 800570a:	bf00      	nop

0800570c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005710:	4e1b      	ldr	r6, [pc, #108]	; (8005780 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8005712:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005714:	6833      	ldr	r3, [r6, #0]
{
 8005716:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005718:	1d18      	adds	r0, r3, #4
{
 800571a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571c:	f7ff f9ce 	bl	8004abc <uxListRemove>
 8005720:	b940      	cbnz	r0, 8005734 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005722:	6833      	ldr	r3, [r6, #0]
 8005724:	4917      	ldr	r1, [pc, #92]	; (8005784 <prvAddCurrentTaskToDelayedList+0x78>)
 8005726:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005728:	680b      	ldr	r3, [r1, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	4082      	lsls	r2, r0
 800572e:	ea23 0302 	bic.w	r3, r3, r2
 8005732:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005734:	1c6b      	adds	r3, r5, #1
 8005736:	d017      	beq.n	8005768 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005738:	6833      	ldr	r3, [r6, #0]
 800573a:	1964      	adds	r4, r4, r5
 800573c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800573e:	d20b      	bcs.n	8005758 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	6831      	ldr	r1, [r6, #0]
 8005746:	3104      	adds	r1, #4
 8005748:	f7ff f99e 	bl	8004a88 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005752:	bf88      	it	hi
 8005754:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <prvAddCurrentTaskToDelayedList+0x84>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	6831      	ldr	r1, [r6, #0]
}
 800575e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005762:	3104      	adds	r1, #4
 8005764:	f7ff b990 	b.w	8004a88 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005768:	2f00      	cmp	r7, #0
 800576a:	d0e5      	beq.n	8005738 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576c:	6831      	ldr	r1, [r6, #0]
 800576e:	4809      	ldr	r0, [pc, #36]	; (8005794 <prvAddCurrentTaskToDelayedList+0x88>)
 8005770:	3104      	adds	r1, #4
}
 8005772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005776:	f7ff b977 	b.w	8004a68 <vListInsertEnd>
 800577a:	bf00      	nop
 800577c:	2000d134 	.word	0x2000d134
 8005780:	2000d014 	.word	0x2000d014
 8005784:	2000d0c0 	.word	0x2000d0c0
 8005788:	2000d018 	.word	0x2000d018
 800578c:	2000d0ec 	.word	0x2000d0ec
 8005790:	2000d01c 	.word	0x2000d01c
 8005794:	2000d10c 	.word	0x2000d10c

08005798 <prvIdleTask>:
{
 8005798:	f8df a090 	ldr.w	sl, [pc, #144]	; 800582c <prvIdleTask+0x94>
 800579c:	4e21      	ldr	r6, [pc, #132]	; (8005824 <prvIdleTask+0x8c>)
 800579e:	4d22      	ldr	r5, [pc, #136]	; (8005828 <prvIdleTask+0x90>)
 80057a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005830 <prvIdleTask+0x98>
				taskYIELD();
 80057a4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005834 <prvIdleTask+0x9c>
{
 80057a8:	b580      	push	{r7, lr}
				taskYIELD();
 80057aa:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ae:	682b      	ldr	r3, [r5, #0]
 80057b0:	b343      	cbz	r3, 8005804 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 80057b2:	f000 ffd7 	bl	8006764 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80057ba:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057bc:	1d20      	adds	r0, r4, #4
 80057be:	f7ff f97d 	bl	8004abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80057ce:	f000 ffeb 	bl	80067a8 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057d2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80057d6:	b163      	cbz	r3, 80057f2 <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d01e      	beq.n	800581a <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d0e6      	beq.n	80057ae <prvIdleTask+0x16>
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	e7fe      	b.n	80057f0 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 80057f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057f4:	f001 f9bc 	bl	8006b70 <vPortFree>
				vPortFree( pxTCB );
 80057f8:	4620      	mov	r0, r4
 80057fa:	f001 f9b9 	bl	8006b70 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1d6      	bne.n	80057b2 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005804:	f8d9 3000 	ldr.w	r3, [r9]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d9d0      	bls.n	80057ae <prvIdleTask+0x16>
				taskYIELD();
 800580c:	f8c8 7000 	str.w	r7, [r8]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	e7c9      	b.n	80057ae <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800581a:	4620      	mov	r0, r4
 800581c:	f001 f9a8 	bl	8006b70 <vPortFree>
 8005820:	e7c5      	b.n	80057ae <prvIdleTask+0x16>
 8005822:	bf00      	nop
 8005824:	2000d0ac 	.word	0x2000d0ac
 8005828:	2000d0b0 	.word	0x2000d0b0
 800582c:	2000d120 	.word	0x2000d120
 8005830:	2000d020 	.word	0x2000d020
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <xTaskCreateStatic>:
	{
 8005838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583a:	b087      	sub	sp, #28
 800583c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8005840:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8005842:	b1bd      	cbz	r5, 8005874 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 8005844:	b16c      	cbz	r4, 8005862 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005846:	2754      	movs	r7, #84	; 0x54
 8005848:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800584a:	9f05      	ldr	r7, [sp, #20]
 800584c:	2f54      	cmp	r7, #84	; 0x54
 800584e:	d01a      	beq.n	8005886 <xTaskCreateStatic+0x4e>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	e7fe      	b.n	8005860 <xTaskCreateStatic+0x28>
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	e7fe      	b.n	8005872 <xTaskCreateStatic+0x3a>
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	e7fe      	b.n	8005884 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005886:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005888:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800588a:	ad04      	add	r5, sp, #16
 800588c:	9402      	str	r4, [sp, #8]
 800588e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005890:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005894:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005896:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005898:	f7ff feac 	bl	80055f4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800589c:	4620      	mov	r0, r4
 800589e:	f7ff fe1d 	bl	80054dc <prvAddNewTaskToReadyList>
	}
 80058a2:	9804      	ldr	r0, [sp, #16]
 80058a4:	b007      	add	sp, #28
 80058a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058a8 <xTaskCreate>:
	{
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058ac:	0096      	lsls	r6, r2, #2
	{
 80058ae:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058b0:	4630      	mov	r0, r6
	{
 80058b2:	460d      	mov	r5, r1
 80058b4:	4699      	mov	r9, r3
 80058b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058b8:	f001 f8ce 	bl	8006a58 <pvPortMalloc>
			if( pxStack != NULL )
 80058bc:	2800      	cmp	r0, #0
 80058be:	f000 809b 	beq.w	80059f8 <xTaskCreate+0x150>
 80058c2:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058c4:	2054      	movs	r0, #84	; 0x54
 80058c6:	f001 f8c7 	bl	8006a58 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80058ca:	4604      	mov	r4, r0
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f000 808c 	beq.w	80059ea <xTaskCreate+0x142>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058d2:	3e04      	subs	r6, #4
 80058d4:	4456      	add	r6, sl
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058d6:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058d8:	f026 0607 	bic.w	r6, r6, #7
					pxNewTCB->pxStack = pxStack;
 80058dc:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058e0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
	if( pcName != NULL )
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	d07d      	beq.n	80059e4 <xTaskCreate+0x13c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058e8:	782b      	ldrb	r3, [r5, #0]
 80058ea:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80058ee:	782b      	ldrb	r3, [r5, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d04d      	beq.n	8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f4:	786b      	ldrb	r3, [r5, #1]
 80058f6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80058fa:	786b      	ldrb	r3, [r5, #1]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d047      	beq.n	8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005900:	78ab      	ldrb	r3, [r5, #2]
 8005902:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8005906:	78ab      	ldrb	r3, [r5, #2]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d041      	beq.n	8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800590c:	78eb      	ldrb	r3, [r5, #3]
 800590e:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005912:	78eb      	ldrb	r3, [r5, #3]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03b      	beq.n	8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005918:	792b      	ldrb	r3, [r5, #4]
 800591a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800591e:	792b      	ldrb	r3, [r5, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d035      	beq.n	8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005924:	796b      	ldrb	r3, [r5, #5]
 8005926:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 800592a:	796b      	ldrb	r3, [r5, #5]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02f      	beq.n	8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005930:	79ab      	ldrb	r3, [r5, #6]
 8005932:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8005936:	79ab      	ldrb	r3, [r5, #6]
 8005938:	b353      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800593a:	79eb      	ldrb	r3, [r5, #7]
 800593c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8005940:	79eb      	ldrb	r3, [r5, #7]
 8005942:	b32b      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005944:	7a2b      	ldrb	r3, [r5, #8]
 8005946:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800594a:	7a2b      	ldrb	r3, [r5, #8]
 800594c:	b303      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800594e:	7a6b      	ldrb	r3, [r5, #9]
 8005950:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005954:	7a6b      	ldrb	r3, [r5, #9]
 8005956:	b1db      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005958:	7aab      	ldrb	r3, [r5, #10]
 800595a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800595e:	7aab      	ldrb	r3, [r5, #10]
 8005960:	b1b3      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005962:	7aeb      	ldrb	r3, [r5, #11]
 8005964:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005968:	7aeb      	ldrb	r3, [r5, #11]
 800596a:	b18b      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800596c:	7b2b      	ldrb	r3, [r5, #12]
 800596e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8005972:	7b2b      	ldrb	r3, [r5, #12]
 8005974:	b163      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005976:	7b6b      	ldrb	r3, [r5, #13]
 8005978:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800597c:	7b6b      	ldrb	r3, [r5, #13]
 800597e:	b13b      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005980:	7bab      	ldrb	r3, [r5, #14]
 8005982:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8005986:	7bab      	ldrb	r3, [r5, #14]
 8005988:	b113      	cbz	r3, 8005990 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800598a:	7beb      	ldrb	r3, [r5, #15]
 800598c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005990:	2300      	movs	r3, #0
 8005992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005996:	9d08      	ldr	r5, [sp, #32]
 8005998:	2d06      	cmp	r5, #6
 800599a:	bf28      	it	cs
 800599c:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800599e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80059a2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80059a4:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059a8:	1d20      	adds	r0, r4, #4
 80059aa:	f7ff f859 	bl	8004a60 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ae:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059b2:	f104 0018 	add.w	r0, r4, #24
 80059b6:	f7ff f853 	bl	8004a60 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80059ba:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059c0:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059c2:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059c6:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c8:	464a      	mov	r2, r9
 80059ca:	4641      	mov	r1, r8
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 fe9b 	bl	8006708 <pxPortInitialiseStack>
 80059d2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80059d4:	b107      	cbz	r7, 80059d8 <xTaskCreate+0x130>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d6:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff fd7f 	bl	80054dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059de:	2001      	movs	r0, #1
	}
 80059e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059e4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 80059e8:	e7d5      	b.n	8005996 <xTaskCreate+0xee>
					vPortFree( pxStack );
 80059ea:	4650      	mov	r0, sl
 80059ec:	f001 f8c0 	bl	8006b70 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80059fc:	e7f0      	b.n	80059e0 <xTaskCreate+0x138>
 80059fe:	bf00      	nop

08005a00 <vTaskStartScheduler>:
{
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a04:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a06:	aa07      	add	r2, sp, #28
 8005a08:	a906      	add	r1, sp, #24
 8005a0a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a0c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a10:	f7fb fe20 	bl	8001654 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a14:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 8005a18:	b1c3      	cbz	r3, 8005a4c <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 8005a1a:	b175      	cbz	r5, 8005a3a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a1c:	2254      	movs	r2, #84	; 0x54
 8005a1e:	9209      	str	r2, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a20:	9909      	ldr	r1, [sp, #36]	; 0x24
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a22:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a24:	2954      	cmp	r1, #84	; 0x54
 8005a26:	d01a      	beq.n	8005a5e <vTaskStartScheduler+0x5e>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	e7fe      	b.n	8005a38 <vTaskStartScheduler+0x38>
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	e7fe      	b.n	8005a4a <vTaskStartScheduler+0x4a>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	e7fe      	b.n	8005a5c <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a5e:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a60:	a908      	add	r1, sp, #32
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a62:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a64:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a68:	4623      	mov	r3, r4
 8005a6a:	e9cd 4100 	strd	r4, r1, [sp]
 8005a6e:	4817      	ldr	r0, [pc, #92]	; (8005acc <vTaskStartScheduler+0xcc>)
 8005a70:	4917      	ldr	r1, [pc, #92]	; (8005ad0 <vTaskStartScheduler+0xd0>)
 8005a72:	9502      	str	r5, [sp, #8]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a74:	9e09      	ldr	r6, [sp, #36]	; 0x24
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a76:	f7ff fdbd 	bl	80055f4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7ff fd2e 	bl	80054dc <prvAddNewTaskToReadyList>
		return xReturn;
 8005a80:	9b08      	ldr	r3, [sp, #32]
		if( xIdleTaskHandle != NULL )
 8005a82:	b12b      	cbz	r3, 8005a90 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 8005a84:	f000 fd90 	bl	80065a8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005a88:	2801      	cmp	r0, #1
 8005a8a:	d00c      	beq.n	8005aa6 <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d001      	beq.n	8005a94 <vTaskStartScheduler+0x94>
}
 8005a90:	b00a      	add	sp, #40	; 0x28
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	e7fe      	b.n	8005aa4 <vTaskStartScheduler+0xa4>
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ab6:	4907      	ldr	r1, [pc, #28]	; (8005ad4 <vTaskStartScheduler+0xd4>)
		xSchedulerRunning = pdTRUE;
 8005ab8:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <vTaskStartScheduler+0xd8>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005aba:	4b08      	ldr	r3, [pc, #32]	; (8005adc <vTaskStartScheduler+0xdc>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8005abc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ac0:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8005ac2:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ac4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005ac6:	f000 fee9 	bl	800689c <xPortStartScheduler>
 8005aca:	e7e1      	b.n	8005a90 <vTaskStartScheduler+0x90>
 8005acc:	08005799 	.word	0x08005799
 8005ad0:	0800b100 	.word	0x0800b100
 8005ad4:	2000d0ec 	.word	0x2000d0ec
 8005ad8:	2000d108 	.word	0x2000d108
 8005adc:	2000d134 	.word	0x2000d134

08005ae0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005ae0:	4a02      	ldr	r2, [pc, #8]	; (8005aec <vTaskSuspendAll+0xc>)
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	2000d0b8 	.word	0x2000d0b8

08005af0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <xTaskGetTickCount+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000d134 	.word	0x2000d134

08005afc <xTaskIncrementTick>:
{
 8005afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <xTaskIncrementTick+0x12c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	b9cb      	cbnz	r3, 8005b3a <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b06:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <xTaskIncrementTick+0x130>)
 8005b08:	681e      	ldr	r6, [r3, #0]
 8005b0a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005b0c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b0e:	b30e      	cbz	r6, 8005b54 <xTaskIncrementTick+0x58>
 8005b10:	f8df b138 	ldr.w	fp, [pc, #312]	; 8005c4c <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b14:	f8db 2000 	ldr.w	r2, [fp]
 8005b18:	42b2      	cmp	r2, r6
 8005b1a:	d929      	bls.n	8005b70 <xTaskIncrementTick+0x74>
 8005b1c:	4f44      	ldr	r7, [pc, #272]	; (8005c30 <xTaskIncrementTick+0x134>)
 8005b1e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8005c50 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 8005b22:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b24:	f8d8 3000 	ldr.w	r3, [r8]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	bf28      	it	cs
 8005b36:	2501      	movcs	r5, #1
 8005b38:	e004      	b.n	8005b44 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8005b3a:	4a3e      	ldr	r2, [pc, #248]	; (8005c34 <xTaskIncrementTick+0x138>)
 8005b3c:	6813      	ldr	r3, [r2, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005b42:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8005b44:	4b3c      	ldr	r3, [pc, #240]	; (8005c38 <xTaskIncrementTick+0x13c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8005b48:	2b00      	cmp	r3, #0
}
 8005b4a:	bf0c      	ite	eq
 8005b4c:	4628      	moveq	r0, r5
 8005b4e:	2001      	movne	r0, #1
 8005b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005b54:	4c39      	ldr	r4, [pc, #228]	; (8005c3c <xTaskIncrementTick+0x140>)
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d048      	beq.n	8005bf0 <xTaskIncrementTick+0xf4>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	e7fe      	b.n	8005b6e <xTaskIncrementTick+0x72>
 8005b70:	4c32      	ldr	r4, [pc, #200]	; (8005c3c <xTaskIncrementTick+0x140>)
 8005b72:	4f2f      	ldr	r7, [pc, #188]	; (8005c30 <xTaskIncrementTick+0x134>)
 8005b74:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005c50 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 8005b78:	2500      	movs	r5, #0
 8005b7a:	e02d      	b.n	8005bd8 <xTaskIncrementTick+0xdc>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	68d2      	ldr	r2, [r2, #12]
 8005b80:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b84:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b88:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8005b8c:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b8e:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8005b90:	d32b      	bcc.n	8005bea <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b92:	f7fe ff93 	bl	8004abc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b96:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b9a:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b9e:	b109      	cbz	r1, 8005ba4 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	f7fe ff8c 	bl	8004abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <xTaskIncrementTick+0x144>)
 8005ba6:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	2101      	movs	r1, #1
 8005bae:	fa01 fc00 	lsl.w	ip, r1, r0
 8005bb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb6:	4651      	mov	r1, sl
 8005bb8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005bbc:	ea4c 0c03 	orr.w	ip, ip, r3
 8005bc0:	f8c2 c000 	str.w	ip, [r2]
 8005bc4:	f7fe ff50 	bl	8004a68 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc8:	f8d8 0000 	ldr.w	r0, [r8]
 8005bcc:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8005bd0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	bf28      	it	cs
 8005bd6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d1cd      	bne.n	8005b7c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	f8cb 2000 	str.w	r2, [fp]
					break;
 8005be8:	e79c      	b.n	8005b24 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 8005bea:	f8cb 1000 	str.w	r1, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bee:	e799      	b.n	8005b24 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <xTaskIncrementTick+0x148>)
 8005bf2:	6821      	ldr	r1, [r4, #0]
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <xTaskIncrementTick+0x14c>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	6020      	str	r0, [r4, #0]
 8005bfa:	6019      	str	r1, [r3, #0]
 8005bfc:	6813      	ldr	r3, [r2, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	b933      	cbnz	r3, 8005c16 <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c08:	f8df b040 	ldr.w	fp, [pc, #64]	; 8005c4c <xTaskIncrementTick+0x150>
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	f8cb 2000 	str.w	r2, [fp]
 8005c14:	e77e      	b.n	8005b14 <xTaskIncrementTick+0x18>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c16:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c18:	f8df b030 	ldr.w	fp, [pc, #48]	; 8005c4c <xTaskIncrementTick+0x150>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c1e:	68d2      	ldr	r2, [r2, #12]
 8005c20:	6852      	ldr	r2, [r2, #4]
 8005c22:	f8cb 2000 	str.w	r2, [fp]
 8005c26:	e775      	b.n	8005b14 <xTaskIncrementTick+0x18>
 8005c28:	2000d0b8 	.word	0x2000d0b8
 8005c2c:	2000d134 	.word	0x2000d134
 8005c30:	2000d020 	.word	0x2000d020
 8005c34:	2000d0b4 	.word	0x2000d0b4
 8005c38:	2000d138 	.word	0x2000d138
 8005c3c:	2000d018 	.word	0x2000d018
 8005c40:	2000d0c0 	.word	0x2000d0c0
 8005c44:	2000d01c 	.word	0x2000d01c
 8005c48:	2000d0f0 	.word	0x2000d0f0
 8005c4c:	2000d0ec 	.word	0x2000d0ec
 8005c50:	2000d014 	.word	0x2000d014

08005c54 <xTaskResumeAll>:
{
 8005c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8005c58:	4c38      	ldr	r4, [pc, #224]	; (8005d3c <xTaskResumeAll+0xe8>)
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	b943      	cbnz	r3, 8005c70 <xTaskResumeAll+0x1c>
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	e7fe      	b.n	8005c6e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8005c70:	f000 fd78 	bl	8006764 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	6824      	ldr	r4, [r4, #0]
 8005c7c:	bb7c      	cbnz	r4, 8005cde <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c7e:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <xTaskResumeAll+0xec>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	b363      	cbz	r3, 8005cde <xTaskResumeAll+0x8a>
 8005c84:	4d2f      	ldr	r5, [pc, #188]	; (8005d44 <xTaskResumeAll+0xf0>)
 8005c86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d5c <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 8005c8a:	4e2f      	ldr	r6, [pc, #188]	; (8005d48 <xTaskResumeAll+0xf4>)
 8005c8c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005d60 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c90:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8005d64 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c94:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 8005c98:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c9a:	b333      	cbz	r3, 8005cea <xTaskResumeAll+0x96>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005ca0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca2:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca6:	f104 0018 	add.w	r0, r4, #24
 8005caa:	f7fe ff07 	bl	8004abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7fe ff04 	bl	8004abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005cb6:	6832      	ldr	r2, [r6, #0]
 8005cb8:	fa07 f300 	lsl.w	r3, r7, r0
 8005cbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005cc8:	6033      	str	r3, [r6, #0]
 8005cca:	f7fe fecd 	bl	8004a68 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cce:	f8db 3000 	ldr.w	r3, [fp]
 8005cd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3dc      	bcc.n	8005c94 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 8005cda:	602f      	str	r7, [r5, #0]
 8005cdc:	e7da      	b.n	8005c94 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8005cde:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005ce0:	f000 fd62 	bl	80067a8 <vPortExitCritical>
}
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8005cea:	b13c      	cbz	r4, 8005cfc <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <xTaskResumeAll+0xf8>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	b9da      	cbnz	r2, 8005d2c <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf4:	4b16      	ldr	r3, [pc, #88]	; (8005d50 <xTaskResumeAll+0xfc>)
 8005cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfa:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cfc:	4e15      	ldr	r6, [pc, #84]	; (8005d54 <xTaskResumeAll+0x100>)
 8005cfe:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d00:	b13c      	cbz	r4, 8005d12 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8005d02:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005d04:	f7ff fefa 	bl	8005afc <xTaskIncrementTick>
 8005d08:	b100      	cbz	r0, 8005d0c <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8005d0a:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d0c:	3c01      	subs	r4, #1
 8005d0e:	d1f9      	bne.n	8005d04 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8005d10:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0e2      	beq.n	8005cde <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <xTaskResumeAll+0x104>)
 8005d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005d28:	2401      	movs	r4, #1
 8005d2a:	e7d9      	b.n	8005ce0 <xTaskResumeAll+0x8c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <xTaskResumeAll+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d32:	68d2      	ldr	r2, [r2, #12]
 8005d34:	6852      	ldr	r2, [r2, #4]
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	e7e0      	b.n	8005cfc <xTaskResumeAll+0xa8>
 8005d3a:	bf00      	nop
 8005d3c:	2000d0b8 	.word	0x2000d0b8
 8005d40:	2000d0ac 	.word	0x2000d0ac
 8005d44:	2000d138 	.word	0x2000d138
 8005d48:	2000d0c0 	.word	0x2000d0c0
 8005d4c:	2000d018 	.word	0x2000d018
 8005d50:	2000d0ec 	.word	0x2000d0ec
 8005d54:	2000d0b4 	.word	0x2000d0b4
 8005d58:	e000ed04 	.word	0xe000ed04
 8005d5c:	2000d0f4 	.word	0x2000d0f4
 8005d60:	2000d020 	.word	0x2000d020
 8005d64:	2000d014 	.word	0x2000d014

08005d68 <vTaskDelay>:
	{
 8005d68:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d6a:	b198      	cbz	r0, 8005d94 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <vTaskDelay+0x40>)
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	b141      	cbz	r1, 8005d84 <vTaskDelay+0x1c>
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	e7fe      	b.n	8005d82 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	3201      	adds	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d8a:	f7ff fcbf 	bl	800570c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005d8e:	f7ff ff61 	bl	8005c54 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005d92:	b938      	cbnz	r0, 8005da4 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <vTaskDelay+0x44>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
	}
 8005da4:	bd08      	pop	{r3, pc}
 8005da6:	bf00      	nop
 8005da8:	2000d0b8 	.word	0x2000d0b8
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <vTaskSwitchContext+0x68>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	b9eb      	cbnz	r3, 8005df2 <vTaskSwitchContext+0x42>
		xYieldPending = pdFALSE;
 8005db6:	4919      	ldr	r1, [pc, #100]	; (8005e1c <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db8:	4a19      	ldr	r2, [pc, #100]	; (8005e20 <vTaskSwitchContext+0x70>)
{
 8005dba:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 8005dbc:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dbe:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005dc0:	fab3 f383 	clz	r3, r3
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f1c3 031f 	rsb	r3, r3, #31
 8005dca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	4814      	ldr	r0, [pc, #80]	; (8005e24 <vTaskSwitchContext+0x74>)
 8005dd2:	5881      	ldr	r1, [r0, r2]
 8005dd4:	1884      	adds	r4, r0, r2
 8005dd6:	b181      	cbz	r1, 8005dfa <vTaskSwitchContext+0x4a>
 8005dd8:	6861      	ldr	r1, [r4, #4]
 8005dda:	3208      	adds	r2, #8
 8005ddc:	6849      	ldr	r1, [r1, #4]
 8005dde:	6061      	str	r1, [r4, #4]
 8005de0:	4402      	add	r2, r0
 8005de2:	4291      	cmp	r1, r2
 8005de4:	d012      	beq.n	8005e0c <vTaskSwitchContext+0x5c>
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <vTaskSwitchContext+0x78>)
 8005de8:	68ca      	ldr	r2, [r1, #12]
 8005dea:	601a      	str	r2, [r3, #0]
}
 8005dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df0:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <vTaskSwitchContext+0x6c>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	4770      	bx	lr
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	e7fe      	b.n	8005e0a <vTaskSwitchContext+0x5a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e0c:	2214      	movs	r2, #20
 8005e0e:	fb02 0303 	mla	r3, r2, r3, r0
 8005e12:	6849      	ldr	r1, [r1, #4]
 8005e14:	6059      	str	r1, [r3, #4]
 8005e16:	e7e6      	b.n	8005de6 <vTaskSwitchContext+0x36>
 8005e18:	2000d0b8 	.word	0x2000d0b8
 8005e1c:	2000d138 	.word	0x2000d138
 8005e20:	2000d0c0 	.word	0x2000d0c0
 8005e24:	2000d020 	.word	0x2000d020
 8005e28:	2000d014 	.word	0x2000d014

08005e2c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005e2c:	b940      	cbnz	r0, 8005e40 <vTaskPlaceOnEventList+0x14>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	e7fe      	b.n	8005e3e <vTaskPlaceOnEventList+0x12>
{
 8005e40:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e42:	4d1b      	ldr	r5, [pc, #108]	; (8005eb0 <vTaskPlaceOnEventList+0x84>)
 8005e44:	460c      	mov	r4, r1
 8005e46:	6829      	ldr	r1, [r5, #0]
 8005e48:	3118      	adds	r1, #24
 8005e4a:	f7fe fe1d 	bl	8004a88 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8005e4e:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <vTaskPlaceOnEventList+0x88>)
 8005e50:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e52:	6828      	ldr	r0, [r5, #0]
 8005e54:	3004      	adds	r0, #4
 8005e56:	f7fe fe31 	bl	8004abc <uxListRemove>
 8005e5a:	b940      	cbnz	r0, 8005e6e <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	4916      	ldr	r1, [pc, #88]	; (8005eb8 <vTaskPlaceOnEventList+0x8c>)
 8005e60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e62:	680b      	ldr	r3, [r1, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	4082      	lsls	r2, r0
 8005e68:	ea23 0302 	bic.w	r3, r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e6e:	1c63      	adds	r3, r4, #1
 8005e70:	d00f      	beq.n	8005e92 <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e72:	682b      	ldr	r3, [r5, #0]
 8005e74:	19a4      	adds	r4, r4, r6
 8005e76:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e78:	d212      	bcs.n	8005ea0 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <vTaskPlaceOnEventList+0x90>)
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	6829      	ldr	r1, [r5, #0]
 8005e80:	3104      	adds	r1, #4
 8005e82:	f7fe fe01 	bl	8004a88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e86:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <vTaskPlaceOnEventList+0x94>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8005e8c:	bf38      	it	cc
 8005e8e:	601c      	strcc	r4, [r3, #0]
}
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e92:	6829      	ldr	r1, [r5, #0]
 8005e94:	480b      	ldr	r0, [pc, #44]	; (8005ec4 <vTaskPlaceOnEventList+0x98>)
 8005e96:	3104      	adds	r1, #4
}
 8005e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9c:	f7fe bde4 	b.w	8004a68 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <vTaskPlaceOnEventList+0x9c>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	6829      	ldr	r1, [r5, #0]
}
 8005ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eaa:	3104      	adds	r1, #4
 8005eac:	f7fe bdec 	b.w	8004a88 <vListInsert>
 8005eb0:	2000d014 	.word	0x2000d014
 8005eb4:	2000d134 	.word	0x2000d134
 8005eb8:	2000d0c0 	.word	0x2000d0c0
 8005ebc:	2000d018 	.word	0x2000d018
 8005ec0:	2000d0ec 	.word	0x2000d0ec
 8005ec4:	2000d10c 	.word	0x2000d10c
 8005ec8:	2000d01c 	.word	0x2000d01c

08005ecc <vTaskPlaceOnUnorderedEventList>:
{
 8005ecc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
 8005ece:	b158      	cbz	r0, 8005ee8 <vTaskPlaceOnUnorderedEventList+0x1c>
	configASSERT( uxSchedulerSuspended != 0 );
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <vTaskPlaceOnUnorderedEventList+0x50>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	b98b      	cbnz	r3, 8005efa <vTaskPlaceOnUnorderedEventList+0x2e>
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	e7fe      	b.n	8005ee6 <vTaskPlaceOnUnorderedEventList+0x1a>
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	e7fe      	b.n	8005ef8 <vTaskPlaceOnUnorderedEventList+0x2c>
 8005efa:	4614      	mov	r4, r2
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005efc:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <vTaskPlaceOnUnorderedEventList+0x54>)
 8005efe:	460b      	mov	r3, r1
 8005f00:	6815      	ldr	r5, [r2, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f02:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f08:	61ab      	str	r3, [r5, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0a:	3118      	adds	r1, #24
 8005f0c:	f7fe fdac 	bl	8004a68 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f10:	4620      	mov	r0, r4
 8005f12:	2101      	movs	r1, #1
}
 8005f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f18:	f7ff bbf8 	b.w	800570c <prvAddCurrentTaskToDelayedList>
 8005f1c:	2000d0b8 	.word	0x2000d0b8
 8005f20:	2000d014 	.word	0x2000d014

08005f24 <vTaskPlaceOnEventListRestricted>:
	{
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d02c      	beq.n	8005f84 <vTaskPlaceOnEventListRestricted+0x60>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2a:	4d26      	ldr	r5, [pc, #152]	; (8005fc4 <vTaskPlaceOnEventListRestricted+0xa0>)
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	6829      	ldr	r1, [r5, #0]
 8005f30:	3118      	adds	r1, #24
 8005f32:	4617      	mov	r7, r2
 8005f34:	f7fe fd98 	bl	8004a68 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8005f38:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <vTaskPlaceOnEventListRestricted+0xa4>)
 8005f3a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f3c:	6828      	ldr	r0, [r5, #0]
 8005f3e:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8005f40:	b34f      	cbz	r7, 8005f96 <vTaskPlaceOnEventListRestricted+0x72>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f42:	f7fe fdbb 	bl	8004abc <uxListRemove>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d134      	bne.n	8005fb4 <vTaskPlaceOnEventListRestricted+0x90>
			xTicksToWait = portMAX_DELAY;
 8005f4a:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	491e      	ldr	r1, [pc, #120]	; (8005fcc <vTaskPlaceOnEventListRestricted+0xa8>)
 8005f52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f54:	680b      	ldr	r3, [r1, #0]
 8005f56:	2201      	movs	r2, #1
 8005f58:	4082      	lsls	r2, r0
 8005f5a:	ea23 0302 	bic.w	r3, r3, r2
 8005f5e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f60:	1c63      	adds	r3, r4, #1
 8005f62:	d025      	beq.n	8005fb0 <vTaskPlaceOnEventListRestricted+0x8c>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	1934      	adds	r4, r6, r4
 8005f68:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f6a:	d219      	bcs.n	8005fa0 <vTaskPlaceOnEventListRestricted+0x7c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f6c:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <vTaskPlaceOnEventListRestricted+0xac>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	6829      	ldr	r1, [r5, #0]
 8005f72:	3104      	adds	r1, #4
 8005f74:	f7fe fd88 	bl	8004a88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f78:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <vTaskPlaceOnEventListRestricted+0xb0>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4294      	cmp	r4, r2
 8005f7e:	d200      	bcs.n	8005f82 <vTaskPlaceOnEventListRestricted+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8005f80:	601c      	str	r4, [r3, #0]
	}
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	e7fe      	b.n	8005f94 <vTaskPlaceOnEventListRestricted+0x70>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f96:	f7fe fd91 	bl	8004abc <uxListRemove>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d1e2      	bne.n	8005f64 <vTaskPlaceOnEventListRestricted+0x40>
 8005f9e:	e7d6      	b.n	8005f4e <vTaskPlaceOnEventListRestricted+0x2a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <vTaskPlaceOnEventListRestricted+0xb4>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	6829      	ldr	r1, [r5, #0]
	}
 8005fa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005faa:	3104      	adds	r1, #4
 8005fac:	f7fe bd6c 	b.w	8004a88 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fb0:	2f00      	cmp	r7, #0
 8005fb2:	d0d7      	beq.n	8005f64 <vTaskPlaceOnEventListRestricted+0x40>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb4:	6829      	ldr	r1, [r5, #0]
 8005fb6:	4809      	ldr	r0, [pc, #36]	; (8005fdc <vTaskPlaceOnEventListRestricted+0xb8>)
 8005fb8:	3104      	adds	r1, #4
	}
 8005fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fbe:	f7fe bd53 	b.w	8004a68 <vListInsertEnd>
 8005fc2:	bf00      	nop
 8005fc4:	2000d014 	.word	0x2000d014
 8005fc8:	2000d134 	.word	0x2000d134
 8005fcc:	2000d0c0 	.word	0x2000d0c0
 8005fd0:	2000d018 	.word	0x2000d018
 8005fd4:	2000d0ec 	.word	0x2000d0ec
 8005fd8:	2000d01c 	.word	0x2000d01c
 8005fdc:	2000d10c 	.word	0x2000d10c

08005fe0 <xTaskRemoveFromEventList>:
{
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe2:	68c3      	ldr	r3, [r0, #12]
 8005fe4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005fe6:	b32c      	cbz	r4, 8006034 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fe8:	f104 0518 	add.w	r5, r4, #24
 8005fec:	4628      	mov	r0, r5
 8005fee:	f7fe fd65 	bl	8004abc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <xTaskRemoveFromEventList+0x70>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	bb33      	cbnz	r3, 8006046 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ff8:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ffa:	4d16      	ldr	r5, [pc, #88]	; (8006054 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7fe fd5d 	bl	8004abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006002:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006004:	682f      	ldr	r7, [r5, #0]
 8006006:	4814      	ldr	r0, [pc, #80]	; (8006058 <xTaskRemoveFromEventList+0x78>)
 8006008:	2301      	movs	r3, #1
 800600a:	4093      	lsls	r3, r2
 800600c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006010:	433b      	orrs	r3, r7
 8006012:	4631      	mov	r1, r6
 8006014:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	f7fe fd25 	bl	8004a68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <xTaskRemoveFromEventList+0x7c>)
 8006020:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006028:	bf83      	ittte	hi
 800602a:	4b0d      	ldrhi	r3, [pc, #52]	; (8006060 <xTaskRemoveFromEventList+0x80>)
 800602c:	2001      	movhi	r0, #1
 800602e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006030:	2000      	movls	r0, #0
}
 8006032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	e7fe      	b.n	8006044 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006046:	4629      	mov	r1, r5
 8006048:	4806      	ldr	r0, [pc, #24]	; (8006064 <xTaskRemoveFromEventList+0x84>)
 800604a:	f7fe fd0d 	bl	8004a68 <vListInsertEnd>
 800604e:	e7e6      	b.n	800601e <xTaskRemoveFromEventList+0x3e>
 8006050:	2000d0b8 	.word	0x2000d0b8
 8006054:	2000d0c0 	.word	0x2000d0c0
 8006058:	2000d020 	.word	0x2000d020
 800605c:	2000d014 	.word	0x2000d014
 8006060:	2000d138 	.word	0x2000d138
 8006064:	2000d0f4 	.word	0x2000d0f4

08006068 <vTaskRemoveFromUnorderedEventList>:
{
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800606a:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <vTaskRemoveFromUnorderedEventList+0x78>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	b943      	cbnz	r3, 8006082 <vTaskRemoveFromUnorderedEventList+0x1a>
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	e7fe      	b.n	8006080 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006082:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006084:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006088:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 800608a:	b304      	cbz	r4, 80060ce <vTaskRemoveFromUnorderedEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800608c:	1d27      	adds	r7, r4, #4
	( void ) uxListRemove( pxEventListItem );
 800608e:	f7fe fd15 	bl	8004abc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006092:	4e14      	ldr	r6, [pc, #80]	; (80060e4 <vTaskRemoveFromUnorderedEventList+0x7c>)
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006094:	4638      	mov	r0, r7
 8006096:	f7fe fd11 	bl	8004abc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800609a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800609c:	f8d6 c000 	ldr.w	ip, [r6]
 80060a0:	4811      	ldr	r0, [pc, #68]	; (80060e8 <vTaskRemoveFromUnorderedEventList+0x80>)
 80060a2:	2501      	movs	r5, #1
 80060a4:	fa05 f203 	lsl.w	r2, r5, r3
 80060a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060ac:	ea42 020c 	orr.w	r2, r2, ip
 80060b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80060b4:	4639      	mov	r1, r7
 80060b6:	6032      	str	r2, [r6, #0]
 80060b8:	f7fe fcd6 	bl	8004a68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <vTaskRemoveFromUnorderedEventList+0x84>)
 80060be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80060c6:	bf84      	itt	hi
 80060c8:	4b09      	ldrhi	r3, [pc, #36]	; (80060f0 <vTaskRemoveFromUnorderedEventList+0x88>)
 80060ca:	601d      	strhi	r5, [r3, #0]
}
 80060cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	e7fe      	b.n	80060de <vTaskRemoveFromUnorderedEventList+0x76>
 80060e0:	2000d0b8 	.word	0x2000d0b8
 80060e4:	2000d0c0 	.word	0x2000d0c0
 80060e8:	2000d020 	.word	0x2000d020
 80060ec:	2000d014 	.word	0x2000d014
 80060f0:	2000d138 	.word	0x2000d138

080060f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060f4:	4a03      	ldr	r2, [pc, #12]	; (8006104 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060f8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	2000d0f0 	.word	0x2000d0f0
 8006108:	2000d134 	.word	0x2000d134

0800610c <xTaskCheckForTimeOut>:
{
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800610e:	b340      	cbz	r0, 8006162 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 8006110:	b1f1      	cbz	r1, 8006150 <xTaskCheckForTimeOut+0x44>
 8006112:	460d      	mov	r5, r1
 8006114:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006116:	f000 fb25 	bl	8006764 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800611a:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006194 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 800611e:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006120:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8006122:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8006126:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006128:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 800612c:	d022      	beq.n	8006174 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800612e:	4918      	ldr	r1, [pc, #96]	; (8006190 <xTaskCheckForTimeOut+0x84>)
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	f8d1 e000 	ldr.w	lr, [r1]
 8006136:	4572      	cmp	r2, lr
 8006138:	d001      	beq.n	800613e <xTaskCheckForTimeOut+0x32>
 800613a:	42b7      	cmp	r7, r6
 800613c:	d925      	bls.n	800618a <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800613e:	4283      	cmp	r3, r0
 8006140:	d81a      	bhi.n	8006178 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006146:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8006148:	f000 fb2e 	bl	80067a8 <vPortExitCritical>
}
 800614c:	4628      	mov	r0, r5
 800614e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	e7fe      	b.n	8006160 <xTaskCheckForTimeOut+0x54>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	e7fe      	b.n	8006172 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 8006174:	2500      	movs	r5, #0
 8006176:	e7e7      	b.n	8006148 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006178:	6809      	ldr	r1, [r1, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800617a:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 800617e:	1a1b      	subs	r3, r3, r0
 8006180:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8006182:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006184:	e9c4 1200 	strd	r1, r2, [r4]
 8006188:	e7de      	b.n	8006148 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 800618a:	2501      	movs	r5, #1
 800618c:	e7dc      	b.n	8006148 <xTaskCheckForTimeOut+0x3c>
 800618e:	bf00      	nop
 8006190:	2000d0f0 	.word	0x2000d0f0
 8006194:	2000d134 	.word	0x2000d134

08006198 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006198:	4b01      	ldr	r3, [pc, #4]	; (80061a0 <vTaskMissedYield+0x8>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]
}
 800619e:	4770      	bx	lr
 80061a0:	2000d138 	.word	0x2000d138

080061a4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <xTaskGetSchedulerState+0x18>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	b133      	cbz	r3, 80061b8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <xTaskGetSchedulerState+0x1c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80061b0:	bf0c      	ite	eq
 80061b2:	2002      	moveq	r0, #2
 80061b4:	2000      	movne	r0, #0
 80061b6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061b8:	2001      	movs	r0, #1
	}
 80061ba:	4770      	bx	lr
 80061bc:	2000d108 	.word	0x2000d108
 80061c0:	2000d0b8 	.word	0x2000d0b8

080061c4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80061c4:	b168      	cbz	r0, 80061e2 <xTaskPriorityDisinherit+0x1e>
	{
 80061c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <xTaskPriorityDisinherit+0xa4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4283      	cmp	r3, r0
 80061ce:	d00a      	beq.n	80061e6 <xTaskPriorityDisinherit+0x22>
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	e7fe      	b.n	80061e0 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 80061e2:	2000      	movs	r0, #0
	}
 80061e4:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 80061e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e8:	b943      	cbnz	r3, 80061fc <xTaskPriorityDisinherit+0x38>
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	e7fe      	b.n	80061fa <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061fc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80061fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8006200:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006202:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006204:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006206:	d000      	beq.n	800620a <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006208:	b10b      	cbz	r3, 800620e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800620a:	2000      	movs	r0, #0
	}
 800620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800620e:	1d06      	adds	r6, r0, #4
 8006210:	4604      	mov	r4, r0
 8006212:	4630      	mov	r0, r6
 8006214:	f7fe fc52 	bl	8004abc <uxListRemove>
 8006218:	b1a8      	cbz	r0, 8006246 <xTaskPriorityDisinherit+0x82>
 800621a:	4814      	ldr	r0, [pc, #80]	; (800626c <xTaskPriorityDisinherit+0xa8>)
 800621c:	4b14      	ldr	r3, [pc, #80]	; (8006270 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800621e:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8006220:	681f      	ldr	r7, [r3, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006222:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006224:	2501      	movs	r5, #1
 8006226:	f04f 0c14 	mov.w	ip, #20
 800622a:	fb0c 0002 	mla	r0, ip, r2, r0
 800622e:	4631      	mov	r1, r6
 8006230:	fa05 f602 	lsl.w	r6, r5, r2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006234:	f1c2 0207 	rsb	r2, r2, #7
 8006238:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800623a:	433e      	orrs	r6, r7
 800623c:	601e      	str	r6, [r3, #0]
 800623e:	f7fe fc13 	bl	8004a68 <vListInsertEnd>
					xReturn = pdTRUE;
 8006242:	4628      	mov	r0, r5
	}
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006246:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006248:	4808      	ldr	r0, [pc, #32]	; (800626c <xTaskPriorityDisinherit+0xa8>)
 800624a:	2314      	movs	r3, #20
 800624c:	fb03 f301 	mul.w	r3, r3, r1
 8006250:	58c3      	ldr	r3, [r0, r3]
 8006252:	b10b      	cbz	r3, 8006258 <xTaskPriorityDisinherit+0x94>
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <xTaskPriorityDisinherit+0xac>)
 8006256:	e7e2      	b.n	800621e <xTaskPriorityDisinherit+0x5a>
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <xTaskPriorityDisinherit+0xac>)
 800625a:	2501      	movs	r5, #1
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	408d      	lsls	r5, r1
 8006260:	ea22 0205 	bic.w	r2, r2, r5
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e7da      	b.n	800621e <xTaskPriorityDisinherit+0x5a>
 8006268:	2000d014 	.word	0x2000d014
 800626c:	2000d020 	.word	0x2000d020
 8006270:	2000d0c0 	.word	0x2000d0c0

08006274 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <uxTaskResetEventItemValue+0x14>)
 8006276:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800627e:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006280:	f1c3 0307 	rsb	r3, r3, #7
 8006284:	6193      	str	r3, [r2, #24]
}
 8006286:	4770      	bx	lr
 8006288:	2000d014 	.word	0x2000d014

0800628c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800628c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006290:	4e21      	ldr	r6, [pc, #132]	; (8006318 <prvSwitchTimerLists+0x8c>)
	if( xTimerQueue != NULL )
 8006292:	4f22      	ldr	r7, [pc, #136]	; (800631c <prvSwitchTimerLists+0x90>)
{
 8006294:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006296:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800629a:	e00e      	b.n	80062ba <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800629c:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062a0:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a4:	1d25      	adds	r5, r4, #4
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7fe fc08 	bl	8004abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ac:	6a23      	ldr	r3, [r4, #32]
 80062ae:	4620      	mov	r0, r4
 80062b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80062b6:	075b      	lsls	r3, r3, #29
 80062b8:	d40a      	bmi.n	80062d0 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ba:	6833      	ldr	r3, [r6, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d1ec      	bne.n	800629c <prvSwitchTimerLists+0x10>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80062c2:	4a17      	ldr	r2, [pc, #92]	; (8006320 <prvSwitchTimerLists+0x94>)
 80062c4:	6811      	ldr	r1, [r2, #0]
 80062c6:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 80062c8:	6013      	str	r3, [r2, #0]
}
 80062ca:	b005      	add	sp, #20
 80062cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062d0:	69a3      	ldr	r3, [r4, #24]
 80062d2:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80062d4:	4599      	cmp	r9, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062d6:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 80062d8:	d317      	bcc.n	800630a <prvSwitchTimerLists+0x7e>
	if( xTimerQueue != NULL )
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	b163      	cbz	r3, 80062f8 <prvSwitchTimerLists+0x6c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062de:	e9cd 8900 	strd	r8, r9, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062e2:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062e4:	f7ff ff5e 	bl	80061a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062e8:	2300      	movs	r3, #0
 80062ea:	461a      	mov	r2, r3
 80062ec:	4669      	mov	r1, sp
 80062ee:	6838      	ldr	r0, [r7, #0]
 80062f0:	f7fe fcd8 	bl	8004ca4 <xQueueGenericSend>
				configASSERT( xResult );
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1e0      	bne.n	80062ba <prvSwitchTimerLists+0x2e>
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	e7fe      	b.n	8006308 <prvSwitchTimerLists+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800630a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800630c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800630e:	6830      	ldr	r0, [r6, #0]
 8006310:	f7fe fbba 	bl	8004a88 <vListInsert>
 8006314:	e7d1      	b.n	80062ba <prvSwitchTimerLists+0x2e>
 8006316:	bf00      	nop
 8006318:	2000d13c 	.word	0x2000d13c
 800631c:	2000d258 	.word	0x2000d258
 8006320:	2000d140 	.word	0x2000d140

08006324 <prvTimerTask>:
{
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	4f9a      	ldr	r7, [pc, #616]	; (8006594 <prvTimerTask+0x270>)
 800632a:	4e9b      	ldr	r6, [pc, #620]	; (8006598 <prvTimerTask+0x274>)
 800632c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 80065a4 <prvTimerTask+0x280>
 8006330:	4d9a      	ldr	r5, [pc, #616]	; (800659c <prvTimerTask+0x278>)
 8006332:	b08b      	sub	sp, #44	; 0x2c
		xNextExpireTime = ( TickType_t ) 0U;
 8006334:	f04f 0900 	mov.w	r9, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681c      	ldr	r4, [r3, #0]
 800633c:	2c00      	cmp	r4, #0
 800633e:	f000 80ab 	beq.w	8006498 <prvTimerTask+0x174>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f8d3 b000 	ldr.w	fp, [r3]
	vTaskSuspendAll();
 8006348:	f7ff fbca 	bl	8005ae0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800634c:	f7ff fbd0 	bl	8005af0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006350:	6832      	ldr	r2, [r6, #0]
 8006352:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8006354:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006356:	f0c0 80b1 	bcc.w	80064bc <prvTimerTask+0x198>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800635a:	4583      	cmp	fp, r0
	xLastTime = xTimeNow;
 800635c:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800635e:	f240 80b9 	bls.w	80064d4 <prvTimerTask+0x1b0>
 8006362:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006364:	ebab 010a 	sub.w	r1, fp, sl
 8006368:	6828      	ldr	r0, [r5, #0]
 800636a:	f7ff f851 	bl	8005410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800636e:	f7ff fc71 	bl	8005c54 <xTaskResumeAll>
 8006372:	b938      	cbnz	r0, 8006384 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8006374:	4b8a      	ldr	r3, [pc, #552]	; (80065a0 <prvTimerTask+0x27c>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006384:	2200      	movs	r2, #0
 8006386:	a902      	add	r1, sp, #8
 8006388:	6828      	ldr	r0, [r5, #0]
 800638a:	f7fe feb3 	bl	80050f4 <xQueueReceive>
 800638e:	2800      	cmp	r0, #0
 8006390:	d0d2      	beq.n	8006338 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	9c04      	ldr	r4, [sp, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da07      	bge.n	80063aa <prvTimerTask+0x86>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	9905      	ldr	r1, [sp, #20]
 800639e:	4620      	mov	r0, r4
 80063a0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063a2:	9b02      	ldr	r3, [sp, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dbed      	blt.n	8006384 <prvTimerTask+0x60>
 80063a8:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063aa:	6963      	ldr	r3, [r4, #20]
 80063ac:	b113      	cbz	r3, 80063b4 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ae:	1d20      	adds	r0, r4, #4
 80063b0:	f7fe fb84 	bl	8004abc <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80063b4:	f7ff fb9c 	bl	8005af0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80063b8:	6833      	ldr	r3, [r6, #0]
 80063ba:	4298      	cmp	r0, r3
 80063bc:	f0c0 8085 	bcc.w	80064ca <prvTimerTask+0x1a6>
			switch( xMessage.xMessageID )
 80063c0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80063c2:	6030      	str	r0, [r6, #0]
			switch( xMessage.xMessageID )
 80063c4:	2b09      	cmp	r3, #9
 80063c6:	d8dd      	bhi.n	8006384 <prvTimerTask+0x60>
 80063c8:	e8df f003 	tbb	[pc, r3]
 80063cc:	272e2e2e 	.word	0x272e2e2e
 80063d0:	2e2e050f 	.word	0x2e2e050f
 80063d4:	0f27      	.short	0x0f27
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80063da:	079a      	lsls	r2, r3, #30
 80063dc:	f140 809b 	bpl.w	8006516 <prvTimerTask+0x1f2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80063e8:	e7cc      	b.n	8006384 <prvTimerTask+0x60>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ea:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	61a3      	str	r3, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80bc 	beq.w	8006578 <prvTimerTask+0x254>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006400:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 8006402:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006404:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006406:	6124      	str	r4, [r4, #16]
 8006408:	f104 0104 	add.w	r1, r4, #4
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800640c:	bf94      	ite	ls
 800640e:	f8d8 0000 	ldrls.w	r0, [r8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	6838      	ldrhi	r0, [r7, #0]
 8006414:	f7fe fb38 	bl	8004a88 <vListInsert>
 8006418:	e7b4      	b.n	8006384 <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800641a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8006426:	e7ad      	b.n	8006384 <prvTimerTask+0x60>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006428:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	69a2      	ldr	r2, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006430:	6124      	str	r4, [r4, #16]
 8006432:	eb13 0c02 	adds.w	ip, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006436:	f041 0101 	orr.w	r1, r1, #1
 800643a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
 800643e:	bf2c      	ite	cs
 8006440:	2101      	movcs	r1, #1
 8006442:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 8006444:	4584      	cmp	ip, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006446:	f8c4 c004 	str.w	ip, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800644a:	d85b      	bhi.n	8006504 <prvTimerTask+0x1e0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644c:	1ac3      	subs	r3, r0, r3
 800644e:	429a      	cmp	r2, r3
 8006450:	d865      	bhi.n	800651e <prvTimerTask+0x1fa>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006452:	6a23      	ldr	r3, [r4, #32]
 8006454:	4620      	mov	r0, r4
 8006456:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006458:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800645c:	075b      	lsls	r3, r3, #29
 800645e:	d591      	bpl.n	8006384 <prvTimerTask+0x60>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	69a1      	ldr	r1, [r4, #24]
	if( xTimerQueue != NULL )
 8006464:	682a      	ldr	r2, [r5, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006466:	440b      	add	r3, r1
	if( xTimerQueue != NULL )
 8006468:	b16a      	cbz	r2, 8006486 <prvTimerTask+0x162>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800646a:	e9cd 9306 	strd	r9, r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800646e:	9408      	str	r4, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006470:	f7ff fe98 	bl	80061a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006474:	2300      	movs	r3, #0
 8006476:	461a      	mov	r2, r3
 8006478:	a906      	add	r1, sp, #24
 800647a:	6828      	ldr	r0, [r5, #0]
 800647c:	f7fe fc12 	bl	8004ca4 <xQueueGenericSend>
							configASSERT( xResult );
 8006480:	2800      	cmp	r0, #0
 8006482:	f47f af7f 	bne.w	8006384 <prvTimerTask+0x60>
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	e7fe      	b.n	8006496 <prvTimerTask+0x172>
	vTaskSuspendAll();
 8006498:	f7ff fb22 	bl	8005ae0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800649c:	f7ff fb28 	bl	8005af0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80064a0:	6832      	ldr	r2, [r6, #0]
 80064a2:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 80064a4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80064a6:	d809      	bhi.n	80064bc <prvTimerTask+0x198>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064a8:	f8d8 2000 	ldr.w	r2, [r8]
	xLastTime = xTimeNow;
 80064ac:	f8c6 a000 	str.w	sl, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	fab2 f282 	clz	r2, r2
		xNextExpireTime = ( TickType_t ) 0U;
 80064b6:	46a3      	mov	fp, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b8:	0952      	lsrs	r2, r2, #5
 80064ba:	e753      	b.n	8006364 <prvTimerTask+0x40>
		prvSwitchTimerLists();
 80064bc:	f7ff fee6 	bl	800628c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80064c0:	f8c6 a000 	str.w	sl, [r6]
			( void ) xTaskResumeAll();
 80064c4:	f7ff fbc6 	bl	8005c54 <xTaskResumeAll>
 80064c8:	e75c      	b.n	8006384 <prvTimerTask+0x60>
 80064ca:	9001      	str	r0, [sp, #4]
		prvSwitchTimerLists();
 80064cc:	f7ff fede 	bl	800628c <prvSwitchTimerLists>
 80064d0:	9801      	ldr	r0, [sp, #4]
 80064d2:	e775      	b.n	80063c0 <prvTimerTask+0x9c>
				( void ) xTaskResumeAll();
 80064d4:	f7ff fbbe 	bl	8005c54 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	68d2      	ldr	r2, [r2, #12]
 80064dc:	68d4      	ldr	r4, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064de:	1d21      	adds	r1, r4, #4
 80064e0:	4608      	mov	r0, r1
 80064e2:	9101      	str	r1, [sp, #4]
 80064e4:	f7fe faea 	bl	8004abc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064e8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80064ec:	9901      	ldr	r1, [sp, #4]
 80064ee:	f010 0f04 	tst.w	r0, #4
 80064f2:	d11a      	bne.n	800652a <prvTimerTask+0x206>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064f4:	f020 0001 	bic.w	r0, r0, #1
 80064f8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fc:	6a23      	ldr	r3, [r4, #32]
 80064fe:	4620      	mov	r0, r4
 8006500:	4798      	blx	r3
 8006502:	e73f      	b.n	8006384 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006504:	4283      	cmp	r3, r0
 8006506:	d901      	bls.n	800650c <prvTimerTask+0x1e8>
 8006508:	2900      	cmp	r1, #0
 800650a:	d0a2      	beq.n	8006452 <prvTimerTask+0x12e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650c:	1d21      	adds	r1, r4, #4
 800650e:	6838      	ldr	r0, [r7, #0]
 8006510:	f7fe faba 	bl	8004a88 <vListInsert>
 8006514:	e736      	b.n	8006384 <prvTimerTask+0x60>
							vPortFree( pxTimer );
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fb2a 	bl	8006b70 <vPortFree>
 800651c:	e732      	b.n	8006384 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800651e:	1d21      	adds	r1, r4, #4
 8006520:	f8d8 0000 	ldr.w	r0, [r8]
 8006524:	f7fe fab0 	bl	8004a88 <vListInsert>
 8006528:	e72c      	b.n	8006384 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800652a:	69a0      	ldr	r0, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800652c:	6124      	str	r4, [r4, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800652e:	eb0b 0300 	add.w	r3, fp, r0
	if( xNextExpiryTime <= xTimeNow )
 8006532:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006534:	6063      	str	r3, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006536:	d81b      	bhi.n	8006570 <prvTimerTask+0x24c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006538:	ebaa 030b 	sub.w	r3, sl, fp
 800653c:	4298      	cmp	r0, r3
 800653e:	d824      	bhi.n	800658a <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b163      	cbz	r3, 800655e <prvTimerTask+0x23a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006544:	e9cd 9b06 	strd	r9, fp, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006548:	9408      	str	r4, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800654a:	f7ff fe2b 	bl	80061a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800654e:	2300      	movs	r3, #0
 8006550:	461a      	mov	r2, r3
 8006552:	a906      	add	r1, sp, #24
 8006554:	6828      	ldr	r0, [r5, #0]
 8006556:	f7fe fba5 	bl	8004ca4 <xQueueGenericSend>
			configASSERT( xResult );
 800655a:	2800      	cmp	r0, #0
 800655c:	d1ce      	bne.n	80064fc <prvTimerTask+0x1d8>
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	e7fe      	b.n	800656e <prvTimerTask+0x24a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006570:	6838      	ldr	r0, [r7, #0]
 8006572:	f7fe fa89 	bl	8004a88 <vListInsert>
 8006576:	e7c1      	b.n	80064fc <prvTimerTask+0x1d8>
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	e7fe      	b.n	8006588 <prvTimerTask+0x264>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800658a:	f8d8 0000 	ldr.w	r0, [r8]
 800658e:	f7fe fa7b 	bl	8004a88 <vListInsert>
 8006592:	e7b3      	b.n	80064fc <prvTimerTask+0x1d8>
 8006594:	2000d13c 	.word	0x2000d13c
 8006598:	2000d20c 	.word	0x2000d20c
 800659c:	2000d258 	.word	0x2000d258
 80065a0:	e000ed04 	.word	0xe000ed04
 80065a4:	2000d140 	.word	0x2000d140

080065a8 <xTimerCreateTimerTask>:
{
 80065a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80065aa:	4c23      	ldr	r4, [pc, #140]	; (8006638 <xTimerCreateTimerTask+0x90>)
{
 80065ac:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 80065ae:	f000 f8d9 	bl	8006764 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80065b2:	6827      	ldr	r7, [r4, #0]
 80065b4:	b337      	cbz	r7, 8006604 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065b6:	f000 f8f7 	bl	80067a8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	b1cb      	cbz	r3, 80065f2 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065be:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065c0:	aa07      	add	r2, sp, #28
 80065c2:	a906      	add	r1, sp, #24
 80065c4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065c6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065ca:	f7fb f851 	bl	8001670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065ce:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 80065d2:	2102      	movs	r1, #2
 80065d4:	e9cd 1000 	strd	r1, r0, [sp]
 80065d8:	9302      	str	r3, [sp, #8]
 80065da:	9a07      	ldr	r2, [sp, #28]
 80065dc:	4917      	ldr	r1, [pc, #92]	; (800663c <xTimerCreateTimerTask+0x94>)
 80065de:	4818      	ldr	r0, [pc, #96]	; (8006640 <xTimerCreateTimerTask+0x98>)
 80065e0:	4623      	mov	r3, r4
 80065e2:	f7ff f929 	bl	8005838 <xTaskCreateStatic>
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <xTimerCreateTimerTask+0x9c>)
 80065e8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80065ea:	b110      	cbz	r0, 80065f2 <xTimerCreateTimerTask+0x4a>
}
 80065ec:	2001      	movs	r0, #1
 80065ee:	b009      	add	sp, #36	; 0x24
 80065f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	e7fe      	b.n	8006602 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8006604:	4e10      	ldr	r6, [pc, #64]	; (8006648 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8006606:	4d11      	ldr	r5, [pc, #68]	; (800664c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8006608:	4630      	mov	r0, r6
 800660a:	f7fe fa1d 	bl	8004a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800660e:	4628      	mov	r0, r5
 8006610:	f7fe fa1a 	bl	8004a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006614:	4a0e      	ldr	r2, [pc, #56]	; (8006650 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006616:	490f      	ldr	r1, [pc, #60]	; (8006654 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006618:	9700      	str	r7, [sp, #0]
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 800661c:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800661e:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <xTimerCreateTimerTask+0xb4>)
 8006622:	2110      	movs	r1, #16
 8006624:	200a      	movs	r0, #10
 8006626:	f7fe fae9 	bl	8004bfc <xQueueGenericCreateStatic>
 800662a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800662c:	2800      	cmp	r0, #0
 800662e:	d0c2      	beq.n	80065b6 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006630:	490b      	ldr	r1, [pc, #44]	; (8006660 <xTimerCreateTimerTask+0xb8>)
 8006632:	f7fe fec3 	bl	80053bc <vQueueAddToRegistry>
 8006636:	e7be      	b.n	80065b6 <xTimerCreateTimerTask+0xe>
 8006638:	2000d258 	.word	0x2000d258
 800663c:	0800b110 	.word	0x0800b110
 8006640:	08006325 	.word	0x08006325
 8006644:	2000d25c 	.word	0x2000d25c
 8006648:	2000d1e4 	.word	0x2000d1e4
 800664c:	2000d1f8 	.word	0x2000d1f8
 8006650:	2000d13c 	.word	0x2000d13c
 8006654:	2000d140 	.word	0x2000d140
 8006658:	2000d210 	.word	0x2000d210
 800665c:	2000d144 	.word	0x2000d144
 8006660:	0800b108 	.word	0x0800b108

08006664 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006664:	b510      	push	{r4, lr}
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006666:	4c08      	ldr	r4, [pc, #32]	; (8006688 <xTimerPendFunctionCallFromISR+0x24>)
	{
 8006668:	b084      	sub	sp, #16
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800666a:	e9cd 0101 	strd	r0, r1, [sp, #4]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800666e:	9203      	str	r2, [sp, #12]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	461a      	mov	r2, r3
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006674:	f06f 0401 	mvn.w	r4, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006678:	2300      	movs	r3, #0
 800667a:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800667c:	9400      	str	r4, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800667e:	f7fe fca3 	bl	8004fc8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8006682:	b004      	add	sp, #16
 8006684:	bd10      	pop	{r4, pc}
 8006686:	bf00      	nop
 8006688:	2000d258 	.word	0x2000d258

0800668c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800668c:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <prvTaskExitError+0x3c>)
 800668e:	681b      	ldr	r3, [r3, #0]
{
 8006690:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006692:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006694:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8006696:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006698:	d008      	beq.n	80066ac <prvTaskExitError+0x20>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	e7fe      	b.n	80066aa <prvTaskExitError+0x1e>
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066bc:	9b01      	ldr	r3, [sp, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0fc      	beq.n	80066bc <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066c2:	b002      	add	sp, #8
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000fac 	.word	0x20000fac

080066cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066cc:	4808      	ldr	r0, [pc, #32]	; (80066f0 <prvPortStartFirstTask+0x24>)
 80066ce:	6800      	ldr	r0, [r0, #0]
 80066d0:	6800      	ldr	r0, [r0, #0]
 80066d2:	f380 8808 	msr	MSP, r0
 80066d6:	f04f 0000 	mov.w	r0, #0
 80066da:	f380 8814 	msr	CONTROL, r0
 80066de:	b662      	cpsie	i
 80066e0:	b661      	cpsie	f
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	df00      	svc	0
 80066ec:	bf00      	nop
 80066ee:	0000      	.short	0x0000
 80066f0:	e000ed08 	.word	0xe000ed08

080066f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006704 <vPortEnableVFP+0x10>
 80066f8:	6801      	ldr	r1, [r0, #0]
 80066fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066fe:	6001      	str	r1, [r0, #0]
 8006700:	4770      	bx	lr
 8006702:	0000      	.short	0x0000
 8006704:	e000ed88 	.word	0xe000ed88

08006708 <pxPortInitialiseStack>:
{
 8006708:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800670a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800670e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006712:	4c07      	ldr	r4, [pc, #28]	; (8006730 <pxPortInitialiseStack+0x28>)
 8006714:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006718:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800671c:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006720:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006724:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006728:	bc30      	pop	{r4, r5}
 800672a:	3844      	subs	r0, #68	; 0x44
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	0800668d 	.word	0x0800668d
	...

08006740 <SVC_Handler>:
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	2000d014 	.word	0x2000d014

08006764 <vPortEnterCritical>:
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006774:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <vPortEnterCritical+0x3c>)
 8006776:	6813      	ldr	r3, [r2, #0]
 8006778:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800677a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800677c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800677e:	d000      	beq.n	8006782 <vPortEnterCritical+0x1e>
}
 8006780:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006782:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <vPortEnterCritical+0x40>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f013 0fff 	tst.w	r3, #255	; 0xff
 800678a:	d0f9      	beq.n	8006780 <vPortEnterCritical+0x1c>
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	e7fe      	b.n	800679c <vPortEnterCritical+0x38>
 800679e:	bf00      	nop
 80067a0:	20000fac 	.word	0x20000fac
 80067a4:	e000ed04 	.word	0xe000ed04

080067a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <vPortExitCritical+0x24>)
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	b943      	cbnz	r3, 80067c0 <vPortExitCritical+0x18>
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	e7fe      	b.n	80067be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80067c0:	3b01      	subs	r3, #1
 80067c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067c4:	b90b      	cbnz	r3, 80067ca <vPortExitCritical+0x22>
	__asm volatile
 80067c6:	f383 8811 	msr	BASEPRI, r3
}
 80067ca:	4770      	bx	lr
 80067cc:	20000fac 	.word	0x20000fac

080067d0 <PendSV_Handler>:
	__asm volatile
 80067d0:	f3ef 8009 	mrs	r0, PSP
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4b15      	ldr	r3, [pc, #84]	; (8006830 <pxCurrentTCBConst>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f01e 0f10 	tst.w	lr, #16
 80067e0:	bf08      	it	eq
 80067e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067f4:	f380 8811 	msr	BASEPRI, r0
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f7ff fad6 	bl	8005db0 <vTaskSwitchContext>
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f380 8811 	msr	BASEPRI, r0
 800680c:	bc09      	pop	{r0, r3}
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006816:	f01e 0f10 	tst.w	lr, #16
 800681a:	bf08      	it	eq
 800681c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006820:	f380 8809 	msr	PSP, r0
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst>:
 8006830:	2000d014 	.word	0x2000d014

08006834 <SysTick_Handler>:
{
 8006834:	b508      	push	{r3, lr}
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006846:	f7ff f959 	bl	8005afc <xTaskIncrementTick>
 800684a:	b118      	cbz	r0, 8006854 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800684c:	4b03      	ldr	r3, [pc, #12]	; (800685c <SysTick_Handler+0x28>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006854:	2300      	movs	r3, #0
 8006856:	f383 8811 	msr	BASEPRI, r3
}
 800685a:	bd08      	pop	{r3, pc}
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <vPortSetupTimerInterrupt>:
{
 8006860:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006864:	4d09      	ldr	r5, [pc, #36]	; (800688c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <vPortSetupTimerInterrupt+0x30>)
 8006868:	4c0a      	ldr	r4, [pc, #40]	; (8006894 <vPortSetupTimerInterrupt+0x34>)
 800686a:	480b      	ldr	r0, [pc, #44]	; (8006898 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800686c:	2100      	movs	r1, #0
 800686e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006870:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	fba4 1303 	umull	r1, r3, r4, r3
 8006878:	099b      	lsrs	r3, r3, #6
 800687a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800687c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800687e:	6003      	str	r3, [r0, #0]
}
 8006880:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006882:	6011      	str	r1, [r2, #0]
}
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	e000e010 	.word	0xe000e010
 800688c:	e000e018 	.word	0xe000e018
 8006890:	20000fa0 	.word	0x20000fa0
 8006894:	10624dd3 	.word	0x10624dd3
 8006898:	e000e014 	.word	0xe000e014

0800689c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800689c:	4b3a      	ldr	r3, [pc, #232]	; (8006988 <xPortStartScheduler+0xec>)
 800689e:	4a3b      	ldr	r2, [pc, #236]	; (800698c <xPortStartScheduler+0xf0>)
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	4291      	cmp	r1, r2
 80068a4:	d040      	beq.n	8006928 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b39      	ldr	r3, [pc, #228]	; (8006990 <xPortStartScheduler+0xf4>)
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d033      	beq.n	8006916 <xPortStartScheduler+0x7a>
{
 80068ae:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068b0:	4b38      	ldr	r3, [pc, #224]	; (8006994 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b2:	4839      	ldr	r0, [pc, #228]	; (8006998 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068b4:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b6:	4c39      	ldr	r4, [pc, #228]	; (800699c <xPortStartScheduler+0x100>)
{
 80068b8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ba:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068bc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068c0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068d2:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068d8:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068dc:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068de:	d511      	bpl.n	8006904 <xPortStartScheduler+0x68>
 80068e0:	2306      	movs	r3, #6
 80068e2:	e000      	b.n	80068e6 <xPortStartScheduler+0x4a>
 80068e4:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80068ea:	0052      	lsls	r2, r2, #1
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80068f6:	0612      	lsls	r2, r2, #24
 80068f8:	f103 31ff 	add.w	r1, r3, #4294967295
 80068fc:	d4f2      	bmi.n	80068e4 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068fe:	2b03      	cmp	r3, #3
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	d01a      	beq.n	800693a <xPortStartScheduler+0x9e>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	e7fe      	b.n	8006914 <xPortStartScheduler+0x78>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	e7fe      	b.n	8006926 <xPortStartScheduler+0x8a>
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	e7fe      	b.n	8006938 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800693a:	9901      	ldr	r1, [sp, #4]
 800693c:	4c15      	ldr	r4, [pc, #84]	; (8006994 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800693e:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006940:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006942:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006948:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800694a:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006952:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006954:	6813      	ldr	r3, [r2, #0]
 8006956:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800695a:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800695c:	f7ff ff80 	bl	8006860 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006960:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <xPortStartScheduler+0x108>)
 8006962:	2400      	movs	r4, #0
 8006964:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006966:	f7ff fec5 	bl	80066f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800696a:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <xPortStartScheduler+0x10c>)
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006972:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006974:	f7ff feaa 	bl	80066cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006978:	f7ff fa1a 	bl	8005db0 <vTaskSwitchContext>
	prvTaskExitError();
 800697c:	f7ff fe86 	bl	800668c <prvTaskExitError>
}
 8006980:	4620      	mov	r0, r4
 8006982:	b002      	add	sp, #8
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	e000ed00 	.word	0xe000ed00
 800698c:	410fc271 	.word	0x410fc271
 8006990:	410fc270 	.word	0x410fc270
 8006994:	e000e400 	.word	0xe000e400
 8006998:	2000d264 	.word	0x2000d264
 800699c:	2000d260 	.word	0x2000d260
 80069a0:	e000ed20 	.word	0xe000ed20
 80069a4:	20000fac 	.word	0x20000fac
 80069a8:	e000ef34 	.word	0xe000ef34

080069ac <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ac:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069b0:	2b0f      	cmp	r3, #15
 80069b2:	d90e      	bls.n	80069d2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069b4:	4910      	ldr	r1, [pc, #64]	; (80069f8 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069b6:	4a11      	ldr	r2, [pc, #68]	; (80069fc <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069b8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d908      	bls.n	80069d2 <vPortValidateInterruptPriority+0x26>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	e7fe      	b.n	80069d0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortValidateInterruptPriority+0x54>)
 80069d4:	4a0b      	ldr	r2, [pc, #44]	; (8006a04 <vPortValidateInterruptPriority+0x58>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069de:	4293      	cmp	r3, r2
 80069e0:	d908      	bls.n	80069f4 <vPortValidateInterruptPriority+0x48>
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	e7fe      	b.n	80069f2 <vPortValidateInterruptPriority+0x46>
	}
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	e000e3f0 	.word	0xe000e3f0
 80069fc:	2000d260 	.word	0x2000d260
 8006a00:	e000ed0c 	.word	0xe000ed0c
 8006a04:	2000d264 	.word	0x2000d264

08006a08 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a08:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <prvInsertBlockIntoFreeList+0x48>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4282      	cmp	r2, r0
 8006a10:	d201      	bcs.n	8006a16 <prvInsertBlockIntoFreeList+0xe>
 8006a12:	4613      	mov	r3, r2
 8006a14:	e7fa      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a16:	685c      	ldr	r4, [r3, #4]
 8006a18:	1919      	adds	r1, r3, r4
 8006a1a:	4288      	cmp	r0, r1
 8006a1c:	d103      	bne.n	8006a26 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a1e:	6841      	ldr	r1, [r0, #4]
 8006a20:	4421      	add	r1, r4
 8006a22:	6059      	str	r1, [r3, #4]
 8006a24:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a26:	6844      	ldr	r4, [r0, #4]
 8006a28:	1901      	adds	r1, r0, r4
 8006a2a:	428a      	cmp	r2, r1
 8006a2c:	d109      	bne.n	8006a42 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a2e:	4909      	ldr	r1, [pc, #36]	; (8006a54 <prvInsertBlockIntoFreeList+0x4c>)
 8006a30:	6809      	ldr	r1, [r1, #0]
 8006a32:	428a      	cmp	r2, r1
 8006a34:	d005      	beq.n	8006a42 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a36:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a3a:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3c:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a3e:	6041      	str	r1, [r0, #4]
 8006a40:	e000      	b.n	8006a44 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a42:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a44:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a46:	bf18      	it	ne
 8006a48:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	2000de30 	.word	0x2000de30
 8006a54:	2000d268 	.word	0x2000d268

08006a58 <pvPortMalloc>:
{
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 8006a5a:	4d3e      	ldr	r5, [pc, #248]	; (8006b54 <pvPortMalloc+0xfc>)
{
 8006a5c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006a5e:	f7ff f83f 	bl	8005ae0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006a62:	682a      	ldr	r2, [r5, #0]
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	d056      	beq.n	8006b16 <pvPortMalloc+0xbe>
 8006a68:	4b3b      	ldr	r3, [pc, #236]	; (8006b58 <pvPortMalloc+0x100>)
 8006a6a:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a6c:	422c      	tst	r4, r5
 8006a6e:	d14d      	bne.n	8006b0c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8006a70:	2c00      	cmp	r4, #0
 8006a72:	d04b      	beq.n	8006b0c <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8006a74:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a78:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a7a:	bf1c      	itt	ne
 8006a7c:	f023 0307 	bicne.w	r3, r3, #7
 8006a80:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d042      	beq.n	8006b0c <pvPortMalloc+0xb4>
 8006a86:	4f35      	ldr	r7, [pc, #212]	; (8006b5c <pvPortMalloc+0x104>)
 8006a88:	683e      	ldr	r6, [r7, #0]
 8006a8a:	429e      	cmp	r6, r3
 8006a8c:	d33e      	bcc.n	8006b0c <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 8006a8e:	4834      	ldr	r0, [pc, #208]	; (8006b60 <pvPortMalloc+0x108>)
 8006a90:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a92:	e006      	b.n	8006aa2 <pvPortMalloc+0x4a>
 8006a94:	f8d4 c000 	ldr.w	ip, [r4]
 8006a98:	f1bc 0f00 	cmp.w	ip, #0
 8006a9c:	d004      	beq.n	8006aa8 <pvPortMalloc+0x50>
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4664      	mov	r4, ip
 8006aa2:	6861      	ldr	r1, [r4, #4]
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d3f5      	bcc.n	8006a94 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 8006aa8:	4294      	cmp	r4, r2
 8006aaa:	d02f      	beq.n	8006b0c <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006aac:	6822      	ldr	r2, [r4, #0]
 8006aae:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ab0:	1aca      	subs	r2, r1, r3
 8006ab2:	2a10      	cmp	r2, #16
 8006ab4:	d910      	bls.n	8006ad8 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ab6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab8:	0741      	lsls	r1, r0, #29
 8006aba:	d008      	beq.n	8006ace <pvPortMalloc+0x76>
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	e7fe      	b.n	8006acc <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ace:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ad0:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ad2:	f7ff ff99 	bl	8006a08 <prvInsertBlockIntoFreeList>
 8006ad6:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ad8:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <pvPortMalloc+0x10c>)
 8006ada:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006adc:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8006ade:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ae0:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ae2:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8006ae4:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ae8:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aec:	bf38      	it	cc
 8006aee:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006af0:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 8006af2:	f7ff f8af 	bl	8005c54 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af6:	0763      	lsls	r3, r4, #29
 8006af8:	d00b      	beq.n	8006b12 <pvPortMalloc+0xba>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	e7fe      	b.n	8006b0a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8006b0c:	f7ff f8a2 	bl	8005c54 <xTaskResumeAll>
 8006b10:	2400      	movs	r4, #0
}
 8006b12:	4620      	mov	r0, r4
 8006b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8006b18:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b1a:	4911      	ldr	r1, [pc, #68]	; (8006b60 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	4f11      	ldr	r7, [pc, #68]	; (8006b64 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b1e:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b20:	bf18      	it	ne
 8006b22:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b24:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b28:	bf18      	it	ne
 8006b2a:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b2e:	4e0b      	ldr	r6, [pc, #44]	; (8006b5c <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 8006b30:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b32:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b34:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b36:	4d08      	ldr	r5, [pc, #32]	; (8006b58 <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b38:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b40:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 8006b44:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b48:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b4a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b4c:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b50:	460d      	mov	r5, r1
 8006b52:	e78b      	b.n	8006a6c <pvPortMalloc+0x14>
 8006b54:	2000d268 	.word	0x2000d268
 8006b58:	2000de24 	.word	0x2000de24
 8006b5c:	2000de28 	.word	0x2000de28
 8006b60:	2000de30 	.word	0x2000de30
 8006b64:	2000de2c 	.word	0x2000de2c
 8006b68:	2000d26c 	.word	0x2000d26c
 8006b6c:	2000de1c 	.word	0x2000de1c

08006b70 <vPortFree>:
	if( pv != NULL )
 8006b70:	b1d0      	cbz	r0, 8006ba8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b72:	4a19      	ldr	r2, [pc, #100]	; (8006bd8 <vPortFree+0x68>)
 8006b74:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	4213      	tst	r3, r2
 8006b7c:	d108      	bne.n	8006b90 <vPortFree+0x20>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	e7fe      	b.n	8006b8e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b90:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006b94:	b149      	cbz	r1, 8006baa <vPortFree+0x3a>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	e7fe      	b.n	8006ba6 <vPortFree+0x36>
 8006ba8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006baa:	ea23 0302 	bic.w	r3, r3, r2
{
 8006bae:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bb0:	f840 3c04 	str.w	r3, [r0, #-4]
 8006bb4:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8006bb6:	f7fe ff93 	bl	8005ae0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <vPortFree+0x6c>)
 8006bbc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006bc0:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bc2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bc6:	440b      	add	r3, r1
 8006bc8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bca:	f7ff ff1d 	bl	8006a08 <prvInsertBlockIntoFreeList>
}
 8006bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006bd2:	f7ff b83f 	b.w	8005c54 <xTaskResumeAll>
 8006bd6:	bf00      	nop
 8006bd8:	2000de24 	.word	0x2000de24
 8006bdc:	2000de28 	.word	0x2000de28

08006be0 <atof>:
 8006be0:	2100      	movs	r1, #0
 8006be2:	f001 bcc5 	b.w	8008570 <strtod>
	...

08006be8 <__errno>:
 8006be8:	4b01      	ldr	r3, [pc, #4]	; (8006bf0 <__errno+0x8>)
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000fb0 	.word	0x20000fb0

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4e0d      	ldr	r6, [pc, #52]	; (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	; (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1ba4      	subs	r4, r4, r6
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2500      	movs	r5, #0
 8006c00:	42a5      	cmp	r5, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4e0b      	ldr	r6, [pc, #44]	; (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	; (8006c38 <__libc_init_array+0x44>)
 8006c08:	f004 f940 	bl	800ae8c <_init>
 8006c0c:	1ba4      	subs	r4, r4, r6
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2500      	movs	r5, #0
 8006c12:	42a5      	cmp	r5, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c1c:	4798      	blx	r3
 8006c1e:	3501      	adds	r5, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c26:	4798      	blx	r3
 8006c28:	3501      	adds	r5, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	0800b3dc 	.word	0x0800b3dc
 8006c30:	0800b3dc 	.word	0x0800b3dc
 8006c34:	0800b3dc 	.word	0x0800b3dc
 8006c38:	0800b3e0 	.word	0x0800b3e0

08006c3c <memcpy>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	1e43      	subs	r3, r0, #1
 8006c40:	440a      	add	r2, r1
 8006c42:	4291      	cmp	r1, r2
 8006c44:	d100      	bne.n	8006c48 <memcpy+0xc>
 8006c46:	bd10      	pop	{r4, pc}
 8006c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c50:	e7f7      	b.n	8006c42 <memcpy+0x6>

08006c52 <memset>:
 8006c52:	4402      	add	r2, r0
 8006c54:	4603      	mov	r3, r0
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d100      	bne.n	8006c5c <memset+0xa>
 8006c5a:	4770      	bx	lr
 8006c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c60:	e7f9      	b.n	8006c56 <memset+0x4>

08006c62 <__cvt>:
 8006c62:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c66:	ec55 4b10 	vmov	r4, r5, d0
 8006c6a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006c6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	460e      	mov	r6, r1
 8006c74:	4691      	mov	r9, r2
 8006c76:	4619      	mov	r1, r3
 8006c78:	bfb8      	it	lt
 8006c7a:	4622      	movlt	r2, r4
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	f027 0720 	bic.w	r7, r7, #32
 8006c82:	bfbb      	ittet	lt
 8006c84:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c88:	461d      	movlt	r5, r3
 8006c8a:	2300      	movge	r3, #0
 8006c8c:	232d      	movlt	r3, #45	; 0x2d
 8006c8e:	bfb8      	it	lt
 8006c90:	4614      	movlt	r4, r2
 8006c92:	2f46      	cmp	r7, #70	; 0x46
 8006c94:	700b      	strb	r3, [r1, #0]
 8006c96:	d004      	beq.n	8006ca2 <__cvt+0x40>
 8006c98:	2f45      	cmp	r7, #69	; 0x45
 8006c9a:	d100      	bne.n	8006c9e <__cvt+0x3c>
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	e000      	b.n	8006ca4 <__cvt+0x42>
 8006ca2:	2103      	movs	r1, #3
 8006ca4:	ab03      	add	r3, sp, #12
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	ab02      	add	r3, sp, #8
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4632      	mov	r2, r6
 8006cae:	4653      	mov	r3, sl
 8006cb0:	ec45 4b10 	vmov	d0, r4, r5
 8006cb4:	f001 fd8c 	bl	80087d0 <_dtoa_r>
 8006cb8:	2f47      	cmp	r7, #71	; 0x47
 8006cba:	4680      	mov	r8, r0
 8006cbc:	d102      	bne.n	8006cc4 <__cvt+0x62>
 8006cbe:	f019 0f01 	tst.w	r9, #1
 8006cc2:	d026      	beq.n	8006d12 <__cvt+0xb0>
 8006cc4:	2f46      	cmp	r7, #70	; 0x46
 8006cc6:	eb08 0906 	add.w	r9, r8, r6
 8006cca:	d111      	bne.n	8006cf0 <__cvt+0x8e>
 8006ccc:	f898 3000 	ldrb.w	r3, [r8]
 8006cd0:	2b30      	cmp	r3, #48	; 0x30
 8006cd2:	d10a      	bne.n	8006cea <__cvt+0x88>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce0:	b918      	cbnz	r0, 8006cea <__cvt+0x88>
 8006ce2:	f1c6 0601 	rsb	r6, r6, #1
 8006ce6:	f8ca 6000 	str.w	r6, [sl]
 8006cea:	f8da 3000 	ldr.w	r3, [sl]
 8006cee:	4499      	add	r9, r3
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cfc:	b938      	cbnz	r0, 8006d0e <__cvt+0xac>
 8006cfe:	2230      	movs	r2, #48	; 0x30
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	454b      	cmp	r3, r9
 8006d04:	d205      	bcs.n	8006d12 <__cvt+0xb0>
 8006d06:	1c59      	adds	r1, r3, #1
 8006d08:	9103      	str	r1, [sp, #12]
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	e7f8      	b.n	8006d00 <__cvt+0x9e>
 8006d0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d16:	eba3 0308 	sub.w	r3, r3, r8
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	b004      	add	sp, #16
 8006d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006d24 <__exponent>:
 8006d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d26:	2900      	cmp	r1, #0
 8006d28:	4604      	mov	r4, r0
 8006d2a:	bfba      	itte	lt
 8006d2c:	4249      	neglt	r1, r1
 8006d2e:	232d      	movlt	r3, #45	; 0x2d
 8006d30:	232b      	movge	r3, #43	; 0x2b
 8006d32:	2909      	cmp	r1, #9
 8006d34:	f804 2b02 	strb.w	r2, [r4], #2
 8006d38:	7043      	strb	r3, [r0, #1]
 8006d3a:	dd20      	ble.n	8006d7e <__exponent+0x5a>
 8006d3c:	f10d 0307 	add.w	r3, sp, #7
 8006d40:	461f      	mov	r7, r3
 8006d42:	260a      	movs	r6, #10
 8006d44:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d48:	fb06 1115 	mls	r1, r6, r5, r1
 8006d4c:	3130      	adds	r1, #48	; 0x30
 8006d4e:	2d09      	cmp	r5, #9
 8006d50:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d54:	f103 32ff 	add.w	r2, r3, #4294967295
 8006d58:	4629      	mov	r1, r5
 8006d5a:	dc09      	bgt.n	8006d70 <__exponent+0x4c>
 8006d5c:	3130      	adds	r1, #48	; 0x30
 8006d5e:	3b02      	subs	r3, #2
 8006d60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d64:	42bb      	cmp	r3, r7
 8006d66:	4622      	mov	r2, r4
 8006d68:	d304      	bcc.n	8006d74 <__exponent+0x50>
 8006d6a:	1a10      	subs	r0, r2, r0
 8006d6c:	b003      	add	sp, #12
 8006d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d70:	4613      	mov	r3, r2
 8006d72:	e7e7      	b.n	8006d44 <__exponent+0x20>
 8006d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d78:	f804 2b01 	strb.w	r2, [r4], #1
 8006d7c:	e7f2      	b.n	8006d64 <__exponent+0x40>
 8006d7e:	2330      	movs	r3, #48	; 0x30
 8006d80:	4419      	add	r1, r3
 8006d82:	7083      	strb	r3, [r0, #2]
 8006d84:	1d02      	adds	r2, r0, #4
 8006d86:	70c1      	strb	r1, [r0, #3]
 8006d88:	e7ef      	b.n	8006d6a <__exponent+0x46>
	...

08006d8c <_printf_float>:
 8006d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d90:	b08d      	sub	sp, #52	; 0x34
 8006d92:	460c      	mov	r4, r1
 8006d94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006d98:	4616      	mov	r6, r2
 8006d9a:	461f      	mov	r7, r3
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	f002 fdfb 	bl	8009998 <_localeconv_r>
 8006da2:	6803      	ldr	r3, [r0, #0]
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7f9 fa12 	bl	80001d0 <strlen>
 8006dac:	2300      	movs	r3, #0
 8006dae:	930a      	str	r3, [sp, #40]	; 0x28
 8006db0:	f8d8 3000 	ldr.w	r3, [r8]
 8006db4:	9005      	str	r0, [sp, #20]
 8006db6:	3307      	adds	r3, #7
 8006db8:	f023 0307 	bic.w	r3, r3, #7
 8006dbc:	f103 0208 	add.w	r2, r3, #8
 8006dc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006dc4:	f8d4 b000 	ldr.w	fp, [r4]
 8006dc8:	f8c8 2000 	str.w	r2, [r8]
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006dd4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ddc:	9307      	str	r3, [sp, #28]
 8006dde:	f8cd 8018 	str.w	r8, [sp, #24]
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295
 8006de6:	4ba7      	ldr	r3, [pc, #668]	; (8007084 <_printf_float+0x2f8>)
 8006de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dec:	f7f9 fe9e 	bl	8000b2c <__aeabi_dcmpun>
 8006df0:	bb70      	cbnz	r0, 8006e50 <_printf_float+0xc4>
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295
 8006df6:	4ba3      	ldr	r3, [pc, #652]	; (8007084 <_printf_float+0x2f8>)
 8006df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dfc:	f7f9 fe78 	bl	8000af0 <__aeabi_dcmple>
 8006e00:	bb30      	cbnz	r0, 8006e50 <_printf_float+0xc4>
 8006e02:	2200      	movs	r2, #0
 8006e04:	2300      	movs	r3, #0
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fe67 	bl	8000adc <__aeabi_dcmplt>
 8006e0e:	b110      	cbz	r0, 8006e16 <_printf_float+0x8a>
 8006e10:	232d      	movs	r3, #45	; 0x2d
 8006e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e16:	4a9c      	ldr	r2, [pc, #624]	; (8007088 <_printf_float+0x2fc>)
 8006e18:	4b9c      	ldr	r3, [pc, #624]	; (800708c <_printf_float+0x300>)
 8006e1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006e1e:	bf8c      	ite	hi
 8006e20:	4690      	movhi	r8, r2
 8006e22:	4698      	movls	r8, r3
 8006e24:	2303      	movs	r3, #3
 8006e26:	f02b 0204 	bic.w	r2, fp, #4
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	6022      	str	r2, [r4, #0]
 8006e2e:	f04f 0900 	mov.w	r9, #0
 8006e32:	9700      	str	r7, [sp, #0]
 8006e34:	4633      	mov	r3, r6
 8006e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e38:	4621      	mov	r1, r4
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f000 f9e6 	bl	800720c <_printf_common>
 8006e40:	3001      	adds	r0, #1
 8006e42:	f040 808d 	bne.w	8006f60 <_printf_float+0x1d4>
 8006e46:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4a:	b00d      	add	sp, #52	; 0x34
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	4640      	mov	r0, r8
 8006e56:	4649      	mov	r1, r9
 8006e58:	f7f9 fe68 	bl	8000b2c <__aeabi_dcmpun>
 8006e5c:	b110      	cbz	r0, 8006e64 <_printf_float+0xd8>
 8006e5e:	4a8c      	ldr	r2, [pc, #560]	; (8007090 <_printf_float+0x304>)
 8006e60:	4b8c      	ldr	r3, [pc, #560]	; (8007094 <_printf_float+0x308>)
 8006e62:	e7da      	b.n	8006e1a <_printf_float+0x8e>
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	1c4b      	adds	r3, r1, #1
 8006e68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006e6c:	a80a      	add	r0, sp, #40	; 0x28
 8006e6e:	d13e      	bne.n	8006eee <_printf_float+0x162>
 8006e70:	2306      	movs	r3, #6
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	2300      	movs	r3, #0
 8006e76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006e7a:	ab09      	add	r3, sp, #36	; 0x24
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	ec49 8b10 	vmov	d0, r8, r9
 8006e82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e86:	6022      	str	r2, [r4, #0]
 8006e88:	f8cd a004 	str.w	sl, [sp, #4]
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f7ff fee7 	bl	8006c62 <__cvt>
 8006e94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006e98:	2b47      	cmp	r3, #71	; 0x47
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	d109      	bne.n	8006eb2 <_printf_float+0x126>
 8006e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea0:	1cd8      	adds	r0, r3, #3
 8006ea2:	db02      	blt.n	8006eaa <_printf_float+0x11e>
 8006ea4:	6862      	ldr	r2, [r4, #4]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	dd47      	ble.n	8006f3a <_printf_float+0x1ae>
 8006eaa:	f1aa 0a02 	sub.w	sl, sl, #2
 8006eae:	fa5f fa8a 	uxtb.w	sl, sl
 8006eb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eb8:	d824      	bhi.n	8006f04 <_printf_float+0x178>
 8006eba:	3901      	subs	r1, #1
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ec2:	9109      	str	r1, [sp, #36]	; 0x24
 8006ec4:	f7ff ff2e 	bl	8006d24 <__exponent>
 8006ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eca:	1813      	adds	r3, r2, r0
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	4681      	mov	r9, r0
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	dc02      	bgt.n	8006eda <_printf_float+0x14e>
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	07d1      	lsls	r1, r2, #31
 8006ed8:	d501      	bpl.n	8006ede <_printf_float+0x152>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0a5      	beq.n	8006e32 <_printf_float+0xa6>
 8006ee6:	232d      	movs	r3, #45	; 0x2d
 8006ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eec:	e7a1      	b.n	8006e32 <_printf_float+0xa6>
 8006eee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006ef2:	f000 8177 	beq.w	80071e4 <_printf_float+0x458>
 8006ef6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006efa:	d1bb      	bne.n	8006e74 <_printf_float+0xe8>
 8006efc:	2900      	cmp	r1, #0
 8006efe:	d1b9      	bne.n	8006e74 <_printf_float+0xe8>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e7b6      	b.n	8006e72 <_printf_float+0xe6>
 8006f04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006f08:	d119      	bne.n	8006f3e <_printf_float+0x1b2>
 8006f0a:	2900      	cmp	r1, #0
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	dd0c      	ble.n	8006f2a <_printf_float+0x19e>
 8006f10:	6121      	str	r1, [r4, #16]
 8006f12:	b913      	cbnz	r3, 8006f1a <_printf_float+0x18e>
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	07d2      	lsls	r2, r2, #31
 8006f18:	d502      	bpl.n	8006f20 <_printf_float+0x194>
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	440b      	add	r3, r1
 8006f1e:	6123      	str	r3, [r4, #16]
 8006f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f22:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f24:	f04f 0900 	mov.w	r9, #0
 8006f28:	e7d9      	b.n	8006ede <_printf_float+0x152>
 8006f2a:	b913      	cbnz	r3, 8006f32 <_printf_float+0x1a6>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	07d0      	lsls	r0, r2, #31
 8006f30:	d501      	bpl.n	8006f36 <_printf_float+0x1aa>
 8006f32:	3302      	adds	r3, #2
 8006f34:	e7f3      	b.n	8006f1e <_printf_float+0x192>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e7f1      	b.n	8006f1e <_printf_float+0x192>
 8006f3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006f3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f42:	4293      	cmp	r3, r2
 8006f44:	db05      	blt.n	8006f52 <_printf_float+0x1c6>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	07d1      	lsls	r1, r2, #31
 8006f4c:	d5e8      	bpl.n	8006f20 <_printf_float+0x194>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7e5      	b.n	8006f1e <_printf_float+0x192>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bfd4      	ite	le
 8006f56:	f1c3 0302 	rsble	r3, r3, #2
 8006f5a:	2301      	movgt	r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	e7de      	b.n	8006f1e <_printf_float+0x192>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	055a      	lsls	r2, r3, #21
 8006f64:	d407      	bmi.n	8006f76 <_printf_float+0x1ea>
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	d12b      	bne.n	8006fcc <_printf_float+0x240>
 8006f74:	e767      	b.n	8006e46 <_printf_float+0xba>
 8006f76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f7a:	f240 80dc 	bls.w	8007136 <_printf_float+0x3aa>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2300      	movs	r3, #0
 8006f82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f86:	f7f9 fd9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d033      	beq.n	8006ff6 <_printf_float+0x26a>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4a41      	ldr	r2, [pc, #260]	; (8007098 <_printf_float+0x30c>)
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f af54 	beq.w	8006e46 <_printf_float+0xba>
 8006f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	db02      	blt.n	8006fac <_printf_float+0x220>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	07d8      	lsls	r0, r3, #31
 8006faa:	d50f      	bpl.n	8006fcc <_printf_float+0x240>
 8006fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f af45 	beq.w	8006e46 <_printf_float+0xba>
 8006fbc:	f04f 0800 	mov.w	r8, #0
 8006fc0:	f104 091a 	add.w	r9, r4, #26
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	dc09      	bgt.n	8006fe0 <_printf_float+0x254>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	079b      	lsls	r3, r3, #30
 8006fd0:	f100 8103 	bmi.w	80071da <_printf_float+0x44e>
 8006fd4:	68e0      	ldr	r0, [r4, #12]
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	4298      	cmp	r0, r3
 8006fda:	bfb8      	it	lt
 8006fdc:	4618      	movlt	r0, r3
 8006fde:	e734      	b.n	8006e4a <_printf_float+0xbe>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	464a      	mov	r2, r9
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f af2b 	beq.w	8006e46 <_printf_float+0xba>
 8006ff0:	f108 0801 	add.w	r8, r8, #1
 8006ff4:	e7e6      	b.n	8006fc4 <_printf_float+0x238>
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dc2b      	bgt.n	8007054 <_printf_float+0x2c8>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4a26      	ldr	r2, [pc, #152]	; (8007098 <_printf_float+0x30c>)
 8007000:	4631      	mov	r1, r6
 8007002:	4628      	mov	r0, r5
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	f43f af1d 	beq.w	8006e46 <_printf_float+0xba>
 800700c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700e:	b923      	cbnz	r3, 800701a <_printf_float+0x28e>
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	b913      	cbnz	r3, 800701a <_printf_float+0x28e>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	07d9      	lsls	r1, r3, #31
 8007018:	d5d8      	bpl.n	8006fcc <_printf_float+0x240>
 800701a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	47b8      	blx	r7
 8007024:	3001      	adds	r0, #1
 8007026:	f43f af0e 	beq.w	8006e46 <_printf_float+0xba>
 800702a:	f04f 0900 	mov.w	r9, #0
 800702e:	f104 0a1a 	add.w	sl, r4, #26
 8007032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007034:	425b      	negs	r3, r3
 8007036:	454b      	cmp	r3, r9
 8007038:	dc01      	bgt.n	800703e <_printf_float+0x2b2>
 800703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703c:	e794      	b.n	8006f68 <_printf_float+0x1dc>
 800703e:	2301      	movs	r3, #1
 8007040:	4652      	mov	r2, sl
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	f43f aefc 	beq.w	8006e46 <_printf_float+0xba>
 800704e:	f109 0901 	add.w	r9, r9, #1
 8007052:	e7ee      	b.n	8007032 <_printf_float+0x2a6>
 8007054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007058:	429a      	cmp	r2, r3
 800705a:	bfa8      	it	ge
 800705c:	461a      	movge	r2, r3
 800705e:	2a00      	cmp	r2, #0
 8007060:	4691      	mov	r9, r2
 8007062:	dd07      	ble.n	8007074 <_printf_float+0x2e8>
 8007064:	4613      	mov	r3, r2
 8007066:	4631      	mov	r1, r6
 8007068:	4642      	mov	r2, r8
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f aee9 	beq.w	8006e46 <_printf_float+0xba>
 8007074:	f104 031a 	add.w	r3, r4, #26
 8007078:	f04f 0b00 	mov.w	fp, #0
 800707c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007080:	9306      	str	r3, [sp, #24]
 8007082:	e015      	b.n	80070b0 <_printf_float+0x324>
 8007084:	7fefffff 	.word	0x7fefffff
 8007088:	0800b11c 	.word	0x0800b11c
 800708c:	0800b118 	.word	0x0800b118
 8007090:	0800b124 	.word	0x0800b124
 8007094:	0800b120 	.word	0x0800b120
 8007098:	0800b3ca 	.word	0x0800b3ca
 800709c:	2301      	movs	r3, #1
 800709e:	9a06      	ldr	r2, [sp, #24]
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f aecd 	beq.w	8006e46 <_printf_float+0xba>
 80070ac:	f10b 0b01 	add.w	fp, fp, #1
 80070b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80070b4:	ebaa 0309 	sub.w	r3, sl, r9
 80070b8:	455b      	cmp	r3, fp
 80070ba:	dcef      	bgt.n	800709c <_printf_float+0x310>
 80070bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c0:	429a      	cmp	r2, r3
 80070c2:	44d0      	add	r8, sl
 80070c4:	db15      	blt.n	80070f2 <_printf_float+0x366>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	07da      	lsls	r2, r3, #31
 80070ca:	d412      	bmi.n	80070f2 <_printf_float+0x366>
 80070cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070d0:	eba3 020a 	sub.w	r2, r3, sl
 80070d4:	eba3 0a01 	sub.w	sl, r3, r1
 80070d8:	4592      	cmp	sl, r2
 80070da:	bfa8      	it	ge
 80070dc:	4692      	movge	sl, r2
 80070de:	f1ba 0f00 	cmp.w	sl, #0
 80070e2:	dc0e      	bgt.n	8007102 <_printf_float+0x376>
 80070e4:	f04f 0800 	mov.w	r8, #0
 80070e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070ec:	f104 091a 	add.w	r9, r4, #26
 80070f0:	e019      	b.n	8007126 <_printf_float+0x39a>
 80070f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	d1e5      	bne.n	80070cc <_printf_float+0x340>
 8007100:	e6a1      	b.n	8006e46 <_printf_float+0xba>
 8007102:	4653      	mov	r3, sl
 8007104:	4642      	mov	r2, r8
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	d1e9      	bne.n	80070e4 <_printf_float+0x358>
 8007110:	e699      	b.n	8006e46 <_printf_float+0xba>
 8007112:	2301      	movs	r3, #1
 8007114:	464a      	mov	r2, r9
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	47b8      	blx	r7
 800711c:	3001      	adds	r0, #1
 800711e:	f43f ae92 	beq.w	8006e46 <_printf_float+0xba>
 8007122:	f108 0801 	add.w	r8, r8, #1
 8007126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	eba3 030a 	sub.w	r3, r3, sl
 8007130:	4543      	cmp	r3, r8
 8007132:	dcee      	bgt.n	8007112 <_printf_float+0x386>
 8007134:	e74a      	b.n	8006fcc <_printf_float+0x240>
 8007136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007138:	2a01      	cmp	r2, #1
 800713a:	dc01      	bgt.n	8007140 <_printf_float+0x3b4>
 800713c:	07db      	lsls	r3, r3, #31
 800713e:	d53a      	bpl.n	80071b6 <_printf_float+0x42a>
 8007140:	2301      	movs	r3, #1
 8007142:	4642      	mov	r2, r8
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f ae7b 	beq.w	8006e46 <_printf_float+0xba>
 8007150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f108 0801 	add.w	r8, r8, #1
 8007160:	f43f ae71 	beq.w	8006e46 <_printf_float+0xba>
 8007164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007166:	2200      	movs	r2, #0
 8007168:	f103 3aff 	add.w	sl, r3, #4294967295
 800716c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007170:	2300      	movs	r3, #0
 8007172:	f7f9 fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007176:	b9c8      	cbnz	r0, 80071ac <_printf_float+0x420>
 8007178:	4653      	mov	r3, sl
 800717a:	4642      	mov	r2, r8
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	d10e      	bne.n	80071a4 <_printf_float+0x418>
 8007186:	e65e      	b.n	8006e46 <_printf_float+0xba>
 8007188:	2301      	movs	r3, #1
 800718a:	4652      	mov	r2, sl
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f ae57 	beq.w	8006e46 <_printf_float+0xba>
 8007198:	f108 0801 	add.w	r8, r8, #1
 800719c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719e:	3b01      	subs	r3, #1
 80071a0:	4543      	cmp	r3, r8
 80071a2:	dcf1      	bgt.n	8007188 <_printf_float+0x3fc>
 80071a4:	464b      	mov	r3, r9
 80071a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071aa:	e6de      	b.n	8006f6a <_printf_float+0x1de>
 80071ac:	f04f 0800 	mov.w	r8, #0
 80071b0:	f104 0a1a 	add.w	sl, r4, #26
 80071b4:	e7f2      	b.n	800719c <_printf_float+0x410>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e7df      	b.n	800717a <_printf_float+0x3ee>
 80071ba:	2301      	movs	r3, #1
 80071bc:	464a      	mov	r2, r9
 80071be:	4631      	mov	r1, r6
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b8      	blx	r7
 80071c4:	3001      	adds	r0, #1
 80071c6:	f43f ae3e 	beq.w	8006e46 <_printf_float+0xba>
 80071ca:	f108 0801 	add.w	r8, r8, #1
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	4543      	cmp	r3, r8
 80071d6:	dcf0      	bgt.n	80071ba <_printf_float+0x42e>
 80071d8:	e6fc      	b.n	8006fd4 <_printf_float+0x248>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	f104 0919 	add.w	r9, r4, #25
 80071e2:	e7f4      	b.n	80071ce <_printf_float+0x442>
 80071e4:	2900      	cmp	r1, #0
 80071e6:	f43f ae8b 	beq.w	8006f00 <_printf_float+0x174>
 80071ea:	2300      	movs	r3, #0
 80071ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80071f0:	ab09      	add	r3, sp, #36	; 0x24
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	ec49 8b10 	vmov	d0, r8, r9
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	f8cd a004 	str.w	sl, [sp, #4]
 80071fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007202:	4628      	mov	r0, r5
 8007204:	f7ff fd2d 	bl	8006c62 <__cvt>
 8007208:	4680      	mov	r8, r0
 800720a:	e648      	b.n	8006e9e <_printf_float+0x112>

0800720c <_printf_common>:
 800720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	4691      	mov	r9, r2
 8007212:	461f      	mov	r7, r3
 8007214:	688a      	ldr	r2, [r1, #8]
 8007216:	690b      	ldr	r3, [r1, #16]
 8007218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800721c:	4293      	cmp	r3, r2
 800721e:	bfb8      	it	lt
 8007220:	4613      	movlt	r3, r2
 8007222:	f8c9 3000 	str.w	r3, [r9]
 8007226:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800722a:	4606      	mov	r6, r0
 800722c:	460c      	mov	r4, r1
 800722e:	b112      	cbz	r2, 8007236 <_printf_common+0x2a>
 8007230:	3301      	adds	r3, #1
 8007232:	f8c9 3000 	str.w	r3, [r9]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	0699      	lsls	r1, r3, #26
 800723a:	bf42      	ittt	mi
 800723c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007240:	3302      	addmi	r3, #2
 8007242:	f8c9 3000 	strmi.w	r3, [r9]
 8007246:	6825      	ldr	r5, [r4, #0]
 8007248:	f015 0506 	ands.w	r5, r5, #6
 800724c:	d107      	bne.n	800725e <_printf_common+0x52>
 800724e:	f104 0a19 	add.w	sl, r4, #25
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	f8d9 2000 	ldr.w	r2, [r9]
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	42ab      	cmp	r3, r5
 800725c:	dc28      	bgt.n	80072b0 <_printf_common+0xa4>
 800725e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	3300      	adds	r3, #0
 8007266:	bf18      	it	ne
 8007268:	2301      	movne	r3, #1
 800726a:	0692      	lsls	r2, r2, #26
 800726c:	d42d      	bmi.n	80072ca <_printf_common+0xbe>
 800726e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007272:	4639      	mov	r1, r7
 8007274:	4630      	mov	r0, r6
 8007276:	47c0      	blx	r8
 8007278:	3001      	adds	r0, #1
 800727a:	d020      	beq.n	80072be <_printf_common+0xb2>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	68e5      	ldr	r5, [r4, #12]
 8007280:	f8d9 2000 	ldr.w	r2, [r9]
 8007284:	f003 0306 	and.w	r3, r3, #6
 8007288:	2b04      	cmp	r3, #4
 800728a:	bf08      	it	eq
 800728c:	1aad      	subeq	r5, r5, r2
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	6922      	ldr	r2, [r4, #16]
 8007292:	bf0c      	ite	eq
 8007294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007298:	2500      	movne	r5, #0
 800729a:	4293      	cmp	r3, r2
 800729c:	bfc4      	itt	gt
 800729e:	1a9b      	subgt	r3, r3, r2
 80072a0:	18ed      	addgt	r5, r5, r3
 80072a2:	f04f 0900 	mov.w	r9, #0
 80072a6:	341a      	adds	r4, #26
 80072a8:	454d      	cmp	r5, r9
 80072aa:	d11a      	bne.n	80072e2 <_printf_common+0xd6>
 80072ac:	2000      	movs	r0, #0
 80072ae:	e008      	b.n	80072c2 <_printf_common+0xb6>
 80072b0:	2301      	movs	r3, #1
 80072b2:	4652      	mov	r2, sl
 80072b4:	4639      	mov	r1, r7
 80072b6:	4630      	mov	r0, r6
 80072b8:	47c0      	blx	r8
 80072ba:	3001      	adds	r0, #1
 80072bc:	d103      	bne.n	80072c6 <_printf_common+0xba>
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c6:	3501      	adds	r5, #1
 80072c8:	e7c3      	b.n	8007252 <_printf_common+0x46>
 80072ca:	18e1      	adds	r1, r4, r3
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	2030      	movs	r0, #48	; 0x30
 80072d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072d4:	4422      	add	r2, r4
 80072d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072de:	3302      	adds	r3, #2
 80072e0:	e7c5      	b.n	800726e <_printf_common+0x62>
 80072e2:	2301      	movs	r3, #1
 80072e4:	4622      	mov	r2, r4
 80072e6:	4639      	mov	r1, r7
 80072e8:	4630      	mov	r0, r6
 80072ea:	47c0      	blx	r8
 80072ec:	3001      	adds	r0, #1
 80072ee:	d0e6      	beq.n	80072be <_printf_common+0xb2>
 80072f0:	f109 0901 	add.w	r9, r9, #1
 80072f4:	e7d8      	b.n	80072a8 <_printf_common+0x9c>
	...

080072f8 <_printf_i>:
 80072f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007300:	460c      	mov	r4, r1
 8007302:	7e09      	ldrb	r1, [r1, #24]
 8007304:	b085      	sub	sp, #20
 8007306:	296e      	cmp	r1, #110	; 0x6e
 8007308:	4617      	mov	r7, r2
 800730a:	4606      	mov	r6, r0
 800730c:	4698      	mov	r8, r3
 800730e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007310:	f000 80b3 	beq.w	800747a <_printf_i+0x182>
 8007314:	d822      	bhi.n	800735c <_printf_i+0x64>
 8007316:	2963      	cmp	r1, #99	; 0x63
 8007318:	d036      	beq.n	8007388 <_printf_i+0x90>
 800731a:	d80a      	bhi.n	8007332 <_printf_i+0x3a>
 800731c:	2900      	cmp	r1, #0
 800731e:	f000 80b9 	beq.w	8007494 <_printf_i+0x19c>
 8007322:	2958      	cmp	r1, #88	; 0x58
 8007324:	f000 8083 	beq.w	800742e <_printf_i+0x136>
 8007328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800732c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007330:	e032      	b.n	8007398 <_printf_i+0xa0>
 8007332:	2964      	cmp	r1, #100	; 0x64
 8007334:	d001      	beq.n	800733a <_printf_i+0x42>
 8007336:	2969      	cmp	r1, #105	; 0x69
 8007338:	d1f6      	bne.n	8007328 <_printf_i+0x30>
 800733a:	6820      	ldr	r0, [r4, #0]
 800733c:	6813      	ldr	r3, [r2, #0]
 800733e:	0605      	lsls	r5, r0, #24
 8007340:	f103 0104 	add.w	r1, r3, #4
 8007344:	d52a      	bpl.n	800739c <_printf_i+0xa4>
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6011      	str	r1, [r2, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	da03      	bge.n	8007356 <_printf_i+0x5e>
 800734e:	222d      	movs	r2, #45	; 0x2d
 8007350:	425b      	negs	r3, r3
 8007352:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007356:	486f      	ldr	r0, [pc, #444]	; (8007514 <_printf_i+0x21c>)
 8007358:	220a      	movs	r2, #10
 800735a:	e039      	b.n	80073d0 <_printf_i+0xd8>
 800735c:	2973      	cmp	r1, #115	; 0x73
 800735e:	f000 809d 	beq.w	800749c <_printf_i+0x1a4>
 8007362:	d808      	bhi.n	8007376 <_printf_i+0x7e>
 8007364:	296f      	cmp	r1, #111	; 0x6f
 8007366:	d020      	beq.n	80073aa <_printf_i+0xb2>
 8007368:	2970      	cmp	r1, #112	; 0x70
 800736a:	d1dd      	bne.n	8007328 <_printf_i+0x30>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	f043 0320 	orr.w	r3, r3, #32
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	e003      	b.n	800737e <_printf_i+0x86>
 8007376:	2975      	cmp	r1, #117	; 0x75
 8007378:	d017      	beq.n	80073aa <_printf_i+0xb2>
 800737a:	2978      	cmp	r1, #120	; 0x78
 800737c:	d1d4      	bne.n	8007328 <_printf_i+0x30>
 800737e:	2378      	movs	r3, #120	; 0x78
 8007380:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007384:	4864      	ldr	r0, [pc, #400]	; (8007518 <_printf_i+0x220>)
 8007386:	e055      	b.n	8007434 <_printf_i+0x13c>
 8007388:	6813      	ldr	r3, [r2, #0]
 800738a:	1d19      	adds	r1, r3, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6011      	str	r1, [r2, #0]
 8007390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007398:	2301      	movs	r3, #1
 800739a:	e08c      	b.n	80074b6 <_printf_i+0x1be>
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6011      	str	r1, [r2, #0]
 80073a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073a4:	bf18      	it	ne
 80073a6:	b21b      	sxthne	r3, r3
 80073a8:	e7cf      	b.n	800734a <_printf_i+0x52>
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	6825      	ldr	r5, [r4, #0]
 80073ae:	1d18      	adds	r0, r3, #4
 80073b0:	6010      	str	r0, [r2, #0]
 80073b2:	0628      	lsls	r0, r5, #24
 80073b4:	d501      	bpl.n	80073ba <_printf_i+0xc2>
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	e002      	b.n	80073c0 <_printf_i+0xc8>
 80073ba:	0668      	lsls	r0, r5, #25
 80073bc:	d5fb      	bpl.n	80073b6 <_printf_i+0xbe>
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	4854      	ldr	r0, [pc, #336]	; (8007514 <_printf_i+0x21c>)
 80073c2:	296f      	cmp	r1, #111	; 0x6f
 80073c4:	bf14      	ite	ne
 80073c6:	220a      	movne	r2, #10
 80073c8:	2208      	moveq	r2, #8
 80073ca:	2100      	movs	r1, #0
 80073cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073d0:	6865      	ldr	r5, [r4, #4]
 80073d2:	60a5      	str	r5, [r4, #8]
 80073d4:	2d00      	cmp	r5, #0
 80073d6:	f2c0 8095 	blt.w	8007504 <_printf_i+0x20c>
 80073da:	6821      	ldr	r1, [r4, #0]
 80073dc:	f021 0104 	bic.w	r1, r1, #4
 80073e0:	6021      	str	r1, [r4, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d13d      	bne.n	8007462 <_printf_i+0x16a>
 80073e6:	2d00      	cmp	r5, #0
 80073e8:	f040 808e 	bne.w	8007508 <_printf_i+0x210>
 80073ec:	4665      	mov	r5, ip
 80073ee:	2a08      	cmp	r2, #8
 80073f0:	d10b      	bne.n	800740a <_printf_i+0x112>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	07db      	lsls	r3, r3, #31
 80073f6:	d508      	bpl.n	800740a <_printf_i+0x112>
 80073f8:	6923      	ldr	r3, [r4, #16]
 80073fa:	6862      	ldr	r2, [r4, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	bfde      	ittt	le
 8007400:	2330      	movle	r3, #48	; 0x30
 8007402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800740a:	ebac 0305 	sub.w	r3, ip, r5
 800740e:	6123      	str	r3, [r4, #16]
 8007410:	f8cd 8000 	str.w	r8, [sp]
 8007414:	463b      	mov	r3, r7
 8007416:	aa03      	add	r2, sp, #12
 8007418:	4621      	mov	r1, r4
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff fef6 	bl	800720c <_printf_common>
 8007420:	3001      	adds	r0, #1
 8007422:	d14d      	bne.n	80074c0 <_printf_i+0x1c8>
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	b005      	add	sp, #20
 800742a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800742e:	4839      	ldr	r0, [pc, #228]	; (8007514 <_printf_i+0x21c>)
 8007430:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007434:	6813      	ldr	r3, [r2, #0]
 8007436:	6821      	ldr	r1, [r4, #0]
 8007438:	1d1d      	adds	r5, r3, #4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6015      	str	r5, [r2, #0]
 800743e:	060a      	lsls	r2, r1, #24
 8007440:	d50b      	bpl.n	800745a <_printf_i+0x162>
 8007442:	07ca      	lsls	r2, r1, #31
 8007444:	bf44      	itt	mi
 8007446:	f041 0120 	orrmi.w	r1, r1, #32
 800744a:	6021      	strmi	r1, [r4, #0]
 800744c:	b91b      	cbnz	r3, 8007456 <_printf_i+0x15e>
 800744e:	6822      	ldr	r2, [r4, #0]
 8007450:	f022 0220 	bic.w	r2, r2, #32
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	2210      	movs	r2, #16
 8007458:	e7b7      	b.n	80073ca <_printf_i+0xd2>
 800745a:	064d      	lsls	r5, r1, #25
 800745c:	bf48      	it	mi
 800745e:	b29b      	uxthmi	r3, r3
 8007460:	e7ef      	b.n	8007442 <_printf_i+0x14a>
 8007462:	4665      	mov	r5, ip
 8007464:	fbb3 f1f2 	udiv	r1, r3, r2
 8007468:	fb02 3311 	mls	r3, r2, r1, r3
 800746c:	5cc3      	ldrb	r3, [r0, r3]
 800746e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007472:	460b      	mov	r3, r1
 8007474:	2900      	cmp	r1, #0
 8007476:	d1f5      	bne.n	8007464 <_printf_i+0x16c>
 8007478:	e7b9      	b.n	80073ee <_printf_i+0xf6>
 800747a:	6813      	ldr	r3, [r2, #0]
 800747c:	6825      	ldr	r5, [r4, #0]
 800747e:	6961      	ldr	r1, [r4, #20]
 8007480:	1d18      	adds	r0, r3, #4
 8007482:	6010      	str	r0, [r2, #0]
 8007484:	0628      	lsls	r0, r5, #24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	d501      	bpl.n	800748e <_printf_i+0x196>
 800748a:	6019      	str	r1, [r3, #0]
 800748c:	e002      	b.n	8007494 <_printf_i+0x19c>
 800748e:	066a      	lsls	r2, r5, #25
 8007490:	d5fb      	bpl.n	800748a <_printf_i+0x192>
 8007492:	8019      	strh	r1, [r3, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	4665      	mov	r5, ip
 800749a:	e7b9      	b.n	8007410 <_printf_i+0x118>
 800749c:	6813      	ldr	r3, [r2, #0]
 800749e:	1d19      	adds	r1, r3, #4
 80074a0:	6011      	str	r1, [r2, #0]
 80074a2:	681d      	ldr	r5, [r3, #0]
 80074a4:	6862      	ldr	r2, [r4, #4]
 80074a6:	2100      	movs	r1, #0
 80074a8:	4628      	mov	r0, r5
 80074aa:	f7f8 fe99 	bl	80001e0 <memchr>
 80074ae:	b108      	cbz	r0, 80074b4 <_printf_i+0x1bc>
 80074b0:	1b40      	subs	r0, r0, r5
 80074b2:	6060      	str	r0, [r4, #4]
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	2300      	movs	r3, #0
 80074ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074be:	e7a7      	b.n	8007410 <_printf_i+0x118>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	462a      	mov	r2, r5
 80074c4:	4639      	mov	r1, r7
 80074c6:	4630      	mov	r0, r6
 80074c8:	47c0      	blx	r8
 80074ca:	3001      	adds	r0, #1
 80074cc:	d0aa      	beq.n	8007424 <_printf_i+0x12c>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	079b      	lsls	r3, r3, #30
 80074d2:	d413      	bmi.n	80074fc <_printf_i+0x204>
 80074d4:	68e0      	ldr	r0, [r4, #12]
 80074d6:	9b03      	ldr	r3, [sp, #12]
 80074d8:	4298      	cmp	r0, r3
 80074da:	bfb8      	it	lt
 80074dc:	4618      	movlt	r0, r3
 80074de:	e7a3      	b.n	8007428 <_printf_i+0x130>
 80074e0:	2301      	movs	r3, #1
 80074e2:	464a      	mov	r2, r9
 80074e4:	4639      	mov	r1, r7
 80074e6:	4630      	mov	r0, r6
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d09a      	beq.n	8007424 <_printf_i+0x12c>
 80074ee:	3501      	adds	r5, #1
 80074f0:	68e3      	ldr	r3, [r4, #12]
 80074f2:	9a03      	ldr	r2, [sp, #12]
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	42ab      	cmp	r3, r5
 80074f8:	dcf2      	bgt.n	80074e0 <_printf_i+0x1e8>
 80074fa:	e7eb      	b.n	80074d4 <_printf_i+0x1dc>
 80074fc:	2500      	movs	r5, #0
 80074fe:	f104 0919 	add.w	r9, r4, #25
 8007502:	e7f5      	b.n	80074f0 <_printf_i+0x1f8>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1ac      	bne.n	8007462 <_printf_i+0x16a>
 8007508:	7803      	ldrb	r3, [r0, #0]
 800750a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800750e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007512:	e76c      	b.n	80073ee <_printf_i+0xf6>
 8007514:	0800b128 	.word	0x0800b128
 8007518:	0800b139 	.word	0x0800b139

0800751c <_scanf_float>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	469a      	mov	sl, r3
 8007522:	688b      	ldr	r3, [r1, #8]
 8007524:	4616      	mov	r6, r2
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800752c:	b087      	sub	sp, #28
 800752e:	bf83      	ittte	hi
 8007530:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007534:	189b      	addhi	r3, r3, r2
 8007536:	9301      	strhi	r3, [sp, #4]
 8007538:	2300      	movls	r3, #0
 800753a:	bf86      	itte	hi
 800753c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007540:	608b      	strhi	r3, [r1, #8]
 8007542:	9301      	strls	r3, [sp, #4]
 8007544:	680b      	ldr	r3, [r1, #0]
 8007546:	4688      	mov	r8, r1
 8007548:	f04f 0b00 	mov.w	fp, #0
 800754c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007550:	f848 3b1c 	str.w	r3, [r8], #28
 8007554:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007558:	4607      	mov	r7, r0
 800755a:	460c      	mov	r4, r1
 800755c:	4645      	mov	r5, r8
 800755e:	465a      	mov	r2, fp
 8007560:	46d9      	mov	r9, fp
 8007562:	f8cd b008 	str.w	fp, [sp, #8]
 8007566:	68a1      	ldr	r1, [r4, #8]
 8007568:	b181      	cbz	r1, 800758c <_scanf_float+0x70>
 800756a:	6833      	ldr	r3, [r6, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b49      	cmp	r3, #73	; 0x49
 8007570:	d071      	beq.n	8007656 <_scanf_float+0x13a>
 8007572:	d84d      	bhi.n	8007610 <_scanf_float+0xf4>
 8007574:	2b39      	cmp	r3, #57	; 0x39
 8007576:	d840      	bhi.n	80075fa <_scanf_float+0xde>
 8007578:	2b31      	cmp	r3, #49	; 0x31
 800757a:	f080 8088 	bcs.w	800768e <_scanf_float+0x172>
 800757e:	2b2d      	cmp	r3, #45	; 0x2d
 8007580:	f000 8090 	beq.w	80076a4 <_scanf_float+0x188>
 8007584:	d815      	bhi.n	80075b2 <_scanf_float+0x96>
 8007586:	2b2b      	cmp	r3, #43	; 0x2b
 8007588:	f000 808c 	beq.w	80076a4 <_scanf_float+0x188>
 800758c:	f1b9 0f00 	cmp.w	r9, #0
 8007590:	d003      	beq.n	800759a <_scanf_float+0x7e>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	3a01      	subs	r2, #1
 800759c:	2a01      	cmp	r2, #1
 800759e:	f200 80ea 	bhi.w	8007776 <_scanf_float+0x25a>
 80075a2:	4545      	cmp	r5, r8
 80075a4:	f200 80dc 	bhi.w	8007760 <_scanf_float+0x244>
 80075a8:	2601      	movs	r6, #1
 80075aa:	4630      	mov	r0, r6
 80075ac:	b007      	add	sp, #28
 80075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b2:	2b2e      	cmp	r3, #46	; 0x2e
 80075b4:	f000 809f 	beq.w	80076f6 <_scanf_float+0x1da>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d1e7      	bne.n	800758c <_scanf_float+0x70>
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	f410 7f80 	tst.w	r0, #256	; 0x100
 80075c2:	d064      	beq.n	800768e <_scanf_float+0x172>
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80075ca:	6020      	str	r0, [r4, #0]
 80075cc:	f109 0901 	add.w	r9, r9, #1
 80075d0:	b11b      	cbz	r3, 80075da <_scanf_float+0xbe>
 80075d2:	3b01      	subs	r3, #1
 80075d4:	3101      	adds	r1, #1
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	60a1      	str	r1, [r4, #8]
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	3b01      	subs	r3, #1
 80075de:	60a3      	str	r3, [r4, #8]
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	3301      	adds	r3, #1
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	6873      	ldr	r3, [r6, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	6073      	str	r3, [r6, #4]
 80075ee:	f340 80ac 	ble.w	800774a <_scanf_float+0x22e>
 80075f2:	6833      	ldr	r3, [r6, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	6033      	str	r3, [r6, #0]
 80075f8:	e7b5      	b.n	8007566 <_scanf_float+0x4a>
 80075fa:	2b45      	cmp	r3, #69	; 0x45
 80075fc:	f000 8085 	beq.w	800770a <_scanf_float+0x1ee>
 8007600:	2b46      	cmp	r3, #70	; 0x46
 8007602:	d06a      	beq.n	80076da <_scanf_float+0x1be>
 8007604:	2b41      	cmp	r3, #65	; 0x41
 8007606:	d1c1      	bne.n	800758c <_scanf_float+0x70>
 8007608:	2a01      	cmp	r2, #1
 800760a:	d1bf      	bne.n	800758c <_scanf_float+0x70>
 800760c:	2202      	movs	r2, #2
 800760e:	e046      	b.n	800769e <_scanf_float+0x182>
 8007610:	2b65      	cmp	r3, #101	; 0x65
 8007612:	d07a      	beq.n	800770a <_scanf_float+0x1ee>
 8007614:	d818      	bhi.n	8007648 <_scanf_float+0x12c>
 8007616:	2b54      	cmp	r3, #84	; 0x54
 8007618:	d066      	beq.n	80076e8 <_scanf_float+0x1cc>
 800761a:	d811      	bhi.n	8007640 <_scanf_float+0x124>
 800761c:	2b4e      	cmp	r3, #78	; 0x4e
 800761e:	d1b5      	bne.n	800758c <_scanf_float+0x70>
 8007620:	2a00      	cmp	r2, #0
 8007622:	d146      	bne.n	80076b2 <_scanf_float+0x196>
 8007624:	f1b9 0f00 	cmp.w	r9, #0
 8007628:	d145      	bne.n	80076b6 <_scanf_float+0x19a>
 800762a:	6821      	ldr	r1, [r4, #0]
 800762c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007630:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007634:	d13f      	bne.n	80076b6 <_scanf_float+0x19a>
 8007636:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800763a:	6021      	str	r1, [r4, #0]
 800763c:	2201      	movs	r2, #1
 800763e:	e02e      	b.n	800769e <_scanf_float+0x182>
 8007640:	2b59      	cmp	r3, #89	; 0x59
 8007642:	d01e      	beq.n	8007682 <_scanf_float+0x166>
 8007644:	2b61      	cmp	r3, #97	; 0x61
 8007646:	e7de      	b.n	8007606 <_scanf_float+0xea>
 8007648:	2b6e      	cmp	r3, #110	; 0x6e
 800764a:	d0e9      	beq.n	8007620 <_scanf_float+0x104>
 800764c:	d815      	bhi.n	800767a <_scanf_float+0x15e>
 800764e:	2b66      	cmp	r3, #102	; 0x66
 8007650:	d043      	beq.n	80076da <_scanf_float+0x1be>
 8007652:	2b69      	cmp	r3, #105	; 0x69
 8007654:	d19a      	bne.n	800758c <_scanf_float+0x70>
 8007656:	f1bb 0f00 	cmp.w	fp, #0
 800765a:	d138      	bne.n	80076ce <_scanf_float+0x1b2>
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	d197      	bne.n	8007592 <_scanf_float+0x76>
 8007662:	6821      	ldr	r1, [r4, #0]
 8007664:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007668:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800766c:	d195      	bne.n	800759a <_scanf_float+0x7e>
 800766e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007672:	6021      	str	r1, [r4, #0]
 8007674:	f04f 0b01 	mov.w	fp, #1
 8007678:	e011      	b.n	800769e <_scanf_float+0x182>
 800767a:	2b74      	cmp	r3, #116	; 0x74
 800767c:	d034      	beq.n	80076e8 <_scanf_float+0x1cc>
 800767e:	2b79      	cmp	r3, #121	; 0x79
 8007680:	d184      	bne.n	800758c <_scanf_float+0x70>
 8007682:	f1bb 0f07 	cmp.w	fp, #7
 8007686:	d181      	bne.n	800758c <_scanf_float+0x70>
 8007688:	f04f 0b08 	mov.w	fp, #8
 800768c:	e007      	b.n	800769e <_scanf_float+0x182>
 800768e:	eb12 0f0b 	cmn.w	r2, fp
 8007692:	f47f af7b 	bne.w	800758c <_scanf_float+0x70>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800769c:	6021      	str	r1, [r4, #0]
 800769e:	702b      	strb	r3, [r5, #0]
 80076a0:	3501      	adds	r5, #1
 80076a2:	e79a      	b.n	80075da <_scanf_float+0xbe>
 80076a4:	6821      	ldr	r1, [r4, #0]
 80076a6:	0608      	lsls	r0, r1, #24
 80076a8:	f57f af70 	bpl.w	800758c <_scanf_float+0x70>
 80076ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076b0:	e7f4      	b.n	800769c <_scanf_float+0x180>
 80076b2:	2a02      	cmp	r2, #2
 80076b4:	d047      	beq.n	8007746 <_scanf_float+0x22a>
 80076b6:	f1bb 0f01 	cmp.w	fp, #1
 80076ba:	d003      	beq.n	80076c4 <_scanf_float+0x1a8>
 80076bc:	f1bb 0f04 	cmp.w	fp, #4
 80076c0:	f47f af64 	bne.w	800758c <_scanf_float+0x70>
 80076c4:	f10b 0b01 	add.w	fp, fp, #1
 80076c8:	fa5f fb8b 	uxtb.w	fp, fp
 80076cc:	e7e7      	b.n	800769e <_scanf_float+0x182>
 80076ce:	f1bb 0f03 	cmp.w	fp, #3
 80076d2:	d0f7      	beq.n	80076c4 <_scanf_float+0x1a8>
 80076d4:	f1bb 0f05 	cmp.w	fp, #5
 80076d8:	e7f2      	b.n	80076c0 <_scanf_float+0x1a4>
 80076da:	f1bb 0f02 	cmp.w	fp, #2
 80076de:	f47f af55 	bne.w	800758c <_scanf_float+0x70>
 80076e2:	f04f 0b03 	mov.w	fp, #3
 80076e6:	e7da      	b.n	800769e <_scanf_float+0x182>
 80076e8:	f1bb 0f06 	cmp.w	fp, #6
 80076ec:	f47f af4e 	bne.w	800758c <_scanf_float+0x70>
 80076f0:	f04f 0b07 	mov.w	fp, #7
 80076f4:	e7d3      	b.n	800769e <_scanf_float+0x182>
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	0588      	lsls	r0, r1, #22
 80076fa:	f57f af47 	bpl.w	800758c <_scanf_float+0x70>
 80076fe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007702:	6021      	str	r1, [r4, #0]
 8007704:	f8cd 9008 	str.w	r9, [sp, #8]
 8007708:	e7c9      	b.n	800769e <_scanf_float+0x182>
 800770a:	6821      	ldr	r1, [r4, #0]
 800770c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007710:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007714:	d006      	beq.n	8007724 <_scanf_float+0x208>
 8007716:	0548      	lsls	r0, r1, #21
 8007718:	f57f af38 	bpl.w	800758c <_scanf_float+0x70>
 800771c:	f1b9 0f00 	cmp.w	r9, #0
 8007720:	f43f af3b 	beq.w	800759a <_scanf_float+0x7e>
 8007724:	0588      	lsls	r0, r1, #22
 8007726:	bf58      	it	pl
 8007728:	9802      	ldrpl	r0, [sp, #8]
 800772a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800772e:	bf58      	it	pl
 8007730:	eba9 0000 	subpl.w	r0, r9, r0
 8007734:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007738:	bf58      	it	pl
 800773a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800773e:	6021      	str	r1, [r4, #0]
 8007740:	f04f 0900 	mov.w	r9, #0
 8007744:	e7ab      	b.n	800769e <_scanf_float+0x182>
 8007746:	2203      	movs	r2, #3
 8007748:	e7a9      	b.n	800769e <_scanf_float+0x182>
 800774a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800774e:	9205      	str	r2, [sp, #20]
 8007750:	4631      	mov	r1, r6
 8007752:	4638      	mov	r0, r7
 8007754:	4798      	blx	r3
 8007756:	9a05      	ldr	r2, [sp, #20]
 8007758:	2800      	cmp	r0, #0
 800775a:	f43f af04 	beq.w	8007566 <_scanf_float+0x4a>
 800775e:	e715      	b.n	800758c <_scanf_float+0x70>
 8007760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007764:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007768:	4632      	mov	r2, r6
 800776a:	4638      	mov	r0, r7
 800776c:	4798      	blx	r3
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	3b01      	subs	r3, #1
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	e715      	b.n	80075a2 <_scanf_float+0x86>
 8007776:	f10b 33ff 	add.w	r3, fp, #4294967295
 800777a:	2b06      	cmp	r3, #6
 800777c:	d80a      	bhi.n	8007794 <_scanf_float+0x278>
 800777e:	f1bb 0f02 	cmp.w	fp, #2
 8007782:	d968      	bls.n	8007856 <_scanf_float+0x33a>
 8007784:	f1ab 0b03 	sub.w	fp, fp, #3
 8007788:	fa5f fb8b 	uxtb.w	fp, fp
 800778c:	eba5 0b0b 	sub.w	fp, r5, fp
 8007790:	455d      	cmp	r5, fp
 8007792:	d14b      	bne.n	800782c <_scanf_float+0x310>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	05da      	lsls	r2, r3, #23
 8007798:	d51f      	bpl.n	80077da <_scanf_float+0x2be>
 800779a:	055b      	lsls	r3, r3, #21
 800779c:	d468      	bmi.n	8007870 <_scanf_float+0x354>
 800779e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	2965      	cmp	r1, #101	; 0x65
 80077a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80077aa:	f105 3bff 	add.w	fp, r5, #4294967295
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	d00d      	beq.n	80077ce <_scanf_float+0x2b2>
 80077b2:	2945      	cmp	r1, #69	; 0x45
 80077b4:	d00b      	beq.n	80077ce <_scanf_float+0x2b2>
 80077b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ba:	4632      	mov	r2, r6
 80077bc:	4638      	mov	r0, r7
 80077be:	4798      	blx	r3
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	f1a5 0b02 	sub.w	fp, r5, #2
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077d2:	4632      	mov	r2, r6
 80077d4:	4638      	mov	r0, r7
 80077d6:	4798      	blx	r3
 80077d8:	465d      	mov	r5, fp
 80077da:	6826      	ldr	r6, [r4, #0]
 80077dc:	f016 0610 	ands.w	r6, r6, #16
 80077e0:	d17a      	bne.n	80078d8 <_scanf_float+0x3bc>
 80077e2:	702e      	strb	r6, [r5, #0]
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ee:	d142      	bne.n	8007876 <_scanf_float+0x35a>
 80077f0:	9b02      	ldr	r3, [sp, #8]
 80077f2:	eba9 0303 	sub.w	r3, r9, r3
 80077f6:	425a      	negs	r2, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d149      	bne.n	8007890 <_scanf_float+0x374>
 80077fc:	2200      	movs	r2, #0
 80077fe:	4641      	mov	r1, r8
 8007800:	4638      	mov	r0, r7
 8007802:	f000 fea5 	bl	8008550 <_strtod_r>
 8007806:	6825      	ldr	r5, [r4, #0]
 8007808:	f8da 3000 	ldr.w	r3, [sl]
 800780c:	f015 0f02 	tst.w	r5, #2
 8007810:	f103 0204 	add.w	r2, r3, #4
 8007814:	ec59 8b10 	vmov	r8, r9, d0
 8007818:	f8ca 2000 	str.w	r2, [sl]
 800781c:	d043      	beq.n	80078a6 <_scanf_float+0x38a>
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	e9c3 8900 	strd	r8, r9, [r3]
 8007824:	68e3      	ldr	r3, [r4, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	60e3      	str	r3, [r4, #12]
 800782a:	e6be      	b.n	80075aa <_scanf_float+0x8e>
 800782c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007830:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007834:	4632      	mov	r2, r6
 8007836:	4638      	mov	r0, r7
 8007838:	4798      	blx	r3
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	3b01      	subs	r3, #1
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	e7a6      	b.n	8007790 <_scanf_float+0x274>
 8007842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007846:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800784a:	4632      	mov	r2, r6
 800784c:	4638      	mov	r0, r7
 800784e:	4798      	blx	r3
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	3b01      	subs	r3, #1
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	4545      	cmp	r5, r8
 8007858:	d8f3      	bhi.n	8007842 <_scanf_float+0x326>
 800785a:	e6a5      	b.n	80075a8 <_scanf_float+0x8c>
 800785c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007860:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007864:	4632      	mov	r2, r6
 8007866:	4638      	mov	r0, r7
 8007868:	4798      	blx	r3
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	3b01      	subs	r3, #1
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	4545      	cmp	r5, r8
 8007872:	d8f3      	bhi.n	800785c <_scanf_float+0x340>
 8007874:	e698      	b.n	80075a8 <_scanf_float+0x8c>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0bf      	beq.n	80077fc <_scanf_float+0x2e0>
 800787c:	9904      	ldr	r1, [sp, #16]
 800787e:	230a      	movs	r3, #10
 8007880:	4632      	mov	r2, r6
 8007882:	3101      	adds	r1, #1
 8007884:	4638      	mov	r0, r7
 8007886:	f000 ff03 	bl	8008690 <_strtol_r>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	9d04      	ldr	r5, [sp, #16]
 800788e:	1ac2      	subs	r2, r0, r3
 8007890:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007894:	429d      	cmp	r5, r3
 8007896:	bf28      	it	cs
 8007898:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800789c:	490f      	ldr	r1, [pc, #60]	; (80078dc <_scanf_float+0x3c0>)
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f824 	bl	80078ec <siprintf>
 80078a4:	e7aa      	b.n	80077fc <_scanf_float+0x2e0>
 80078a6:	f015 0504 	ands.w	r5, r5, #4
 80078aa:	d1b8      	bne.n	800781e <_scanf_float+0x302>
 80078ac:	681f      	ldr	r7, [r3, #0]
 80078ae:	ee10 2a10 	vmov	r2, s0
 80078b2:	464b      	mov	r3, r9
 80078b4:	ee10 0a10 	vmov	r0, s0
 80078b8:	4649      	mov	r1, r9
 80078ba:	f7f9 f937 	bl	8000b2c <__aeabi_dcmpun>
 80078be:	b128      	cbz	r0, 80078cc <_scanf_float+0x3b0>
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f80d 	bl	80078e0 <nanf>
 80078c6:	ed87 0a00 	vstr	s0, [r7]
 80078ca:	e7ab      	b.n	8007824 <_scanf_float+0x308>
 80078cc:	4640      	mov	r0, r8
 80078ce:	4649      	mov	r1, r9
 80078d0:	f7f9 f98a 	bl	8000be8 <__aeabi_d2f>
 80078d4:	6038      	str	r0, [r7, #0]
 80078d6:	e7a5      	b.n	8007824 <_scanf_float+0x308>
 80078d8:	2600      	movs	r6, #0
 80078da:	e666      	b.n	80075aa <_scanf_float+0x8e>
 80078dc:	0800b14a 	.word	0x0800b14a

080078e0 <nanf>:
 80078e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078e8 <nanf+0x8>
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	7fc00000 	.word	0x7fc00000

080078ec <siprintf>:
 80078ec:	b40e      	push	{r1, r2, r3}
 80078ee:	b500      	push	{lr}
 80078f0:	b09c      	sub	sp, #112	; 0x70
 80078f2:	ab1d      	add	r3, sp, #116	; 0x74
 80078f4:	9002      	str	r0, [sp, #8]
 80078f6:	9006      	str	r0, [sp, #24]
 80078f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078fc:	4809      	ldr	r0, [pc, #36]	; (8007924 <siprintf+0x38>)
 80078fe:	9107      	str	r1, [sp, #28]
 8007900:	9104      	str	r1, [sp, #16]
 8007902:	4909      	ldr	r1, [pc, #36]	; (8007928 <siprintf+0x3c>)
 8007904:	f853 2b04 	ldr.w	r2, [r3], #4
 8007908:	9105      	str	r1, [sp, #20]
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	a902      	add	r1, sp, #8
 8007910:	f002 fd7a 	bl	800a408 <_svfiprintf_r>
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	b01c      	add	sp, #112	; 0x70
 800791c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007920:	b003      	add	sp, #12
 8007922:	4770      	bx	lr
 8007924:	20000fb0 	.word	0x20000fb0
 8007928:	ffff0208 	.word	0xffff0208

0800792c <sulp>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	ec45 4b10 	vmov	d0, r4, r5
 8007936:	4616      	mov	r6, r2
 8007938:	f002 fb22 	bl	8009f80 <__ulp>
 800793c:	ec51 0b10 	vmov	r0, r1, d0
 8007940:	b17e      	cbz	r6, 8007962 <sulp+0x36>
 8007942:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007946:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800794a:	2b00      	cmp	r3, #0
 800794c:	dd09      	ble.n	8007962 <sulp+0x36>
 800794e:	051b      	lsls	r3, r3, #20
 8007950:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007954:	2400      	movs	r4, #0
 8007956:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	0000      	movs	r0, r0
	...

08007968 <_strtod_l>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	461f      	mov	r7, r3
 800796e:	b0a1      	sub	sp, #132	; 0x84
 8007970:	2300      	movs	r3, #0
 8007972:	4681      	mov	r9, r0
 8007974:	4638      	mov	r0, r7
 8007976:	460e      	mov	r6, r1
 8007978:	9217      	str	r2, [sp, #92]	; 0x5c
 800797a:	931c      	str	r3, [sp, #112]	; 0x70
 800797c:	f002 f809 	bl	8009992 <__localeconv_l>
 8007980:	4680      	mov	r8, r0
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	f7f8 fc24 	bl	80001d0 <strlen>
 8007988:	f04f 0a00 	mov.w	sl, #0
 800798c:	4604      	mov	r4, r0
 800798e:	f04f 0b00 	mov.w	fp, #0
 8007992:	961b      	str	r6, [sp, #108]	; 0x6c
 8007994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	2a0d      	cmp	r2, #13
 800799a:	d832      	bhi.n	8007a02 <_strtod_l+0x9a>
 800799c:	2a09      	cmp	r2, #9
 800799e:	d236      	bcs.n	8007a0e <_strtod_l+0xa6>
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	d03e      	beq.n	8007a22 <_strtod_l+0xba>
 80079a4:	2300      	movs	r3, #0
 80079a6:	930d      	str	r3, [sp, #52]	; 0x34
 80079a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80079aa:	782b      	ldrb	r3, [r5, #0]
 80079ac:	2b30      	cmp	r3, #48	; 0x30
 80079ae:	f040 80ac 	bne.w	8007b0a <_strtod_l+0x1a2>
 80079b2:	786b      	ldrb	r3, [r5, #1]
 80079b4:	2b58      	cmp	r3, #88	; 0x58
 80079b6:	d001      	beq.n	80079bc <_strtod_l+0x54>
 80079b8:	2b78      	cmp	r3, #120	; 0x78
 80079ba:	d167      	bne.n	8007a8c <_strtod_l+0x124>
 80079bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	ab1c      	add	r3, sp, #112	; 0x70
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	9702      	str	r7, [sp, #8]
 80079c6:	ab1d      	add	r3, sp, #116	; 0x74
 80079c8:	4a88      	ldr	r2, [pc, #544]	; (8007bec <_strtod_l+0x284>)
 80079ca:	a91b      	add	r1, sp, #108	; 0x6c
 80079cc:	4648      	mov	r0, r9
 80079ce:	f001 fd06 	bl	80093de <__gethex>
 80079d2:	f010 0407 	ands.w	r4, r0, #7
 80079d6:	4606      	mov	r6, r0
 80079d8:	d005      	beq.n	80079e6 <_strtod_l+0x7e>
 80079da:	2c06      	cmp	r4, #6
 80079dc:	d12b      	bne.n	8007a36 <_strtod_l+0xce>
 80079de:	3501      	adds	r5, #1
 80079e0:	2300      	movs	r3, #0
 80079e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80079e4:	930d      	str	r3, [sp, #52]	; 0x34
 80079e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f040 859a 	bne.w	8008522 <_strtod_l+0xbba>
 80079ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f0:	b1e3      	cbz	r3, 8007a2c <_strtod_l+0xc4>
 80079f2:	4652      	mov	r2, sl
 80079f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079f8:	ec43 2b10 	vmov	d0, r2, r3
 80079fc:	b021      	add	sp, #132	; 0x84
 80079fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a02:	2a2b      	cmp	r2, #43	; 0x2b
 8007a04:	d015      	beq.n	8007a32 <_strtod_l+0xca>
 8007a06:	2a2d      	cmp	r2, #45	; 0x2d
 8007a08:	d004      	beq.n	8007a14 <_strtod_l+0xac>
 8007a0a:	2a20      	cmp	r2, #32
 8007a0c:	d1ca      	bne.n	80079a4 <_strtod_l+0x3c>
 8007a0e:	3301      	adds	r3, #1
 8007a10:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a12:	e7bf      	b.n	8007994 <_strtod_l+0x2c>
 8007a14:	2201      	movs	r2, #1
 8007a16:	920d      	str	r2, [sp, #52]	; 0x34
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a1c:	785b      	ldrb	r3, [r3, #1]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1c2      	bne.n	80079a8 <_strtod_l+0x40>
 8007a22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a24:	961b      	str	r6, [sp, #108]	; 0x6c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f040 8579 	bne.w	800851e <_strtod_l+0xbb6>
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	465b      	mov	r3, fp
 8007a30:	e7e2      	b.n	80079f8 <_strtod_l+0x90>
 8007a32:	2200      	movs	r2, #0
 8007a34:	e7ef      	b.n	8007a16 <_strtod_l+0xae>
 8007a36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a38:	b13a      	cbz	r2, 8007a4a <_strtod_l+0xe2>
 8007a3a:	2135      	movs	r1, #53	; 0x35
 8007a3c:	a81e      	add	r0, sp, #120	; 0x78
 8007a3e:	f002 fb97 	bl	800a170 <__copybits>
 8007a42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a44:	4648      	mov	r0, r9
 8007a46:	f002 f803 	bl	8009a50 <_Bfree>
 8007a4a:	3c01      	subs	r4, #1
 8007a4c:	2c04      	cmp	r4, #4
 8007a4e:	d806      	bhi.n	8007a5e <_strtod_l+0xf6>
 8007a50:	e8df f004 	tbb	[pc, r4]
 8007a54:	1714030a 	.word	0x1714030a
 8007a58:	0a          	.byte	0x0a
 8007a59:	00          	.byte	0x00
 8007a5a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007a5e:	0730      	lsls	r0, r6, #28
 8007a60:	d5c1      	bpl.n	80079e6 <_strtod_l+0x7e>
 8007a62:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007a66:	e7be      	b.n	80079e6 <_strtod_l+0x7e>
 8007a68:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007a6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007a6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a72:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a76:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a7a:	e7f0      	b.n	8007a5e <_strtod_l+0xf6>
 8007a7c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007bf0 <_strtod_l+0x288>
 8007a80:	e7ed      	b.n	8007a5e <_strtod_l+0xf6>
 8007a82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007a86:	f04f 3aff 	mov.w	sl, #4294967295
 8007a8a:	e7e8      	b.n	8007a5e <_strtod_l+0xf6>
 8007a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b30      	cmp	r3, #48	; 0x30
 8007a96:	d0f9      	beq.n	8007a8c <_strtod_l+0x124>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0a4      	beq.n	80079e6 <_strtod_l+0x7e>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	9306      	str	r3, [sp, #24]
 8007aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa4:	9308      	str	r3, [sp, #32]
 8007aa6:	9507      	str	r5, [sp, #28]
 8007aa8:	9505      	str	r5, [sp, #20]
 8007aaa:	220a      	movs	r2, #10
 8007aac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007aae:	7807      	ldrb	r7, [r0, #0]
 8007ab0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007ab4:	b2d9      	uxtb	r1, r3
 8007ab6:	2909      	cmp	r1, #9
 8007ab8:	d929      	bls.n	8007b0e <_strtod_l+0x1a6>
 8007aba:	4622      	mov	r2, r4
 8007abc:	f8d8 1000 	ldr.w	r1, [r8]
 8007ac0:	f002 fdaa 	bl	800a618 <strncmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d031      	beq.n	8007b2c <_strtod_l+0x1c4>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	9c05      	ldr	r4, [sp, #20]
 8007acc:	9004      	str	r0, [sp, #16]
 8007ace:	463b      	mov	r3, r7
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	2b65      	cmp	r3, #101	; 0x65
 8007ad4:	d001      	beq.n	8007ada <_strtod_l+0x172>
 8007ad6:	2b45      	cmp	r3, #69	; 0x45
 8007ad8:	d114      	bne.n	8007b04 <_strtod_l+0x19c>
 8007ada:	b924      	cbnz	r4, 8007ae6 <_strtod_l+0x17e>
 8007adc:	b910      	cbnz	r0, 8007ae4 <_strtod_l+0x17c>
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d09e      	beq.n	8007a22 <_strtod_l+0xba>
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007ae8:	1c73      	adds	r3, r6, #1
 8007aea:	931b      	str	r3, [sp, #108]	; 0x6c
 8007aec:	7873      	ldrb	r3, [r6, #1]
 8007aee:	2b2b      	cmp	r3, #43	; 0x2b
 8007af0:	d078      	beq.n	8007be4 <_strtod_l+0x27c>
 8007af2:	2b2d      	cmp	r3, #45	; 0x2d
 8007af4:	d070      	beq.n	8007bd8 <_strtod_l+0x270>
 8007af6:	f04f 0c00 	mov.w	ip, #0
 8007afa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007afe:	2f09      	cmp	r7, #9
 8007b00:	d97c      	bls.n	8007bfc <_strtod_l+0x294>
 8007b02:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b04:	f04f 0e00 	mov.w	lr, #0
 8007b08:	e09a      	b.n	8007c40 <_strtod_l+0x2d8>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e7c7      	b.n	8007a9e <_strtod_l+0x136>
 8007b0e:	9905      	ldr	r1, [sp, #20]
 8007b10:	2908      	cmp	r1, #8
 8007b12:	bfdd      	ittte	le
 8007b14:	9907      	ldrle	r1, [sp, #28]
 8007b16:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b1a:	9307      	strle	r3, [sp, #28]
 8007b1c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007b20:	9b05      	ldr	r3, [sp, #20]
 8007b22:	3001      	adds	r0, #1
 8007b24:	3301      	adds	r3, #1
 8007b26:	9305      	str	r3, [sp, #20]
 8007b28:	901b      	str	r0, [sp, #108]	; 0x6c
 8007b2a:	e7bf      	b.n	8007aac <_strtod_l+0x144>
 8007b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b2e:	191a      	adds	r2, r3, r4
 8007b30:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b32:	9a05      	ldr	r2, [sp, #20]
 8007b34:	5d1b      	ldrb	r3, [r3, r4]
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d037      	beq.n	8007baa <_strtod_l+0x242>
 8007b3a:	9c05      	ldr	r4, [sp, #20]
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007b42:	2909      	cmp	r1, #9
 8007b44:	d913      	bls.n	8007b6e <_strtod_l+0x206>
 8007b46:	2101      	movs	r1, #1
 8007b48:	9104      	str	r1, [sp, #16]
 8007b4a:	e7c2      	b.n	8007ad2 <_strtod_l+0x16a>
 8007b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	3001      	adds	r0, #1
 8007b56:	2b30      	cmp	r3, #48	; 0x30
 8007b58:	d0f8      	beq.n	8007b4c <_strtod_l+0x1e4>
 8007b5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007b5e:	2a08      	cmp	r2, #8
 8007b60:	f200 84e4 	bhi.w	800852c <_strtod_l+0xbc4>
 8007b64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b66:	9208      	str	r2, [sp, #32]
 8007b68:	4602      	mov	r2, r0
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007b72:	f100 0101 	add.w	r1, r0, #1
 8007b76:	d012      	beq.n	8007b9e <_strtod_l+0x236>
 8007b78:	440a      	add	r2, r1
 8007b7a:	eb00 0c04 	add.w	ip, r0, r4
 8007b7e:	4621      	mov	r1, r4
 8007b80:	270a      	movs	r7, #10
 8007b82:	458c      	cmp	ip, r1
 8007b84:	d113      	bne.n	8007bae <_strtod_l+0x246>
 8007b86:	1821      	adds	r1, r4, r0
 8007b88:	2908      	cmp	r1, #8
 8007b8a:	f104 0401 	add.w	r4, r4, #1
 8007b8e:	4404      	add	r4, r0
 8007b90:	dc19      	bgt.n	8007bc6 <_strtod_l+0x25e>
 8007b92:	9b07      	ldr	r3, [sp, #28]
 8007b94:	210a      	movs	r1, #10
 8007b96:	fb01 e303 	mla	r3, r1, r3, lr
 8007b9a:	9307      	str	r3, [sp, #28]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ba0:	1c58      	adds	r0, r3, #1
 8007ba2:	901b      	str	r0, [sp, #108]	; 0x6c
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	e7c9      	b.n	8007b3e <_strtod_l+0x1d6>
 8007baa:	9805      	ldr	r0, [sp, #20]
 8007bac:	e7d3      	b.n	8007b56 <_strtod_l+0x1ee>
 8007bae:	2908      	cmp	r1, #8
 8007bb0:	f101 0101 	add.w	r1, r1, #1
 8007bb4:	dc03      	bgt.n	8007bbe <_strtod_l+0x256>
 8007bb6:	9b07      	ldr	r3, [sp, #28]
 8007bb8:	437b      	muls	r3, r7
 8007bba:	9307      	str	r3, [sp, #28]
 8007bbc:	e7e1      	b.n	8007b82 <_strtod_l+0x21a>
 8007bbe:	2910      	cmp	r1, #16
 8007bc0:	bfd8      	it	le
 8007bc2:	437d      	mulle	r5, r7
 8007bc4:	e7dd      	b.n	8007b82 <_strtod_l+0x21a>
 8007bc6:	2c10      	cmp	r4, #16
 8007bc8:	bfdc      	itt	le
 8007bca:	210a      	movle	r1, #10
 8007bcc:	fb01 e505 	mlale	r5, r1, r5, lr
 8007bd0:	e7e4      	b.n	8007b9c <_strtod_l+0x234>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	e781      	b.n	8007adc <_strtod_l+0x174>
 8007bd8:	f04f 0c01 	mov.w	ip, #1
 8007bdc:	1cb3      	adds	r3, r6, #2
 8007bde:	931b      	str	r3, [sp, #108]	; 0x6c
 8007be0:	78b3      	ldrb	r3, [r6, #2]
 8007be2:	e78a      	b.n	8007afa <_strtod_l+0x192>
 8007be4:	f04f 0c00 	mov.w	ip, #0
 8007be8:	e7f8      	b.n	8007bdc <_strtod_l+0x274>
 8007bea:	bf00      	nop
 8007bec:	0800b150 	.word	0x0800b150
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bf6:	1c5f      	adds	r7, r3, #1
 8007bf8:	971b      	str	r7, [sp, #108]	; 0x6c
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b30      	cmp	r3, #48	; 0x30
 8007bfe:	d0f9      	beq.n	8007bf4 <_strtod_l+0x28c>
 8007c00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007c04:	2f08      	cmp	r7, #8
 8007c06:	f63f af7d 	bhi.w	8007b04 <_strtod_l+0x19c>
 8007c0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007c0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c10:	930a      	str	r3, [sp, #40]	; 0x28
 8007c12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c14:	1c5f      	adds	r7, r3, #1
 8007c16:	971b      	str	r7, [sp, #108]	; 0x6c
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007c1e:	f1b8 0f09 	cmp.w	r8, #9
 8007c22:	d937      	bls.n	8007c94 <_strtod_l+0x32c>
 8007c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c26:	1a7f      	subs	r7, r7, r1
 8007c28:	2f08      	cmp	r7, #8
 8007c2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007c2e:	dc37      	bgt.n	8007ca0 <_strtod_l+0x338>
 8007c30:	45be      	cmp	lr, r7
 8007c32:	bfa8      	it	ge
 8007c34:	46be      	movge	lr, r7
 8007c36:	f1bc 0f00 	cmp.w	ip, #0
 8007c3a:	d001      	beq.n	8007c40 <_strtod_l+0x2d8>
 8007c3c:	f1ce 0e00 	rsb	lr, lr, #0
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	d151      	bne.n	8007ce8 <_strtod_l+0x380>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f47f aece 	bne.w	80079e6 <_strtod_l+0x7e>
 8007c4a:	9a06      	ldr	r2, [sp, #24]
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	f47f aeca 	bne.w	80079e6 <_strtod_l+0x7e>
 8007c52:	9a04      	ldr	r2, [sp, #16]
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	f47f aee4 	bne.w	8007a22 <_strtod_l+0xba>
 8007c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8007c5c:	d027      	beq.n	8007cae <_strtod_l+0x346>
 8007c5e:	dc21      	bgt.n	8007ca4 <_strtod_l+0x33c>
 8007c60:	2b49      	cmp	r3, #73	; 0x49
 8007c62:	f47f aede 	bne.w	8007a22 <_strtod_l+0xba>
 8007c66:	49a0      	ldr	r1, [pc, #640]	; (8007ee8 <_strtod_l+0x580>)
 8007c68:	a81b      	add	r0, sp, #108	; 0x6c
 8007c6a:	f001 fdeb 	bl	8009844 <__match>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f43f aed7 	beq.w	8007a22 <_strtod_l+0xba>
 8007c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c76:	499d      	ldr	r1, [pc, #628]	; (8007eec <_strtod_l+0x584>)
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	a81b      	add	r0, sp, #108	; 0x6c
 8007c7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c7e:	f001 fde1 	bl	8009844 <__match>
 8007c82:	b910      	cbnz	r0, 8007c8a <_strtod_l+0x322>
 8007c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c86:	3301      	adds	r3, #1
 8007c88:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c8a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007f00 <_strtod_l+0x598>
 8007c8e:	f04f 0a00 	mov.w	sl, #0
 8007c92:	e6a8      	b.n	80079e6 <_strtod_l+0x7e>
 8007c94:	210a      	movs	r1, #10
 8007c96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007c9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007c9e:	e7b8      	b.n	8007c12 <_strtod_l+0x2aa>
 8007ca0:	46be      	mov	lr, r7
 8007ca2:	e7c8      	b.n	8007c36 <_strtod_l+0x2ce>
 8007ca4:	2b69      	cmp	r3, #105	; 0x69
 8007ca6:	d0de      	beq.n	8007c66 <_strtod_l+0x2fe>
 8007ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8007caa:	f47f aeba 	bne.w	8007a22 <_strtod_l+0xba>
 8007cae:	4990      	ldr	r1, [pc, #576]	; (8007ef0 <_strtod_l+0x588>)
 8007cb0:	a81b      	add	r0, sp, #108	; 0x6c
 8007cb2:	f001 fdc7 	bl	8009844 <__match>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f43f aeb3 	beq.w	8007a22 <_strtod_l+0xba>
 8007cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b28      	cmp	r3, #40	; 0x28
 8007cc2:	d10e      	bne.n	8007ce2 <_strtod_l+0x37a>
 8007cc4:	aa1e      	add	r2, sp, #120	; 0x78
 8007cc6:	498b      	ldr	r1, [pc, #556]	; (8007ef4 <_strtod_l+0x58c>)
 8007cc8:	a81b      	add	r0, sp, #108	; 0x6c
 8007cca:	f001 fdcf 	bl	800986c <__hexnan>
 8007cce:	2805      	cmp	r0, #5
 8007cd0:	d107      	bne.n	8007ce2 <_strtod_l+0x37a>
 8007cd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cd4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007cd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007cdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ce0:	e681      	b.n	80079e6 <_strtod_l+0x7e>
 8007ce2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007f08 <_strtod_l+0x5a0>
 8007ce6:	e7d2      	b.n	8007c8e <_strtod_l+0x326>
 8007ce8:	ebae 0302 	sub.w	r3, lr, r2
 8007cec:	9306      	str	r3, [sp, #24]
 8007cee:	9b05      	ldr	r3, [sp, #20]
 8007cf0:	9807      	ldr	r0, [sp, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bf08      	it	eq
 8007cf6:	4623      	moveq	r3, r4
 8007cf8:	2c10      	cmp	r4, #16
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	46a0      	mov	r8, r4
 8007cfe:	bfa8      	it	ge
 8007d00:	f04f 0810 	movge.w	r8, #16
 8007d04:	f7f8 fbfe 	bl	8000504 <__aeabi_ui2d>
 8007d08:	2c09      	cmp	r4, #9
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	468b      	mov	fp, r1
 8007d0e:	dc13      	bgt.n	8007d38 <_strtod_l+0x3d0>
 8007d10:	9b06      	ldr	r3, [sp, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f43f ae67 	beq.w	80079e6 <_strtod_l+0x7e>
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	dd7a      	ble.n	8007e12 <_strtod_l+0x4aa>
 8007d1c:	2b16      	cmp	r3, #22
 8007d1e:	dc61      	bgt.n	8007de4 <_strtod_l+0x47c>
 8007d20:	4a75      	ldr	r2, [pc, #468]	; (8007ef8 <_strtod_l+0x590>)
 8007d22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007d26:	e9de 0100 	ldrd	r0, r1, [lr]
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	f7f8 fc63 	bl	80005f8 <__aeabi_dmul>
 8007d32:	4682      	mov	sl, r0
 8007d34:	468b      	mov	fp, r1
 8007d36:	e656      	b.n	80079e6 <_strtod_l+0x7e>
 8007d38:	4b6f      	ldr	r3, [pc, #444]	; (8007ef8 <_strtod_l+0x590>)
 8007d3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d42:	f7f8 fc59 	bl	80005f8 <__aeabi_dmul>
 8007d46:	4606      	mov	r6, r0
 8007d48:	4628      	mov	r0, r5
 8007d4a:	460f      	mov	r7, r1
 8007d4c:	f7f8 fbda 	bl	8000504 <__aeabi_ui2d>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 fa98 	bl	800028c <__adddf3>
 8007d5c:	2c0f      	cmp	r4, #15
 8007d5e:	4682      	mov	sl, r0
 8007d60:	468b      	mov	fp, r1
 8007d62:	ddd5      	ble.n	8007d10 <_strtod_l+0x3a8>
 8007d64:	9b06      	ldr	r3, [sp, #24]
 8007d66:	eba4 0808 	sub.w	r8, r4, r8
 8007d6a:	4498      	add	r8, r3
 8007d6c:	f1b8 0f00 	cmp.w	r8, #0
 8007d70:	f340 8096 	ble.w	8007ea0 <_strtod_l+0x538>
 8007d74:	f018 030f 	ands.w	r3, r8, #15
 8007d78:	d00a      	beq.n	8007d90 <_strtod_l+0x428>
 8007d7a:	495f      	ldr	r1, [pc, #380]	; (8007ef8 <_strtod_l+0x590>)
 8007d7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d80:	4652      	mov	r2, sl
 8007d82:	465b      	mov	r3, fp
 8007d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	468b      	mov	fp, r1
 8007d90:	f038 080f 	bics.w	r8, r8, #15
 8007d94:	d073      	beq.n	8007e7e <_strtod_l+0x516>
 8007d96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d9a:	dd47      	ble.n	8007e2c <_strtod_l+0x4c4>
 8007d9c:	2400      	movs	r4, #0
 8007d9e:	46a0      	mov	r8, r4
 8007da0:	9407      	str	r4, [sp, #28]
 8007da2:	9405      	str	r4, [sp, #20]
 8007da4:	2322      	movs	r3, #34	; 0x22
 8007da6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007f00 <_strtod_l+0x598>
 8007daa:	f8c9 3000 	str.w	r3, [r9]
 8007dae:	f04f 0a00 	mov.w	sl, #0
 8007db2:	9b07      	ldr	r3, [sp, #28]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f43f ae16 	beq.w	80079e6 <_strtod_l+0x7e>
 8007dba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007dbc:	4648      	mov	r0, r9
 8007dbe:	f001 fe47 	bl	8009a50 <_Bfree>
 8007dc2:	9905      	ldr	r1, [sp, #20]
 8007dc4:	4648      	mov	r0, r9
 8007dc6:	f001 fe43 	bl	8009a50 <_Bfree>
 8007dca:	4641      	mov	r1, r8
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f001 fe3f 	bl	8009a50 <_Bfree>
 8007dd2:	9907      	ldr	r1, [sp, #28]
 8007dd4:	4648      	mov	r0, r9
 8007dd6:	f001 fe3b 	bl	8009a50 <_Bfree>
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4648      	mov	r0, r9
 8007dde:	f001 fe37 	bl	8009a50 <_Bfree>
 8007de2:	e600      	b.n	80079e6 <_strtod_l+0x7e>
 8007de4:	9a06      	ldr	r2, [sp, #24]
 8007de6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007dea:	4293      	cmp	r3, r2
 8007dec:	dbba      	blt.n	8007d64 <_strtod_l+0x3fc>
 8007dee:	4d42      	ldr	r5, [pc, #264]	; (8007ef8 <_strtod_l+0x590>)
 8007df0:	f1c4 040f 	rsb	r4, r4, #15
 8007df4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007df8:	4652      	mov	r2, sl
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	9b06      	ldr	r3, [sp, #24]
 8007e06:	1b1c      	subs	r4, r3, r4
 8007e08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007e0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e10:	e78d      	b.n	8007d2e <_strtod_l+0x3c6>
 8007e12:	f113 0f16 	cmn.w	r3, #22
 8007e16:	dba5      	blt.n	8007d64 <_strtod_l+0x3fc>
 8007e18:	4a37      	ldr	r2, [pc, #220]	; (8007ef8 <_strtod_l+0x590>)
 8007e1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007e1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007e22:	4650      	mov	r0, sl
 8007e24:	4659      	mov	r1, fp
 8007e26:	f7f8 fd11 	bl	800084c <__aeabi_ddiv>
 8007e2a:	e782      	b.n	8007d32 <_strtod_l+0x3ca>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4e33      	ldr	r6, [pc, #204]	; (8007efc <_strtod_l+0x594>)
 8007e30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007e34:	4650      	mov	r0, sl
 8007e36:	4659      	mov	r1, fp
 8007e38:	461d      	mov	r5, r3
 8007e3a:	f1b8 0f01 	cmp.w	r8, #1
 8007e3e:	dc21      	bgt.n	8007e84 <_strtod_l+0x51c>
 8007e40:	b10b      	cbz	r3, 8007e46 <_strtod_l+0x4de>
 8007e42:	4682      	mov	sl, r0
 8007e44:	468b      	mov	fp, r1
 8007e46:	4b2d      	ldr	r3, [pc, #180]	; (8007efc <_strtod_l+0x594>)
 8007e48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007e4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007e50:	4652      	mov	r2, sl
 8007e52:	465b      	mov	r3, fp
 8007e54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007e58:	f7f8 fbce 	bl	80005f8 <__aeabi_dmul>
 8007e5c:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <_strtod_l+0x598>)
 8007e5e:	460a      	mov	r2, r1
 8007e60:	400b      	ands	r3, r1
 8007e62:	4928      	ldr	r1, [pc, #160]	; (8007f04 <_strtod_l+0x59c>)
 8007e64:	428b      	cmp	r3, r1
 8007e66:	4682      	mov	sl, r0
 8007e68:	d898      	bhi.n	8007d9c <_strtod_l+0x434>
 8007e6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e6e:	428b      	cmp	r3, r1
 8007e70:	bf86      	itte	hi
 8007e72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007f0c <_strtod_l+0x5a4>
 8007e76:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	e077      	b.n	8007f74 <_strtod_l+0x60c>
 8007e84:	f018 0f01 	tst.w	r8, #1
 8007e88:	d006      	beq.n	8007e98 <_strtod_l+0x530>
 8007e8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 fbb1 	bl	80005f8 <__aeabi_dmul>
 8007e96:	2301      	movs	r3, #1
 8007e98:	3501      	adds	r5, #1
 8007e9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e9e:	e7cc      	b.n	8007e3a <_strtod_l+0x4d2>
 8007ea0:	d0ed      	beq.n	8007e7e <_strtod_l+0x516>
 8007ea2:	f1c8 0800 	rsb	r8, r8, #0
 8007ea6:	f018 020f 	ands.w	r2, r8, #15
 8007eaa:	d00a      	beq.n	8007ec2 <_strtod_l+0x55a>
 8007eac:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <_strtod_l+0x590>)
 8007eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 fcc7 	bl	800084c <__aeabi_ddiv>
 8007ebe:	4682      	mov	sl, r0
 8007ec0:	468b      	mov	fp, r1
 8007ec2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ec6:	d0da      	beq.n	8007e7e <_strtod_l+0x516>
 8007ec8:	f1b8 0f1f 	cmp.w	r8, #31
 8007ecc:	dd20      	ble.n	8007f10 <_strtod_l+0x5a8>
 8007ece:	2400      	movs	r4, #0
 8007ed0:	46a0      	mov	r8, r4
 8007ed2:	9407      	str	r4, [sp, #28]
 8007ed4:	9405      	str	r4, [sp, #20]
 8007ed6:	2322      	movs	r3, #34	; 0x22
 8007ed8:	f04f 0a00 	mov.w	sl, #0
 8007edc:	f04f 0b00 	mov.w	fp, #0
 8007ee0:	f8c9 3000 	str.w	r3, [r9]
 8007ee4:	e765      	b.n	8007db2 <_strtod_l+0x44a>
 8007ee6:	bf00      	nop
 8007ee8:	0800b11d 	.word	0x0800b11d
 8007eec:	0800b1a3 	.word	0x0800b1a3
 8007ef0:	0800b125 	.word	0x0800b125
 8007ef4:	0800b164 	.word	0x0800b164
 8007ef8:	0800b1e0 	.word	0x0800b1e0
 8007efc:	0800b1b8 	.word	0x0800b1b8
 8007f00:	7ff00000 	.word	0x7ff00000
 8007f04:	7ca00000 	.word	0x7ca00000
 8007f08:	fff80000 	.word	0xfff80000
 8007f0c:	7fefffff 	.word	0x7fefffff
 8007f10:	f018 0310 	ands.w	r3, r8, #16
 8007f14:	bf18      	it	ne
 8007f16:	236a      	movne	r3, #106	; 0x6a
 8007f18:	4da0      	ldr	r5, [pc, #640]	; (800819c <_strtod_l+0x834>)
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	4659      	mov	r1, fp
 8007f20:	2300      	movs	r3, #0
 8007f22:	f1b8 0f00 	cmp.w	r8, #0
 8007f26:	f300 810a 	bgt.w	800813e <_strtod_l+0x7d6>
 8007f2a:	b10b      	cbz	r3, 8007f30 <_strtod_l+0x5c8>
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	468b      	mov	fp, r1
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	b1bb      	cbz	r3, 8007f64 <_strtod_l+0x5fc>
 8007f34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007f38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	4659      	mov	r1, fp
 8007f40:	dd10      	ble.n	8007f64 <_strtod_l+0x5fc>
 8007f42:	2b1f      	cmp	r3, #31
 8007f44:	f340 8107 	ble.w	8008156 <_strtod_l+0x7ee>
 8007f48:	2b34      	cmp	r3, #52	; 0x34
 8007f4a:	bfde      	ittt	le
 8007f4c:	3b20      	suble	r3, #32
 8007f4e:	f04f 32ff 	movle.w	r2, #4294967295
 8007f52:	fa02 f303 	lslle.w	r3, r2, r3
 8007f56:	f04f 0a00 	mov.w	sl, #0
 8007f5a:	bfcc      	ite	gt
 8007f5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f60:	ea03 0b01 	andle.w	fp, r3, r1
 8007f64:	2200      	movs	r2, #0
 8007f66:	2300      	movs	r3, #0
 8007f68:	4650      	mov	r0, sl
 8007f6a:	4659      	mov	r1, fp
 8007f6c:	f7f8 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1ac      	bne.n	8007ece <_strtod_l+0x566>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	9a05      	ldr	r2, [sp, #20]
 8007f7a:	9908      	ldr	r1, [sp, #32]
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	4648      	mov	r0, r9
 8007f80:	f001 fdb8 	bl	8009af4 <__s2b>
 8007f84:	9007      	str	r0, [sp, #28]
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f43f af08 	beq.w	8007d9c <_strtod_l+0x434>
 8007f8c:	9a06      	ldr	r2, [sp, #24]
 8007f8e:	9b06      	ldr	r3, [sp, #24]
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	f1c3 0300 	rsb	r3, r3, #0
 8007f96:	bfa8      	it	ge
 8007f98:	2300      	movge	r3, #0
 8007f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f9c:	2400      	movs	r4, #0
 8007f9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007fa2:	9316      	str	r3, [sp, #88]	; 0x58
 8007fa4:	46a0      	mov	r8, r4
 8007fa6:	9b07      	ldr	r3, [sp, #28]
 8007fa8:	4648      	mov	r0, r9
 8007faa:	6859      	ldr	r1, [r3, #4]
 8007fac:	f001 fd1c 	bl	80099e8 <_Balloc>
 8007fb0:	9005      	str	r0, [sp, #20]
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f43f aef6 	beq.w	8007da4 <_strtod_l+0x43c>
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	3202      	adds	r2, #2
 8007fbe:	f103 010c 	add.w	r1, r3, #12
 8007fc2:	0092      	lsls	r2, r2, #2
 8007fc4:	300c      	adds	r0, #12
 8007fc6:	f7fe fe39 	bl	8006c3c <memcpy>
 8007fca:	aa1e      	add	r2, sp, #120	; 0x78
 8007fcc:	a91d      	add	r1, sp, #116	; 0x74
 8007fce:	ec4b ab10 	vmov	d0, sl, fp
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007fd8:	f002 f848 	bl	800a06c <__d2b>
 8007fdc:	901c      	str	r0, [sp, #112]	; 0x70
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f43f aee0 	beq.w	8007da4 <_strtod_l+0x43c>
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f001 fe10 	bl	8009c0c <__i2b>
 8007fec:	4680      	mov	r8, r0
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f43f aed8 	beq.w	8007da4 <_strtod_l+0x43c>
 8007ff4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007ff6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	bfab      	itete	ge
 8007ffc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007ffe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008000:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008002:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008004:	bfac      	ite	ge
 8008006:	18f7      	addge	r7, r6, r3
 8008008:	1b9d      	sublt	r5, r3, r6
 800800a:	9b04      	ldr	r3, [sp, #16]
 800800c:	1af6      	subs	r6, r6, r3
 800800e:	4416      	add	r6, r2
 8008010:	4b63      	ldr	r3, [pc, #396]	; (80081a0 <_strtod_l+0x838>)
 8008012:	3e01      	subs	r6, #1
 8008014:	429e      	cmp	r6, r3
 8008016:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800801a:	f280 80af 	bge.w	800817c <_strtod_l+0x814>
 800801e:	1b9b      	subs	r3, r3, r6
 8008020:	2b1f      	cmp	r3, #31
 8008022:	eba2 0203 	sub.w	r2, r2, r3
 8008026:	f04f 0101 	mov.w	r1, #1
 800802a:	f300 809b 	bgt.w	8008164 <_strtod_l+0x7fc>
 800802e:	fa01 f303 	lsl.w	r3, r1, r3
 8008032:	930f      	str	r3, [sp, #60]	; 0x3c
 8008034:	2300      	movs	r3, #0
 8008036:	930a      	str	r3, [sp, #40]	; 0x28
 8008038:	18be      	adds	r6, r7, r2
 800803a:	9b04      	ldr	r3, [sp, #16]
 800803c:	42b7      	cmp	r7, r6
 800803e:	4415      	add	r5, r2
 8008040:	441d      	add	r5, r3
 8008042:	463b      	mov	r3, r7
 8008044:	bfa8      	it	ge
 8008046:	4633      	movge	r3, r6
 8008048:	42ab      	cmp	r3, r5
 800804a:	bfa8      	it	ge
 800804c:	462b      	movge	r3, r5
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfc2      	ittt	gt
 8008052:	1af6      	subgt	r6, r6, r3
 8008054:	1aed      	subgt	r5, r5, r3
 8008056:	1aff      	subgt	r7, r7, r3
 8008058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805a:	b1bb      	cbz	r3, 800808c <_strtod_l+0x724>
 800805c:	4641      	mov	r1, r8
 800805e:	461a      	mov	r2, r3
 8008060:	4648      	mov	r0, r9
 8008062:	f001 fe73 	bl	8009d4c <__pow5mult>
 8008066:	4680      	mov	r8, r0
 8008068:	2800      	cmp	r0, #0
 800806a:	f43f ae9b 	beq.w	8007da4 <_strtod_l+0x43c>
 800806e:	4601      	mov	r1, r0
 8008070:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008072:	4648      	mov	r0, r9
 8008074:	f001 fdd3 	bl	8009c1e <__multiply>
 8008078:	900c      	str	r0, [sp, #48]	; 0x30
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f ae92 	beq.w	8007da4 <_strtod_l+0x43c>
 8008080:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008082:	4648      	mov	r0, r9
 8008084:	f001 fce4 	bl	8009a50 <_Bfree>
 8008088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800808a:	931c      	str	r3, [sp, #112]	; 0x70
 800808c:	2e00      	cmp	r6, #0
 800808e:	dc7a      	bgt.n	8008186 <_strtod_l+0x81e>
 8008090:	9b06      	ldr	r3, [sp, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd08      	ble.n	80080a8 <_strtod_l+0x740>
 8008096:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008098:	9905      	ldr	r1, [sp, #20]
 800809a:	4648      	mov	r0, r9
 800809c:	f001 fe56 	bl	8009d4c <__pow5mult>
 80080a0:	9005      	str	r0, [sp, #20]
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f ae7e 	beq.w	8007da4 <_strtod_l+0x43c>
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	dd08      	ble.n	80080be <_strtod_l+0x756>
 80080ac:	462a      	mov	r2, r5
 80080ae:	9905      	ldr	r1, [sp, #20]
 80080b0:	4648      	mov	r0, r9
 80080b2:	f001 fe99 	bl	8009de8 <__lshift>
 80080b6:	9005      	str	r0, [sp, #20]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f43f ae73 	beq.w	8007da4 <_strtod_l+0x43c>
 80080be:	2f00      	cmp	r7, #0
 80080c0:	dd08      	ble.n	80080d4 <_strtod_l+0x76c>
 80080c2:	4641      	mov	r1, r8
 80080c4:	463a      	mov	r2, r7
 80080c6:	4648      	mov	r0, r9
 80080c8:	f001 fe8e 	bl	8009de8 <__lshift>
 80080cc:	4680      	mov	r8, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f ae68 	beq.w	8007da4 <_strtod_l+0x43c>
 80080d4:	9a05      	ldr	r2, [sp, #20]
 80080d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080d8:	4648      	mov	r0, r9
 80080da:	f001 fef3 	bl	8009ec4 <__mdiff>
 80080de:	4604      	mov	r4, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f43f ae5f 	beq.w	8007da4 <_strtod_l+0x43c>
 80080e6:	68c3      	ldr	r3, [r0, #12]
 80080e8:	930c      	str	r3, [sp, #48]	; 0x30
 80080ea:	2300      	movs	r3, #0
 80080ec:	60c3      	str	r3, [r0, #12]
 80080ee:	4641      	mov	r1, r8
 80080f0:	f001 fece 	bl	8009e90 <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	da55      	bge.n	80081a4 <_strtod_l+0x83c>
 80080f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fa:	b9e3      	cbnz	r3, 8008136 <_strtod_l+0x7ce>
 80080fc:	f1ba 0f00 	cmp.w	sl, #0
 8008100:	d119      	bne.n	8008136 <_strtod_l+0x7ce>
 8008102:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008106:	b9b3      	cbnz	r3, 8008136 <_strtod_l+0x7ce>
 8008108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800810c:	0d1b      	lsrs	r3, r3, #20
 800810e:	051b      	lsls	r3, r3, #20
 8008110:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008114:	d90f      	bls.n	8008136 <_strtod_l+0x7ce>
 8008116:	6963      	ldr	r3, [r4, #20]
 8008118:	b913      	cbnz	r3, 8008120 <_strtod_l+0x7b8>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	2b01      	cmp	r3, #1
 800811e:	dd0a      	ble.n	8008136 <_strtod_l+0x7ce>
 8008120:	4621      	mov	r1, r4
 8008122:	2201      	movs	r2, #1
 8008124:	4648      	mov	r0, r9
 8008126:	f001 fe5f 	bl	8009de8 <__lshift>
 800812a:	4641      	mov	r1, r8
 800812c:	4604      	mov	r4, r0
 800812e:	f001 feaf 	bl	8009e90 <__mcmp>
 8008132:	2800      	cmp	r0, #0
 8008134:	dc67      	bgt.n	8008206 <_strtod_l+0x89e>
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d171      	bne.n	8008220 <_strtod_l+0x8b8>
 800813c:	e63d      	b.n	8007dba <_strtod_l+0x452>
 800813e:	f018 0f01 	tst.w	r8, #1
 8008142:	d004      	beq.n	800814e <_strtod_l+0x7e6>
 8008144:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008148:	f7f8 fa56 	bl	80005f8 <__aeabi_dmul>
 800814c:	2301      	movs	r3, #1
 800814e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008152:	3508      	adds	r5, #8
 8008154:	e6e5      	b.n	8007f22 <_strtod_l+0x5ba>
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	ea03 0a0a 	and.w	sl, r3, sl
 8008162:	e6ff      	b.n	8007f64 <_strtod_l+0x5fc>
 8008164:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008168:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800816c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008170:	36e2      	adds	r6, #226	; 0xe2
 8008172:	fa01 f306 	lsl.w	r3, r1, r6
 8008176:	930a      	str	r3, [sp, #40]	; 0x28
 8008178:	910f      	str	r1, [sp, #60]	; 0x3c
 800817a:	e75d      	b.n	8008038 <_strtod_l+0x6d0>
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	2301      	movs	r3, #1
 8008182:	930f      	str	r3, [sp, #60]	; 0x3c
 8008184:	e758      	b.n	8008038 <_strtod_l+0x6d0>
 8008186:	4632      	mov	r2, r6
 8008188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800818a:	4648      	mov	r0, r9
 800818c:	f001 fe2c 	bl	8009de8 <__lshift>
 8008190:	901c      	str	r0, [sp, #112]	; 0x70
 8008192:	2800      	cmp	r0, #0
 8008194:	f47f af7c 	bne.w	8008090 <_strtod_l+0x728>
 8008198:	e604      	b.n	8007da4 <_strtod_l+0x43c>
 800819a:	bf00      	nop
 800819c:	0800b178 	.word	0x0800b178
 80081a0:	fffffc02 	.word	0xfffffc02
 80081a4:	465d      	mov	r5, fp
 80081a6:	f040 8086 	bne.w	80082b6 <_strtod_l+0x94e>
 80081aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081b0:	b32a      	cbz	r2, 80081fe <_strtod_l+0x896>
 80081b2:	4aaf      	ldr	r2, [pc, #700]	; (8008470 <_strtod_l+0xb08>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d153      	bne.n	8008260 <_strtod_l+0x8f8>
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	4650      	mov	r0, sl
 80081bc:	b1d3      	cbz	r3, 80081f4 <_strtod_l+0x88c>
 80081be:	4aad      	ldr	r2, [pc, #692]	; (8008474 <_strtod_l+0xb0c>)
 80081c0:	402a      	ands	r2, r5
 80081c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80081c6:	f04f 31ff 	mov.w	r1, #4294967295
 80081ca:	d816      	bhi.n	80081fa <_strtod_l+0x892>
 80081cc:	0d12      	lsrs	r2, r2, #20
 80081ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	4298      	cmp	r0, r3
 80081d8:	d142      	bne.n	8008260 <_strtod_l+0x8f8>
 80081da:	4ba7      	ldr	r3, [pc, #668]	; (8008478 <_strtod_l+0xb10>)
 80081dc:	429d      	cmp	r5, r3
 80081de:	d102      	bne.n	80081e6 <_strtod_l+0x87e>
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f addf 	beq.w	8007da4 <_strtod_l+0x43c>
 80081e6:	4ba3      	ldr	r3, [pc, #652]	; (8008474 <_strtod_l+0xb0c>)
 80081e8:	402b      	ands	r3, r5
 80081ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80081ee:	f04f 0a00 	mov.w	sl, #0
 80081f2:	e7a0      	b.n	8008136 <_strtod_l+0x7ce>
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	e7ed      	b.n	80081d6 <_strtod_l+0x86e>
 80081fa:	460b      	mov	r3, r1
 80081fc:	e7eb      	b.n	80081d6 <_strtod_l+0x86e>
 80081fe:	bb7b      	cbnz	r3, 8008260 <_strtod_l+0x8f8>
 8008200:	f1ba 0f00 	cmp.w	sl, #0
 8008204:	d12c      	bne.n	8008260 <_strtod_l+0x8f8>
 8008206:	9904      	ldr	r1, [sp, #16]
 8008208:	4a9a      	ldr	r2, [pc, #616]	; (8008474 <_strtod_l+0xb0c>)
 800820a:	465b      	mov	r3, fp
 800820c:	b1f1      	cbz	r1, 800824c <_strtod_l+0x8e4>
 800820e:	ea02 010b 	and.w	r1, r2, fp
 8008212:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008216:	dc19      	bgt.n	800824c <_strtod_l+0x8e4>
 8008218:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800821c:	f77f ae5b 	ble.w	8007ed6 <_strtod_l+0x56e>
 8008220:	4a96      	ldr	r2, [pc, #600]	; (800847c <_strtod_l+0xb14>)
 8008222:	2300      	movs	r3, #0
 8008224:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008228:	4650      	mov	r0, sl
 800822a:	4659      	mov	r1, fp
 800822c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008230:	f7f8 f9e2 	bl	80005f8 <__aeabi_dmul>
 8008234:	4682      	mov	sl, r0
 8008236:	468b      	mov	fp, r1
 8008238:	2900      	cmp	r1, #0
 800823a:	f47f adbe 	bne.w	8007dba <_strtod_l+0x452>
 800823e:	2800      	cmp	r0, #0
 8008240:	f47f adbb 	bne.w	8007dba <_strtod_l+0x452>
 8008244:	2322      	movs	r3, #34	; 0x22
 8008246:	f8c9 3000 	str.w	r3, [r9]
 800824a:	e5b6      	b.n	8007dba <_strtod_l+0x452>
 800824c:	4013      	ands	r3, r2
 800824e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008252:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008256:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800825a:	f04f 3aff 	mov.w	sl, #4294967295
 800825e:	e76a      	b.n	8008136 <_strtod_l+0x7ce>
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	b193      	cbz	r3, 800828a <_strtod_l+0x922>
 8008264:	422b      	tst	r3, r5
 8008266:	f43f af66 	beq.w	8008136 <_strtod_l+0x7ce>
 800826a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800826c:	9a04      	ldr	r2, [sp, #16]
 800826e:	4650      	mov	r0, sl
 8008270:	4659      	mov	r1, fp
 8008272:	b173      	cbz	r3, 8008292 <_strtod_l+0x92a>
 8008274:	f7ff fb5a 	bl	800792c <sulp>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008280:	f7f8 f804 	bl	800028c <__adddf3>
 8008284:	4682      	mov	sl, r0
 8008286:	468b      	mov	fp, r1
 8008288:	e755      	b.n	8008136 <_strtod_l+0x7ce>
 800828a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800828c:	ea13 0f0a 	tst.w	r3, sl
 8008290:	e7e9      	b.n	8008266 <_strtod_l+0x8fe>
 8008292:	f7ff fb4b 	bl	800792c <sulp>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800829e:	f7f7 fff3 	bl	8000288 <__aeabi_dsub>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4682      	mov	sl, r0
 80082a8:	468b      	mov	fp, r1
 80082aa:	f7f8 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f47f ae11 	bne.w	8007ed6 <_strtod_l+0x56e>
 80082b4:	e73f      	b.n	8008136 <_strtod_l+0x7ce>
 80082b6:	4641      	mov	r1, r8
 80082b8:	4620      	mov	r0, r4
 80082ba:	f001 ff26 	bl	800a10a <__ratio>
 80082be:	ec57 6b10 	vmov	r6, r7, d0
 80082c2:	2200      	movs	r2, #0
 80082c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082c8:	ee10 0a10 	vmov	r0, s0
 80082cc:	4639      	mov	r1, r7
 80082ce:	f7f8 fc0f 	bl	8000af0 <__aeabi_dcmple>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d077      	beq.n	80083c6 <_strtod_l+0xa5e>
 80082d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d04a      	beq.n	8008372 <_strtod_l+0xa0a>
 80082dc:	4b68      	ldr	r3, [pc, #416]	; (8008480 <_strtod_l+0xb18>)
 80082de:	2200      	movs	r2, #0
 80082e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082e4:	4f66      	ldr	r7, [pc, #408]	; (8008480 <_strtod_l+0xb18>)
 80082e6:	2600      	movs	r6, #0
 80082e8:	4b62      	ldr	r3, [pc, #392]	; (8008474 <_strtod_l+0xb0c>)
 80082ea:	402b      	ands	r3, r5
 80082ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082f0:	4b64      	ldr	r3, [pc, #400]	; (8008484 <_strtod_l+0xb1c>)
 80082f2:	429a      	cmp	r2, r3
 80082f4:	f040 80ce 	bne.w	8008494 <_strtod_l+0xb2c>
 80082f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008300:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008304:	ec4b ab10 	vmov	d0, sl, fp
 8008308:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800830c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008310:	f001 fe36 	bl	8009f80 <__ulp>
 8008314:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008318:	ec53 2b10 	vmov	r2, r3, d0
 800831c:	f7f8 f96c 	bl	80005f8 <__aeabi_dmul>
 8008320:	4652      	mov	r2, sl
 8008322:	465b      	mov	r3, fp
 8008324:	f7f7 ffb2 	bl	800028c <__adddf3>
 8008328:	460b      	mov	r3, r1
 800832a:	4952      	ldr	r1, [pc, #328]	; (8008474 <_strtod_l+0xb0c>)
 800832c:	4a56      	ldr	r2, [pc, #344]	; (8008488 <_strtod_l+0xb20>)
 800832e:	4019      	ands	r1, r3
 8008330:	4291      	cmp	r1, r2
 8008332:	4682      	mov	sl, r0
 8008334:	d95b      	bls.n	80083ee <_strtod_l+0xa86>
 8008336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008338:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800833c:	4293      	cmp	r3, r2
 800833e:	d103      	bne.n	8008348 <_strtod_l+0x9e0>
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	3301      	adds	r3, #1
 8008344:	f43f ad2e 	beq.w	8007da4 <_strtod_l+0x43c>
 8008348:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008478 <_strtod_l+0xb10>
 800834c:	f04f 3aff 	mov.w	sl, #4294967295
 8008350:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008352:	4648      	mov	r0, r9
 8008354:	f001 fb7c 	bl	8009a50 <_Bfree>
 8008358:	9905      	ldr	r1, [sp, #20]
 800835a:	4648      	mov	r0, r9
 800835c:	f001 fb78 	bl	8009a50 <_Bfree>
 8008360:	4641      	mov	r1, r8
 8008362:	4648      	mov	r0, r9
 8008364:	f001 fb74 	bl	8009a50 <_Bfree>
 8008368:	4621      	mov	r1, r4
 800836a:	4648      	mov	r0, r9
 800836c:	f001 fb70 	bl	8009a50 <_Bfree>
 8008370:	e619      	b.n	8007fa6 <_strtod_l+0x63e>
 8008372:	f1ba 0f00 	cmp.w	sl, #0
 8008376:	d11a      	bne.n	80083ae <_strtod_l+0xa46>
 8008378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800837c:	b9eb      	cbnz	r3, 80083ba <_strtod_l+0xa52>
 800837e:	2200      	movs	r2, #0
 8008380:	4b3f      	ldr	r3, [pc, #252]	; (8008480 <_strtod_l+0xb18>)
 8008382:	4630      	mov	r0, r6
 8008384:	4639      	mov	r1, r7
 8008386:	f7f8 fba9 	bl	8000adc <__aeabi_dcmplt>
 800838a:	b9c8      	cbnz	r0, 80083c0 <_strtod_l+0xa58>
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	2200      	movs	r2, #0
 8008392:	4b3e      	ldr	r3, [pc, #248]	; (800848c <_strtod_l+0xb24>)
 8008394:	f7f8 f930 	bl	80005f8 <__aeabi_dmul>
 8008398:	4606      	mov	r6, r0
 800839a:	460f      	mov	r7, r1
 800839c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80083a0:	9618      	str	r6, [sp, #96]	; 0x60
 80083a2:	9319      	str	r3, [sp, #100]	; 0x64
 80083a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80083a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80083ac:	e79c      	b.n	80082e8 <_strtod_l+0x980>
 80083ae:	f1ba 0f01 	cmp.w	sl, #1
 80083b2:	d102      	bne.n	80083ba <_strtod_l+0xa52>
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	f43f ad8e 	beq.w	8007ed6 <_strtod_l+0x56e>
 80083ba:	2200      	movs	r2, #0
 80083bc:	4b34      	ldr	r3, [pc, #208]	; (8008490 <_strtod_l+0xb28>)
 80083be:	e78f      	b.n	80082e0 <_strtod_l+0x978>
 80083c0:	2600      	movs	r6, #0
 80083c2:	4f32      	ldr	r7, [pc, #200]	; (800848c <_strtod_l+0xb24>)
 80083c4:	e7ea      	b.n	800839c <_strtod_l+0xa34>
 80083c6:	4b31      	ldr	r3, [pc, #196]	; (800848c <_strtod_l+0xb24>)
 80083c8:	4630      	mov	r0, r6
 80083ca:	4639      	mov	r1, r7
 80083cc:	2200      	movs	r2, #0
 80083ce:	f7f8 f913 	bl	80005f8 <__aeabi_dmul>
 80083d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d4:	4606      	mov	r6, r0
 80083d6:	460f      	mov	r7, r1
 80083d8:	b933      	cbnz	r3, 80083e8 <_strtod_l+0xa80>
 80083da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083de:	9010      	str	r0, [sp, #64]	; 0x40
 80083e0:	9311      	str	r3, [sp, #68]	; 0x44
 80083e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083e6:	e7df      	b.n	80083a8 <_strtod_l+0xa40>
 80083e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80083ec:	e7f9      	b.n	80083e2 <_strtod_l+0xa7a>
 80083ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80083f2:	9b04      	ldr	r3, [sp, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1ab      	bne.n	8008350 <_strtod_l+0x9e8>
 80083f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083fc:	0d1b      	lsrs	r3, r3, #20
 80083fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008400:	051b      	lsls	r3, r3, #20
 8008402:	429a      	cmp	r2, r3
 8008404:	465d      	mov	r5, fp
 8008406:	d1a3      	bne.n	8008350 <_strtod_l+0x9e8>
 8008408:	4639      	mov	r1, r7
 800840a:	4630      	mov	r0, r6
 800840c:	f7f8 fba4 	bl	8000b58 <__aeabi_d2iz>
 8008410:	f7f8 f888 	bl	8000524 <__aeabi_i2d>
 8008414:	460b      	mov	r3, r1
 8008416:	4602      	mov	r2, r0
 8008418:	4639      	mov	r1, r7
 800841a:	4630      	mov	r0, r6
 800841c:	f7f7 ff34 	bl	8000288 <__aeabi_dsub>
 8008420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008422:	4606      	mov	r6, r0
 8008424:	460f      	mov	r7, r1
 8008426:	b933      	cbnz	r3, 8008436 <_strtod_l+0xace>
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	d103      	bne.n	8008436 <_strtod_l+0xace>
 800842e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008432:	2d00      	cmp	r5, #0
 8008434:	d06d      	beq.n	8008512 <_strtod_l+0xbaa>
 8008436:	a30a      	add	r3, pc, #40	; (adr r3, 8008460 <_strtod_l+0xaf8>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f47f acb8 	bne.w	8007dba <_strtod_l+0x452>
 800844a:	a307      	add	r3, pc, #28	; (adr r3, 8008468 <_strtod_l+0xb00>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f8 fb60 	bl	8000b18 <__aeabi_dcmpgt>
 8008458:	2800      	cmp	r0, #0
 800845a:	f43f af79 	beq.w	8008350 <_strtod_l+0x9e8>
 800845e:	e4ac      	b.n	8007dba <_strtod_l+0x452>
 8008460:	94a03595 	.word	0x94a03595
 8008464:	3fdfffff 	.word	0x3fdfffff
 8008468:	35afe535 	.word	0x35afe535
 800846c:	3fe00000 	.word	0x3fe00000
 8008470:	000fffff 	.word	0x000fffff
 8008474:	7ff00000 	.word	0x7ff00000
 8008478:	7fefffff 	.word	0x7fefffff
 800847c:	39500000 	.word	0x39500000
 8008480:	3ff00000 	.word	0x3ff00000
 8008484:	7fe00000 	.word	0x7fe00000
 8008488:	7c9fffff 	.word	0x7c9fffff
 800848c:	3fe00000 	.word	0x3fe00000
 8008490:	bff00000 	.word	0xbff00000
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	b333      	cbz	r3, 80084e6 <_strtod_l+0xb7e>
 8008498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800849a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800849e:	d822      	bhi.n	80084e6 <_strtod_l+0xb7e>
 80084a0:	a327      	add	r3, pc, #156	; (adr r3, 8008540 <_strtod_l+0xbd8>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f8 fb21 	bl	8000af0 <__aeabi_dcmple>
 80084ae:	b1a0      	cbz	r0, 80084da <_strtod_l+0xb72>
 80084b0:	4639      	mov	r1, r7
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7f8 fb78 	bl	8000ba8 <__aeabi_d2uiz>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	bf08      	it	eq
 80084bc:	2001      	moveq	r0, #1
 80084be:	f7f8 f821 	bl	8000504 <__aeabi_ui2d>
 80084c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	bb03      	cbnz	r3, 800850c <_strtod_l+0xba4>
 80084ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084ce:	9012      	str	r0, [sp, #72]	; 0x48
 80084d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80084d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80084d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80084ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80084ee:	f001 fd47 	bl	8009f80 <__ulp>
 80084f2:	4650      	mov	r0, sl
 80084f4:	ec53 2b10 	vmov	r2, r3, d0
 80084f8:	4659      	mov	r1, fp
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008502:	f7f7 fec3 	bl	800028c <__adddf3>
 8008506:	4682      	mov	sl, r0
 8008508:	468b      	mov	fp, r1
 800850a:	e772      	b.n	80083f2 <_strtod_l+0xa8a>
 800850c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008510:	e7df      	b.n	80084d2 <_strtod_l+0xb6a>
 8008512:	a30d      	add	r3, pc, #52	; (adr r3, 8008548 <_strtod_l+0xbe0>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f8 fae0 	bl	8000adc <__aeabi_dcmplt>
 800851c:	e79c      	b.n	8008458 <_strtod_l+0xaf0>
 800851e:	2300      	movs	r3, #0
 8008520:	930d      	str	r3, [sp, #52]	; 0x34
 8008522:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	f7ff ba61 	b.w	80079ee <_strtod_l+0x86>
 800852c:	2b65      	cmp	r3, #101	; 0x65
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	f43f ab4e 	beq.w	8007bd2 <_strtod_l+0x26a>
 8008536:	2101      	movs	r1, #1
 8008538:	4614      	mov	r4, r2
 800853a:	9104      	str	r1, [sp, #16]
 800853c:	f7ff bacb 	b.w	8007ad6 <_strtod_l+0x16e>
 8008540:	ffc00000 	.word	0xffc00000
 8008544:	41dfffff 	.word	0x41dfffff
 8008548:	94a03595 	.word	0x94a03595
 800854c:	3fcfffff 	.word	0x3fcfffff

08008550 <_strtod_r>:
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <_strtod_r+0x18>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	b410      	push	{r4}
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	4c04      	ldr	r4, [pc, #16]	; (800856c <_strtod_r+0x1c>)
 800855a:	2b00      	cmp	r3, #0
 800855c:	bf08      	it	eq
 800855e:	4623      	moveq	r3, r4
 8008560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008564:	f7ff ba00 	b.w	8007968 <_strtod_l>
 8008568:	20000fb0 	.word	0x20000fb0
 800856c:	20001014 	.word	0x20001014

08008570 <strtod>:
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <strtod+0x20>)
 8008572:	4a08      	ldr	r2, [pc, #32]	; (8008594 <strtod+0x24>)
 8008574:	b410      	push	{r4}
 8008576:	681c      	ldr	r4, [r3, #0]
 8008578:	6a23      	ldr	r3, [r4, #32]
 800857a:	2b00      	cmp	r3, #0
 800857c:	bf08      	it	eq
 800857e:	4613      	moveq	r3, r2
 8008580:	460a      	mov	r2, r1
 8008582:	4601      	mov	r1, r0
 8008584:	4620      	mov	r0, r4
 8008586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800858a:	f7ff b9ed 	b.w	8007968 <_strtod_l>
 800858e:	bf00      	nop
 8008590:	20000fb0 	.word	0x20000fb0
 8008594:	20001014 	.word	0x20001014

08008598 <_strtol_l.isra.0>:
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	4680      	mov	r8, r0
 800859e:	4689      	mov	r9, r1
 80085a0:	4692      	mov	sl, r2
 80085a2:	461e      	mov	r6, r3
 80085a4:	460f      	mov	r7, r1
 80085a6:	463d      	mov	r5, r7
 80085a8:	9808      	ldr	r0, [sp, #32]
 80085aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085ae:	f001 f9ed 	bl	800998c <__locale_ctype_ptr_l>
 80085b2:	4420      	add	r0, r4
 80085b4:	7843      	ldrb	r3, [r0, #1]
 80085b6:	f013 0308 	ands.w	r3, r3, #8
 80085ba:	d132      	bne.n	8008622 <_strtol_l.isra.0+0x8a>
 80085bc:	2c2d      	cmp	r4, #45	; 0x2d
 80085be:	d132      	bne.n	8008626 <_strtol_l.isra.0+0x8e>
 80085c0:	787c      	ldrb	r4, [r7, #1]
 80085c2:	1cbd      	adds	r5, r7, #2
 80085c4:	2201      	movs	r2, #1
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d05d      	beq.n	8008686 <_strtol_l.isra.0+0xee>
 80085ca:	2e10      	cmp	r6, #16
 80085cc:	d109      	bne.n	80085e2 <_strtol_l.isra.0+0x4a>
 80085ce:	2c30      	cmp	r4, #48	; 0x30
 80085d0:	d107      	bne.n	80085e2 <_strtol_l.isra.0+0x4a>
 80085d2:	782b      	ldrb	r3, [r5, #0]
 80085d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085d8:	2b58      	cmp	r3, #88	; 0x58
 80085da:	d14f      	bne.n	800867c <_strtol_l.isra.0+0xe4>
 80085dc:	786c      	ldrb	r4, [r5, #1]
 80085de:	2610      	movs	r6, #16
 80085e0:	3502      	adds	r5, #2
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	bf14      	ite	ne
 80085e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80085ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80085ee:	2700      	movs	r7, #0
 80085f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80085f4:	4638      	mov	r0, r7
 80085f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80085fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80085fe:	2b09      	cmp	r3, #9
 8008600:	d817      	bhi.n	8008632 <_strtol_l.isra.0+0x9a>
 8008602:	461c      	mov	r4, r3
 8008604:	42a6      	cmp	r6, r4
 8008606:	dd23      	ble.n	8008650 <_strtol_l.isra.0+0xb8>
 8008608:	1c7b      	adds	r3, r7, #1
 800860a:	d007      	beq.n	800861c <_strtol_l.isra.0+0x84>
 800860c:	4584      	cmp	ip, r0
 800860e:	d31c      	bcc.n	800864a <_strtol_l.isra.0+0xb2>
 8008610:	d101      	bne.n	8008616 <_strtol_l.isra.0+0x7e>
 8008612:	45a6      	cmp	lr, r4
 8008614:	db19      	blt.n	800864a <_strtol_l.isra.0+0xb2>
 8008616:	fb00 4006 	mla	r0, r0, r6, r4
 800861a:	2701      	movs	r7, #1
 800861c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008620:	e7eb      	b.n	80085fa <_strtol_l.isra.0+0x62>
 8008622:	462f      	mov	r7, r5
 8008624:	e7bf      	b.n	80085a6 <_strtol_l.isra.0+0xe>
 8008626:	2c2b      	cmp	r4, #43	; 0x2b
 8008628:	bf04      	itt	eq
 800862a:	1cbd      	addeq	r5, r7, #2
 800862c:	787c      	ldrbeq	r4, [r7, #1]
 800862e:	461a      	mov	r2, r3
 8008630:	e7c9      	b.n	80085c6 <_strtol_l.isra.0+0x2e>
 8008632:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008636:	2b19      	cmp	r3, #25
 8008638:	d801      	bhi.n	800863e <_strtol_l.isra.0+0xa6>
 800863a:	3c37      	subs	r4, #55	; 0x37
 800863c:	e7e2      	b.n	8008604 <_strtol_l.isra.0+0x6c>
 800863e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008642:	2b19      	cmp	r3, #25
 8008644:	d804      	bhi.n	8008650 <_strtol_l.isra.0+0xb8>
 8008646:	3c57      	subs	r4, #87	; 0x57
 8008648:	e7dc      	b.n	8008604 <_strtol_l.isra.0+0x6c>
 800864a:	f04f 37ff 	mov.w	r7, #4294967295
 800864e:	e7e5      	b.n	800861c <_strtol_l.isra.0+0x84>
 8008650:	1c7b      	adds	r3, r7, #1
 8008652:	d108      	bne.n	8008666 <_strtol_l.isra.0+0xce>
 8008654:	2322      	movs	r3, #34	; 0x22
 8008656:	f8c8 3000 	str.w	r3, [r8]
 800865a:	4608      	mov	r0, r1
 800865c:	f1ba 0f00 	cmp.w	sl, #0
 8008660:	d107      	bne.n	8008672 <_strtol_l.isra.0+0xda>
 8008662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008666:	b102      	cbz	r2, 800866a <_strtol_l.isra.0+0xd2>
 8008668:	4240      	negs	r0, r0
 800866a:	f1ba 0f00 	cmp.w	sl, #0
 800866e:	d0f8      	beq.n	8008662 <_strtol_l.isra.0+0xca>
 8008670:	b10f      	cbz	r7, 8008676 <_strtol_l.isra.0+0xde>
 8008672:	f105 39ff 	add.w	r9, r5, #4294967295
 8008676:	f8ca 9000 	str.w	r9, [sl]
 800867a:	e7f2      	b.n	8008662 <_strtol_l.isra.0+0xca>
 800867c:	2430      	movs	r4, #48	; 0x30
 800867e:	2e00      	cmp	r6, #0
 8008680:	d1af      	bne.n	80085e2 <_strtol_l.isra.0+0x4a>
 8008682:	2608      	movs	r6, #8
 8008684:	e7ad      	b.n	80085e2 <_strtol_l.isra.0+0x4a>
 8008686:	2c30      	cmp	r4, #48	; 0x30
 8008688:	d0a3      	beq.n	80085d2 <_strtol_l.isra.0+0x3a>
 800868a:	260a      	movs	r6, #10
 800868c:	e7a9      	b.n	80085e2 <_strtol_l.isra.0+0x4a>
	...

08008690 <_strtol_r>:
 8008690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008692:	4c06      	ldr	r4, [pc, #24]	; (80086ac <_strtol_r+0x1c>)
 8008694:	4d06      	ldr	r5, [pc, #24]	; (80086b0 <_strtol_r+0x20>)
 8008696:	6824      	ldr	r4, [r4, #0]
 8008698:	6a24      	ldr	r4, [r4, #32]
 800869a:	2c00      	cmp	r4, #0
 800869c:	bf08      	it	eq
 800869e:	462c      	moveq	r4, r5
 80086a0:	9400      	str	r4, [sp, #0]
 80086a2:	f7ff ff79 	bl	8008598 <_strtol_l.isra.0>
 80086a6:	b003      	add	sp, #12
 80086a8:	bd30      	pop	{r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	20000fb0 	.word	0x20000fb0
 80086b0:	20001014 	.word	0x20001014

080086b4 <quorem>:
 80086b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	6903      	ldr	r3, [r0, #16]
 80086ba:	690c      	ldr	r4, [r1, #16]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	4680      	mov	r8, r0
 80086c0:	f2c0 8082 	blt.w	80087c8 <quorem+0x114>
 80086c4:	3c01      	subs	r4, #1
 80086c6:	f101 0714 	add.w	r7, r1, #20
 80086ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80086ce:	f100 0614 	add.w	r6, r0, #20
 80086d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80086d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80086da:	eb06 030c 	add.w	r3, r6, ip
 80086de:	3501      	adds	r5, #1
 80086e0:	eb07 090c 	add.w	r9, r7, ip
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80086ea:	b395      	cbz	r5, 8008752 <quorem+0x9e>
 80086ec:	f04f 0a00 	mov.w	sl, #0
 80086f0:	4638      	mov	r0, r7
 80086f2:	46b6      	mov	lr, r6
 80086f4:	46d3      	mov	fp, sl
 80086f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80086fa:	b293      	uxth	r3, r2
 80086fc:	fb05 a303 	mla	r3, r5, r3, sl
 8008700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008704:	b29b      	uxth	r3, r3
 8008706:	ebab 0303 	sub.w	r3, fp, r3
 800870a:	0c12      	lsrs	r2, r2, #16
 800870c:	f8de b000 	ldr.w	fp, [lr]
 8008710:	fb05 a202 	mla	r2, r5, r2, sl
 8008714:	fa13 f38b 	uxtah	r3, r3, fp
 8008718:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800871c:	fa1f fb82 	uxth.w	fp, r2
 8008720:	f8de 2000 	ldr.w	r2, [lr]
 8008724:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800872c:	b29b      	uxth	r3, r3
 800872e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008732:	4581      	cmp	r9, r0
 8008734:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008738:	f84e 3b04 	str.w	r3, [lr], #4
 800873c:	d2db      	bcs.n	80086f6 <quorem+0x42>
 800873e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008742:	b933      	cbnz	r3, 8008752 <quorem+0x9e>
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	3b04      	subs	r3, #4
 8008748:	429e      	cmp	r6, r3
 800874a:	461a      	mov	r2, r3
 800874c:	d330      	bcc.n	80087b0 <quorem+0xfc>
 800874e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008752:	4640      	mov	r0, r8
 8008754:	f001 fb9c 	bl	8009e90 <__mcmp>
 8008758:	2800      	cmp	r0, #0
 800875a:	db25      	blt.n	80087a8 <quorem+0xf4>
 800875c:	3501      	adds	r5, #1
 800875e:	4630      	mov	r0, r6
 8008760:	f04f 0c00 	mov.w	ip, #0
 8008764:	f857 2b04 	ldr.w	r2, [r7], #4
 8008768:	f8d0 e000 	ldr.w	lr, [r0]
 800876c:	b293      	uxth	r3, r2
 800876e:	ebac 0303 	sub.w	r3, ip, r3
 8008772:	0c12      	lsrs	r2, r2, #16
 8008774:	fa13 f38e 	uxtah	r3, r3, lr
 8008778:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800877c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008780:	b29b      	uxth	r3, r3
 8008782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008786:	45b9      	cmp	r9, r7
 8008788:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800878c:	f840 3b04 	str.w	r3, [r0], #4
 8008790:	d2e8      	bcs.n	8008764 <quorem+0xb0>
 8008792:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008796:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800879a:	b92a      	cbnz	r2, 80087a8 <quorem+0xf4>
 800879c:	3b04      	subs	r3, #4
 800879e:	429e      	cmp	r6, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	d30b      	bcc.n	80087bc <quorem+0x108>
 80087a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80087a8:	4628      	mov	r0, r5
 80087aa:	b003      	add	sp, #12
 80087ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b0:	6812      	ldr	r2, [r2, #0]
 80087b2:	3b04      	subs	r3, #4
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	d1ca      	bne.n	800874e <quorem+0x9a>
 80087b8:	3c01      	subs	r4, #1
 80087ba:	e7c5      	b.n	8008748 <quorem+0x94>
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	3b04      	subs	r3, #4
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	d1ef      	bne.n	80087a4 <quorem+0xf0>
 80087c4:	3c01      	subs	r4, #1
 80087c6:	e7ea      	b.n	800879e <quorem+0xea>
 80087c8:	2000      	movs	r0, #0
 80087ca:	e7ee      	b.n	80087aa <quorem+0xf6>
 80087cc:	0000      	movs	r0, r0
	...

080087d0 <_dtoa_r>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	ec57 6b10 	vmov	r6, r7, d0
 80087d8:	b097      	sub	sp, #92	; 0x5c
 80087da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087dc:	9106      	str	r1, [sp, #24]
 80087de:	4604      	mov	r4, r0
 80087e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80087e2:	9312      	str	r3, [sp, #72]	; 0x48
 80087e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80087e8:	e9cd 6700 	strd	r6, r7, [sp]
 80087ec:	b93d      	cbnz	r5, 80087fe <_dtoa_r+0x2e>
 80087ee:	2010      	movs	r0, #16
 80087f0:	f001 f8e0 	bl	80099b4 <malloc>
 80087f4:	6260      	str	r0, [r4, #36]	; 0x24
 80087f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087fa:	6005      	str	r5, [r0, #0]
 80087fc:	60c5      	str	r5, [r0, #12]
 80087fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008800:	6819      	ldr	r1, [r3, #0]
 8008802:	b151      	cbz	r1, 800881a <_dtoa_r+0x4a>
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	604a      	str	r2, [r1, #4]
 8008808:	2301      	movs	r3, #1
 800880a:	4093      	lsls	r3, r2
 800880c:	608b      	str	r3, [r1, #8]
 800880e:	4620      	mov	r0, r4
 8008810:	f001 f91e 	bl	8009a50 <_Bfree>
 8008814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	1e3b      	subs	r3, r7, #0
 800881c:	bfbb      	ittet	lt
 800881e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008822:	9301      	strlt	r3, [sp, #4]
 8008824:	2300      	movge	r3, #0
 8008826:	2201      	movlt	r2, #1
 8008828:	bfac      	ite	ge
 800882a:	f8c8 3000 	strge.w	r3, [r8]
 800882e:	f8c8 2000 	strlt.w	r2, [r8]
 8008832:	4baf      	ldr	r3, [pc, #700]	; (8008af0 <_dtoa_r+0x320>)
 8008834:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008838:	ea33 0308 	bics.w	r3, r3, r8
 800883c:	d114      	bne.n	8008868 <_dtoa_r+0x98>
 800883e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008840:	f242 730f 	movw	r3, #9999	; 0x270f
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	b923      	cbnz	r3, 8008854 <_dtoa_r+0x84>
 800884a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800884e:	2800      	cmp	r0, #0
 8008850:	f000 8542 	beq.w	80092d8 <_dtoa_r+0xb08>
 8008854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008856:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008b04 <_dtoa_r+0x334>
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 8544 	beq.w	80092e8 <_dtoa_r+0xb18>
 8008860:	f10b 0303 	add.w	r3, fp, #3
 8008864:	f000 bd3e 	b.w	80092e4 <_dtoa_r+0xb14>
 8008868:	e9dd 6700 	ldrd	r6, r7, [sp]
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f8 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8008878:	4681      	mov	r9, r0
 800887a:	b168      	cbz	r0, 8008898 <_dtoa_r+0xc8>
 800887c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800887e:	2301      	movs	r3, #1
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8524 	beq.w	80092d2 <_dtoa_r+0xb02>
 800888a:	4b9a      	ldr	r3, [pc, #616]	; (8008af4 <_dtoa_r+0x324>)
 800888c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800888e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	f000 bd28 	b.w	80092e8 <_dtoa_r+0xb18>
 8008898:	aa14      	add	r2, sp, #80	; 0x50
 800889a:	a915      	add	r1, sp, #84	; 0x54
 800889c:	ec47 6b10 	vmov	d0, r6, r7
 80088a0:	4620      	mov	r0, r4
 80088a2:	f001 fbe3 	bl	800a06c <__d2b>
 80088a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088aa:	9004      	str	r0, [sp, #16]
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	d07c      	beq.n	80089aa <_dtoa_r+0x1da>
 80088b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80088b8:	46b2      	mov	sl, r6
 80088ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80088be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80088c6:	2200      	movs	r2, #0
 80088c8:	4b8b      	ldr	r3, [pc, #556]	; (8008af8 <_dtoa_r+0x328>)
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	f7f7 fcdb 	bl	8000288 <__aeabi_dsub>
 80088d2:	a381      	add	r3, pc, #516	; (adr r3, 8008ad8 <_dtoa_r+0x308>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fe8e 	bl	80005f8 <__aeabi_dmul>
 80088dc:	a380      	add	r3, pc, #512	; (adr r3, 8008ae0 <_dtoa_r+0x310>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f7f7 fcd3 	bl	800028c <__adddf3>
 80088e6:	4606      	mov	r6, r0
 80088e8:	4628      	mov	r0, r5
 80088ea:	460f      	mov	r7, r1
 80088ec:	f7f7 fe1a 	bl	8000524 <__aeabi_i2d>
 80088f0:	a37d      	add	r3, pc, #500	; (adr r3, 8008ae8 <_dtoa_r+0x318>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f7 fe7f 	bl	80005f8 <__aeabi_dmul>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4630      	mov	r0, r6
 8008900:	4639      	mov	r1, r7
 8008902:	f7f7 fcc3 	bl	800028c <__adddf3>
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	f7f8 f925 	bl	8000b58 <__aeabi_d2iz>
 800890e:	2200      	movs	r2, #0
 8008910:	4682      	mov	sl, r0
 8008912:	2300      	movs	r3, #0
 8008914:	4630      	mov	r0, r6
 8008916:	4639      	mov	r1, r7
 8008918:	f7f8 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800891c:	b148      	cbz	r0, 8008932 <_dtoa_r+0x162>
 800891e:	4650      	mov	r0, sl
 8008920:	f7f7 fe00 	bl	8000524 <__aeabi_i2d>
 8008924:	4632      	mov	r2, r6
 8008926:	463b      	mov	r3, r7
 8008928:	f7f8 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800892c:	b908      	cbnz	r0, 8008932 <_dtoa_r+0x162>
 800892e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008932:	f1ba 0f16 	cmp.w	sl, #22
 8008936:	d859      	bhi.n	80089ec <_dtoa_r+0x21c>
 8008938:	4970      	ldr	r1, [pc, #448]	; (8008afc <_dtoa_r+0x32c>)
 800893a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800893e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008946:	f7f8 f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800894a:	2800      	cmp	r0, #0
 800894c:	d050      	beq.n	80089f0 <_dtoa_r+0x220>
 800894e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008952:	2300      	movs	r3, #0
 8008954:	930f      	str	r3, [sp, #60]	; 0x3c
 8008956:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008958:	1b5d      	subs	r5, r3, r5
 800895a:	f1b5 0801 	subs.w	r8, r5, #1
 800895e:	bf49      	itett	mi
 8008960:	f1c5 0301 	rsbmi	r3, r5, #1
 8008964:	2300      	movpl	r3, #0
 8008966:	9305      	strmi	r3, [sp, #20]
 8008968:	f04f 0800 	movmi.w	r8, #0
 800896c:	bf58      	it	pl
 800896e:	9305      	strpl	r3, [sp, #20]
 8008970:	f1ba 0f00 	cmp.w	sl, #0
 8008974:	db3e      	blt.n	80089f4 <_dtoa_r+0x224>
 8008976:	2300      	movs	r3, #0
 8008978:	44d0      	add	r8, sl
 800897a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800897e:	9307      	str	r3, [sp, #28]
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	2b09      	cmp	r3, #9
 8008984:	f200 8090 	bhi.w	8008aa8 <_dtoa_r+0x2d8>
 8008988:	2b05      	cmp	r3, #5
 800898a:	bfc4      	itt	gt
 800898c:	3b04      	subgt	r3, #4
 800898e:	9306      	strgt	r3, [sp, #24]
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	f1a3 0302 	sub.w	r3, r3, #2
 8008996:	bfcc      	ite	gt
 8008998:	2500      	movgt	r5, #0
 800899a:	2501      	movle	r5, #1
 800899c:	2b03      	cmp	r3, #3
 800899e:	f200 808f 	bhi.w	8008ac0 <_dtoa_r+0x2f0>
 80089a2:	e8df f003 	tbb	[pc, r3]
 80089a6:	7f7d      	.short	0x7f7d
 80089a8:	7131      	.short	0x7131
 80089aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80089ae:	441d      	add	r5, r3
 80089b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80089b4:	2820      	cmp	r0, #32
 80089b6:	dd13      	ble.n	80089e0 <_dtoa_r+0x210>
 80089b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	fa08 f800 	lsl.w	r8, r8, r0
 80089c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80089c6:	fa23 f000 	lsr.w	r0, r3, r0
 80089ca:	ea48 0000 	orr.w	r0, r8, r0
 80089ce:	f7f7 fd99 	bl	8000504 <__aeabi_ui2d>
 80089d2:	2301      	movs	r3, #1
 80089d4:	4682      	mov	sl, r0
 80089d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80089da:	3d01      	subs	r5, #1
 80089dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80089de:	e772      	b.n	80088c6 <_dtoa_r+0xf6>
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	f1c0 0020 	rsb	r0, r0, #32
 80089e6:	fa03 f000 	lsl.w	r0, r3, r0
 80089ea:	e7f0      	b.n	80089ce <_dtoa_r+0x1fe>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e7b1      	b.n	8008954 <_dtoa_r+0x184>
 80089f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80089f2:	e7b0      	b.n	8008956 <_dtoa_r+0x186>
 80089f4:	9b05      	ldr	r3, [sp, #20]
 80089f6:	eba3 030a 	sub.w	r3, r3, sl
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	f1ca 0300 	rsb	r3, sl, #0
 8008a00:	9307      	str	r3, [sp, #28]
 8008a02:	2300      	movs	r3, #0
 8008a04:	930e      	str	r3, [sp, #56]	; 0x38
 8008a06:	e7bb      	b.n	8008980 <_dtoa_r+0x1b0>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd59      	ble.n	8008ac6 <_dtoa_r+0x2f6>
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	4699      	mov	r9, r3
 8008a16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a18:	2200      	movs	r2, #0
 8008a1a:	6072      	str	r2, [r6, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	f102 0014 	add.w	r0, r2, #20
 8008a22:	4298      	cmp	r0, r3
 8008a24:	6871      	ldr	r1, [r6, #4]
 8008a26:	d953      	bls.n	8008ad0 <_dtoa_r+0x300>
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 ffdd 	bl	80099e8 <_Balloc>
 8008a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a30:	6030      	str	r0, [r6, #0]
 8008a32:	f1b9 0f0e 	cmp.w	r9, #14
 8008a36:	f8d3 b000 	ldr.w	fp, [r3]
 8008a3a:	f200 80e6 	bhi.w	8008c0a <_dtoa_r+0x43a>
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	f000 80e3 	beq.w	8008c0a <_dtoa_r+0x43a>
 8008a44:	ed9d 7b00 	vldr	d7, [sp]
 8008a48:	f1ba 0f00 	cmp.w	sl, #0
 8008a4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008a50:	dd74      	ble.n	8008b3c <_dtoa_r+0x36c>
 8008a52:	4a2a      	ldr	r2, [pc, #168]	; (8008afc <_dtoa_r+0x32c>)
 8008a54:	f00a 030f 	and.w	r3, sl, #15
 8008a58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a5c:	ed93 7b00 	vldr	d7, [r3]
 8008a60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008a64:	06f0      	lsls	r0, r6, #27
 8008a66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008a6a:	d565      	bpl.n	8008b38 <_dtoa_r+0x368>
 8008a6c:	4b24      	ldr	r3, [pc, #144]	; (8008b00 <_dtoa_r+0x330>)
 8008a6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a76:	f7f7 fee9 	bl	800084c <__aeabi_ddiv>
 8008a7a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a7e:	f006 060f 	and.w	r6, r6, #15
 8008a82:	2503      	movs	r5, #3
 8008a84:	4f1e      	ldr	r7, [pc, #120]	; (8008b00 <_dtoa_r+0x330>)
 8008a86:	e04c      	b.n	8008b22 <_dtoa_r+0x352>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8e:	4453      	add	r3, sl
 8008a90:	f103 0901 	add.w	r9, r3, #1
 8008a94:	9302      	str	r3, [sp, #8]
 8008a96:	464b      	mov	r3, r9
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	bfb8      	it	lt
 8008a9c:	2301      	movlt	r3, #1
 8008a9e:	e7ba      	b.n	8008a16 <_dtoa_r+0x246>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e7b2      	b.n	8008a0a <_dtoa_r+0x23a>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e7f0      	b.n	8008a8a <_dtoa_r+0x2ba>
 8008aa8:	2501      	movs	r5, #1
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9306      	str	r3, [sp, #24]
 8008aae:	950a      	str	r5, [sp, #40]	; 0x28
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	9302      	str	r3, [sp, #8]
 8008ab6:	4699      	mov	r9, r3
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2312      	movs	r3, #18
 8008abc:	920b      	str	r2, [sp, #44]	; 0x2c
 8008abe:	e7aa      	b.n	8008a16 <_dtoa_r+0x246>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac4:	e7f4      	b.n	8008ab0 <_dtoa_r+0x2e0>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	9302      	str	r3, [sp, #8]
 8008aca:	4699      	mov	r9, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	e7f5      	b.n	8008abc <_dtoa_r+0x2ec>
 8008ad0:	3101      	adds	r1, #1
 8008ad2:	6071      	str	r1, [r6, #4]
 8008ad4:	0052      	lsls	r2, r2, #1
 8008ad6:	e7a2      	b.n	8008a1e <_dtoa_r+0x24e>
 8008ad8:	636f4361 	.word	0x636f4361
 8008adc:	3fd287a7 	.word	0x3fd287a7
 8008ae0:	8b60c8b3 	.word	0x8b60c8b3
 8008ae4:	3fc68a28 	.word	0x3fc68a28
 8008ae8:	509f79fb 	.word	0x509f79fb
 8008aec:	3fd34413 	.word	0x3fd34413
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	0800b3cb 	.word	0x0800b3cb
 8008af8:	3ff80000 	.word	0x3ff80000
 8008afc:	0800b1e0 	.word	0x0800b1e0
 8008b00:	0800b1b8 	.word	0x0800b1b8
 8008b04:	0800b1a9 	.word	0x0800b1a9
 8008b08:	07f1      	lsls	r1, r6, #31
 8008b0a:	d508      	bpl.n	8008b1e <_dtoa_r+0x34e>
 8008b0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b14:	f7f7 fd70 	bl	80005f8 <__aeabi_dmul>
 8008b18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	1076      	asrs	r6, r6, #1
 8008b20:	3708      	adds	r7, #8
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	d1f0      	bne.n	8008b08 <_dtoa_r+0x338>
 8008b26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b2e:	f7f7 fe8d 	bl	800084c <__aeabi_ddiv>
 8008b32:	e9cd 0100 	strd	r0, r1, [sp]
 8008b36:	e01a      	b.n	8008b6e <_dtoa_r+0x39e>
 8008b38:	2502      	movs	r5, #2
 8008b3a:	e7a3      	b.n	8008a84 <_dtoa_r+0x2b4>
 8008b3c:	f000 80a0 	beq.w	8008c80 <_dtoa_r+0x4b0>
 8008b40:	f1ca 0600 	rsb	r6, sl, #0
 8008b44:	4b9f      	ldr	r3, [pc, #636]	; (8008dc4 <_dtoa_r+0x5f4>)
 8008b46:	4fa0      	ldr	r7, [pc, #640]	; (8008dc8 <_dtoa_r+0x5f8>)
 8008b48:	f006 020f 	and.w	r2, r6, #15
 8008b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b60:	1136      	asrs	r6, r6, #4
 8008b62:	2300      	movs	r3, #0
 8008b64:	2502      	movs	r5, #2
 8008b66:	2e00      	cmp	r6, #0
 8008b68:	d17f      	bne.n	8008c6a <_dtoa_r+0x49a>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e1      	bne.n	8008b32 <_dtoa_r+0x362>
 8008b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8087 	beq.w	8008c84 <_dtoa_r+0x4b4>
 8008b76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4b93      	ldr	r3, [pc, #588]	; (8008dcc <_dtoa_r+0x5fc>)
 8008b7e:	4630      	mov	r0, r6
 8008b80:	4639      	mov	r1, r7
 8008b82:	f7f7 ffab 	bl	8000adc <__aeabi_dcmplt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d07c      	beq.n	8008c84 <_dtoa_r+0x4b4>
 8008b8a:	f1b9 0f00 	cmp.w	r9, #0
 8008b8e:	d079      	beq.n	8008c84 <_dtoa_r+0x4b4>
 8008b90:	9b02      	ldr	r3, [sp, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dd35      	ble.n	8008c02 <_dtoa_r+0x432>
 8008b96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b9a:	9308      	str	r3, [sp, #32]
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4b8b      	ldr	r3, [pc, #556]	; (8008dd0 <_dtoa_r+0x600>)
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7f7 fd28 	bl	80005f8 <__aeabi_dmul>
 8008ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8008bac:	9f02      	ldr	r7, [sp, #8]
 8008bae:	3501      	adds	r5, #1
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7f7 fcb7 	bl	8000524 <__aeabi_i2d>
 8008bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bba:	f7f7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4b84      	ldr	r3, [pc, #528]	; (8008dd4 <_dtoa_r+0x604>)
 8008bc2:	f7f7 fb63 	bl	800028c <__adddf3>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008bcc:	2f00      	cmp	r7, #0
 8008bce:	d15d      	bne.n	8008c8c <_dtoa_r+0x4bc>
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4b81      	ldr	r3, [pc, #516]	; (8008dd8 <_dtoa_r+0x608>)
 8008bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd8:	f7f7 fb56 	bl	8000288 <__aeabi_dsub>
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4633      	mov	r3, r6
 8008be0:	e9cd 0100 	strd	r0, r1, [sp]
 8008be4:	f7f7 ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f040 8288 	bne.w	80090fe <_dtoa_r+0x92e>
 8008bee:	462a      	mov	r2, r5
 8008bf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bf8:	f7f7 ff70 	bl	8000adc <__aeabi_dcmplt>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f040 827c 	bne.w	80090fa <_dtoa_r+0x92a>
 8008c02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c06:	e9cd 2300 	strd	r2, r3, [sp]
 8008c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f2c0 8150 	blt.w	8008eb2 <_dtoa_r+0x6e2>
 8008c12:	f1ba 0f0e 	cmp.w	sl, #14
 8008c16:	f300 814c 	bgt.w	8008eb2 <_dtoa_r+0x6e2>
 8008c1a:	4b6a      	ldr	r3, [pc, #424]	; (8008dc4 <_dtoa_r+0x5f4>)
 8008c1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c20:	ed93 7b00 	vldr	d7, [r3]
 8008c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c2c:	f280 80d8 	bge.w	8008de0 <_dtoa_r+0x610>
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	f300 80d4 	bgt.w	8008de0 <_dtoa_r+0x610>
 8008c38:	f040 825e 	bne.w	80090f8 <_dtoa_r+0x928>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	4b66      	ldr	r3, [pc, #408]	; (8008dd8 <_dtoa_r+0x608>)
 8008c40:	ec51 0b17 	vmov	r0, r1, d7
 8008c44:	f7f7 fcd8 	bl	80005f8 <__aeabi_dmul>
 8008c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c4c:	f7f7 ff5a 	bl	8000b04 <__aeabi_dcmpge>
 8008c50:	464f      	mov	r7, r9
 8008c52:	464e      	mov	r6, r9
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 8234 	bne.w	80090c2 <_dtoa_r+0x8f2>
 8008c5a:	2331      	movs	r3, #49	; 0x31
 8008c5c:	f10b 0501 	add.w	r5, fp, #1
 8008c60:	f88b 3000 	strb.w	r3, [fp]
 8008c64:	f10a 0a01 	add.w	sl, sl, #1
 8008c68:	e22f      	b.n	80090ca <_dtoa_r+0x8fa>
 8008c6a:	07f2      	lsls	r2, r6, #31
 8008c6c:	d505      	bpl.n	8008c7a <_dtoa_r+0x4aa>
 8008c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c72:	f7f7 fcc1 	bl	80005f8 <__aeabi_dmul>
 8008c76:	3501      	adds	r5, #1
 8008c78:	2301      	movs	r3, #1
 8008c7a:	1076      	asrs	r6, r6, #1
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	e772      	b.n	8008b66 <_dtoa_r+0x396>
 8008c80:	2502      	movs	r5, #2
 8008c82:	e774      	b.n	8008b6e <_dtoa_r+0x39e>
 8008c84:	f8cd a020 	str.w	sl, [sp, #32]
 8008c88:	464f      	mov	r7, r9
 8008c8a:	e791      	b.n	8008bb0 <_dtoa_r+0x3e0>
 8008c8c:	4b4d      	ldr	r3, [pc, #308]	; (8008dc4 <_dtoa_r+0x5f4>)
 8008c8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d047      	beq.n	8008d2c <_dtoa_r+0x55c>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	494e      	ldr	r1, [pc, #312]	; (8008ddc <_dtoa_r+0x60c>)
 8008ca4:	f7f7 fdd2 	bl	800084c <__aeabi_ddiv>
 8008ca8:	462a      	mov	r2, r5
 8008caa:	4633      	mov	r3, r6
 8008cac:	f7f7 faec 	bl	8000288 <__aeabi_dsub>
 8008cb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008cb4:	465d      	mov	r5, fp
 8008cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cba:	f7f7 ff4d 	bl	8000b58 <__aeabi_d2iz>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	f7f7 fc30 	bl	8000524 <__aeabi_i2d>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ccc:	f7f7 fadc 	bl	8000288 <__aeabi_dsub>
 8008cd0:	3630      	adds	r6, #48	; 0x30
 8008cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8008cd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cda:	e9cd 0100 	strd	r0, r1, [sp]
 8008cde:	f7f7 fefd 	bl	8000adc <__aeabi_dcmplt>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d163      	bne.n	8008dae <_dtoa_r+0x5de>
 8008ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cea:	2000      	movs	r0, #0
 8008cec:	4937      	ldr	r1, [pc, #220]	; (8008dcc <_dtoa_r+0x5fc>)
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cf6:	f7f7 fef1 	bl	8000adc <__aeabi_dcmplt>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f040 80b7 	bne.w	8008e6e <_dtoa_r+0x69e>
 8008d00:	eba5 030b 	sub.w	r3, r5, fp
 8008d04:	429f      	cmp	r7, r3
 8008d06:	f77f af7c 	ble.w	8008c02 <_dtoa_r+0x432>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4b30      	ldr	r3, [pc, #192]	; (8008dd0 <_dtoa_r+0x600>)
 8008d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	2200      	movs	r2, #0
 8008d18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d1c:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <_dtoa_r+0x600>)
 8008d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d22:	f7f7 fc69 	bl	80005f8 <__aeabi_dmul>
 8008d26:	e9cd 0100 	strd	r0, r1, [sp]
 8008d2a:	e7c4      	b.n	8008cb6 <_dtoa_r+0x4e6>
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4633      	mov	r3, r6
 8008d30:	f7f7 fc62 	bl	80005f8 <__aeabi_dmul>
 8008d34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d38:	eb0b 0507 	add.w	r5, fp, r7
 8008d3c:	465e      	mov	r6, fp
 8008d3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d42:	f7f7 ff09 	bl	8000b58 <__aeabi_d2iz>
 8008d46:	4607      	mov	r7, r0
 8008d48:	f7f7 fbec 	bl	8000524 <__aeabi_i2d>
 8008d4c:	3730      	adds	r7, #48	; 0x30
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d56:	f7f7 fa97 	bl	8000288 <__aeabi_dsub>
 8008d5a:	f806 7b01 	strb.w	r7, [r6], #1
 8008d5e:	42ae      	cmp	r6, r5
 8008d60:	e9cd 0100 	strd	r0, r1, [sp]
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	d126      	bne.n	8008db8 <_dtoa_r+0x5e8>
 8008d6a:	4b1c      	ldr	r3, [pc, #112]	; (8008ddc <_dtoa_r+0x60c>)
 8008d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d70:	f7f7 fa8c 	bl	800028c <__adddf3>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d7c:	f7f7 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d174      	bne.n	8008e6e <_dtoa_r+0x69e>
 8008d84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4914      	ldr	r1, [pc, #80]	; (8008ddc <_dtoa_r+0x60c>)
 8008d8c:	f7f7 fa7c 	bl	8000288 <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d98:	f7f7 fea0 	bl	8000adc <__aeabi_dcmplt>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	f43f af30 	beq.w	8008c02 <_dtoa_r+0x432>
 8008da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008da6:	2b30      	cmp	r3, #48	; 0x30
 8008da8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008dac:	d002      	beq.n	8008db4 <_dtoa_r+0x5e4>
 8008dae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008db2:	e04a      	b.n	8008e4a <_dtoa_r+0x67a>
 8008db4:	4615      	mov	r5, r2
 8008db6:	e7f4      	b.n	8008da2 <_dtoa_r+0x5d2>
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <_dtoa_r+0x600>)
 8008dba:	f7f7 fc1d 	bl	80005f8 <__aeabi_dmul>
 8008dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8008dc2:	e7bc      	b.n	8008d3e <_dtoa_r+0x56e>
 8008dc4:	0800b1e0 	.word	0x0800b1e0
 8008dc8:	0800b1b8 	.word	0x0800b1b8
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	401c0000 	.word	0x401c0000
 8008dd8:	40140000 	.word	0x40140000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008de4:	465d      	mov	r5, fp
 8008de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fd2d 	bl	800084c <__aeabi_ddiv>
 8008df2:	f7f7 feb1 	bl	8000b58 <__aeabi_d2iz>
 8008df6:	4680      	mov	r8, r0
 8008df8:	f7f7 fb94 	bl	8000524 <__aeabi_i2d>
 8008dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e00:	f7f7 fbfa 	bl	80005f8 <__aeabi_dmul>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008e10:	f7f7 fa3a 	bl	8000288 <__aeabi_dsub>
 8008e14:	f805 6b01 	strb.w	r6, [r5], #1
 8008e18:	eba5 060b 	sub.w	r6, r5, fp
 8008e1c:	45b1      	cmp	r9, r6
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	d139      	bne.n	8008e98 <_dtoa_r+0x6c8>
 8008e24:	f7f7 fa32 	bl	800028c <__adddf3>
 8008e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	f7f7 fe72 	bl	8000b18 <__aeabi_dcmpgt>
 8008e34:	b9c8      	cbnz	r0, 8008e6a <_dtoa_r+0x69a>
 8008e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e42:	b110      	cbz	r0, 8008e4a <_dtoa_r+0x67a>
 8008e44:	f018 0f01 	tst.w	r8, #1
 8008e48:	d10f      	bne.n	8008e6a <_dtoa_r+0x69a>
 8008e4a:	9904      	ldr	r1, [sp, #16]
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fdff 	bl	8009a50 <_Bfree>
 8008e52:	2300      	movs	r3, #0
 8008e54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e56:	702b      	strb	r3, [r5, #0]
 8008e58:	f10a 0301 	add.w	r3, sl, #1
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8241 	beq.w	80092e8 <_dtoa_r+0xb18>
 8008e66:	601d      	str	r5, [r3, #0]
 8008e68:	e23e      	b.n	80092e8 <_dtoa_r+0xb18>
 8008e6a:	f8cd a020 	str.w	sl, [sp, #32]
 8008e6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e72:	2a39      	cmp	r2, #57	; 0x39
 8008e74:	f105 33ff 	add.w	r3, r5, #4294967295
 8008e78:	d108      	bne.n	8008e8c <_dtoa_r+0x6bc>
 8008e7a:	459b      	cmp	fp, r3
 8008e7c:	d10a      	bne.n	8008e94 <_dtoa_r+0x6c4>
 8008e7e:	9b08      	ldr	r3, [sp, #32]
 8008e80:	3301      	adds	r3, #1
 8008e82:	9308      	str	r3, [sp, #32]
 8008e84:	2330      	movs	r3, #48	; 0x30
 8008e86:	f88b 3000 	strb.w	r3, [fp]
 8008e8a:	465b      	mov	r3, fp
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	3201      	adds	r2, #1
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	e78c      	b.n	8008dae <_dtoa_r+0x5de>
 8008e94:	461d      	mov	r5, r3
 8008e96:	e7ea      	b.n	8008e6e <_dtoa_r+0x69e>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4b9b      	ldr	r3, [pc, #620]	; (8009108 <_dtoa_r+0x938>)
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	f7f7 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d09a      	beq.n	8008de6 <_dtoa_r+0x616>
 8008eb0:	e7cb      	b.n	8008e4a <_dtoa_r+0x67a>
 8008eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	f000 808b 	beq.w	8008fd0 <_dtoa_r+0x800>
 8008eba:	9a06      	ldr	r2, [sp, #24]
 8008ebc:	2a01      	cmp	r2, #1
 8008ebe:	dc6e      	bgt.n	8008f9e <_dtoa_r+0x7ce>
 8008ec0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ec2:	2a00      	cmp	r2, #0
 8008ec4:	d067      	beq.n	8008f96 <_dtoa_r+0x7c6>
 8008ec6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008eca:	9f07      	ldr	r7, [sp, #28]
 8008ecc:	9d05      	ldr	r5, [sp, #20]
 8008ece:	9a05      	ldr	r2, [sp, #20]
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	441a      	add	r2, r3
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	9205      	str	r2, [sp, #20]
 8008ed8:	4498      	add	r8, r3
 8008eda:	f000 fe97 	bl	8009c0c <__i2b>
 8008ede:	4606      	mov	r6, r0
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	dd0c      	ble.n	8008efe <_dtoa_r+0x72e>
 8008ee4:	f1b8 0f00 	cmp.w	r8, #0
 8008ee8:	dd09      	ble.n	8008efe <_dtoa_r+0x72e>
 8008eea:	4545      	cmp	r5, r8
 8008eec:	9a05      	ldr	r2, [sp, #20]
 8008eee:	462b      	mov	r3, r5
 8008ef0:	bfa8      	it	ge
 8008ef2:	4643      	movge	r3, r8
 8008ef4:	1ad2      	subs	r2, r2, r3
 8008ef6:	9205      	str	r2, [sp, #20]
 8008ef8:	1aed      	subs	r5, r5, r3
 8008efa:	eba8 0803 	sub.w	r8, r8, r3
 8008efe:	9b07      	ldr	r3, [sp, #28]
 8008f00:	b1eb      	cbz	r3, 8008f3e <_dtoa_r+0x76e>
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d067      	beq.n	8008fd8 <_dtoa_r+0x808>
 8008f08:	b18f      	cbz	r7, 8008f2e <_dtoa_r+0x75e>
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	463a      	mov	r2, r7
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 ff1c 	bl	8009d4c <__pow5mult>
 8008f14:	9a04      	ldr	r2, [sp, #16]
 8008f16:	4601      	mov	r1, r0
 8008f18:	4606      	mov	r6, r0
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fe7f 	bl	8009c1e <__multiply>
 8008f20:	9904      	ldr	r1, [sp, #16]
 8008f22:	9008      	str	r0, [sp, #32]
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fd93 	bl	8009a50 <_Bfree>
 8008f2a:	9b08      	ldr	r3, [sp, #32]
 8008f2c:	9304      	str	r3, [sp, #16]
 8008f2e:	9b07      	ldr	r3, [sp, #28]
 8008f30:	1bda      	subs	r2, r3, r7
 8008f32:	d004      	beq.n	8008f3e <_dtoa_r+0x76e>
 8008f34:	9904      	ldr	r1, [sp, #16]
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 ff08 	bl	8009d4c <__pow5mult>
 8008f3c:	9004      	str	r0, [sp, #16]
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fe63 	bl	8009c0c <__i2b>
 8008f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f48:	4607      	mov	r7, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 81d0 	beq.w	80092f0 <_dtoa_r+0xb20>
 8008f50:	461a      	mov	r2, r3
 8008f52:	4601      	mov	r1, r0
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fef9 	bl	8009d4c <__pow5mult>
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	4607      	mov	r7, r0
 8008f60:	dc40      	bgt.n	8008fe4 <_dtoa_r+0x814>
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d139      	bne.n	8008fdc <_dtoa_r+0x80c>
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d136      	bne.n	8008fe0 <_dtoa_r+0x810>
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f78:	0d1b      	lsrs	r3, r3, #20
 8008f7a:	051b      	lsls	r3, r3, #20
 8008f7c:	b12b      	cbz	r3, 8008f8a <_dtoa_r+0x7ba>
 8008f7e:	9b05      	ldr	r3, [sp, #20]
 8008f80:	3301      	adds	r3, #1
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	f108 0801 	add.w	r8, r8, #1
 8008f88:	2301      	movs	r3, #1
 8008f8a:	9307      	str	r3, [sp, #28]
 8008f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d12a      	bne.n	8008fe8 <_dtoa_r+0x818>
 8008f92:	2001      	movs	r0, #1
 8008f94:	e030      	b.n	8008ff8 <_dtoa_r+0x828>
 8008f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f9c:	e795      	b.n	8008eca <_dtoa_r+0x6fa>
 8008f9e:	9b07      	ldr	r3, [sp, #28]
 8008fa0:	f109 37ff 	add.w	r7, r9, #4294967295
 8008fa4:	42bb      	cmp	r3, r7
 8008fa6:	bfbf      	itttt	lt
 8008fa8:	9b07      	ldrlt	r3, [sp, #28]
 8008faa:	9707      	strlt	r7, [sp, #28]
 8008fac:	1afa      	sublt	r2, r7, r3
 8008fae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008fb0:	bfbb      	ittet	lt
 8008fb2:	189b      	addlt	r3, r3, r2
 8008fb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008fb6:	1bdf      	subge	r7, r3, r7
 8008fb8:	2700      	movlt	r7, #0
 8008fba:	f1b9 0f00 	cmp.w	r9, #0
 8008fbe:	bfb5      	itete	lt
 8008fc0:	9b05      	ldrlt	r3, [sp, #20]
 8008fc2:	9d05      	ldrge	r5, [sp, #20]
 8008fc4:	eba3 0509 	sublt.w	r5, r3, r9
 8008fc8:	464b      	movge	r3, r9
 8008fca:	bfb8      	it	lt
 8008fcc:	2300      	movlt	r3, #0
 8008fce:	e77e      	b.n	8008ece <_dtoa_r+0x6fe>
 8008fd0:	9f07      	ldr	r7, [sp, #28]
 8008fd2:	9d05      	ldr	r5, [sp, #20]
 8008fd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008fd6:	e783      	b.n	8008ee0 <_dtoa_r+0x710>
 8008fd8:	9a07      	ldr	r2, [sp, #28]
 8008fda:	e7ab      	b.n	8008f34 <_dtoa_r+0x764>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e7d4      	b.n	8008f8a <_dtoa_r+0x7ba>
 8008fe0:	9b00      	ldr	r3, [sp, #0]
 8008fe2:	e7d2      	b.n	8008f8a <_dtoa_r+0x7ba>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9307      	str	r3, [sp, #28]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008fee:	6918      	ldr	r0, [r3, #16]
 8008ff0:	f000 fdbe 	bl	8009b70 <__hi0bits>
 8008ff4:	f1c0 0020 	rsb	r0, r0, #32
 8008ff8:	4440      	add	r0, r8
 8008ffa:	f010 001f 	ands.w	r0, r0, #31
 8008ffe:	d047      	beq.n	8009090 <_dtoa_r+0x8c0>
 8009000:	f1c0 0320 	rsb	r3, r0, #32
 8009004:	2b04      	cmp	r3, #4
 8009006:	dd3b      	ble.n	8009080 <_dtoa_r+0x8b0>
 8009008:	9b05      	ldr	r3, [sp, #20]
 800900a:	f1c0 001c 	rsb	r0, r0, #28
 800900e:	4403      	add	r3, r0
 8009010:	9305      	str	r3, [sp, #20]
 8009012:	4405      	add	r5, r0
 8009014:	4480      	add	r8, r0
 8009016:	9b05      	ldr	r3, [sp, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	dd05      	ble.n	8009028 <_dtoa_r+0x858>
 800901c:	461a      	mov	r2, r3
 800901e:	9904      	ldr	r1, [sp, #16]
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fee1 	bl	8009de8 <__lshift>
 8009026:	9004      	str	r0, [sp, #16]
 8009028:	f1b8 0f00 	cmp.w	r8, #0
 800902c:	dd05      	ble.n	800903a <_dtoa_r+0x86a>
 800902e:	4639      	mov	r1, r7
 8009030:	4642      	mov	r2, r8
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fed8 	bl	8009de8 <__lshift>
 8009038:	4607      	mov	r7, r0
 800903a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800903c:	b353      	cbz	r3, 8009094 <_dtoa_r+0x8c4>
 800903e:	4639      	mov	r1, r7
 8009040:	9804      	ldr	r0, [sp, #16]
 8009042:	f000 ff25 	bl	8009e90 <__mcmp>
 8009046:	2800      	cmp	r0, #0
 8009048:	da24      	bge.n	8009094 <_dtoa_r+0x8c4>
 800904a:	2300      	movs	r3, #0
 800904c:	220a      	movs	r2, #10
 800904e:	9904      	ldr	r1, [sp, #16]
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fd14 	bl	8009a7e <__multadd>
 8009056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009058:	9004      	str	r0, [sp, #16]
 800905a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 814d 	beq.w	80092fe <_dtoa_r+0xb2e>
 8009064:	2300      	movs	r3, #0
 8009066:	4631      	mov	r1, r6
 8009068:	220a      	movs	r2, #10
 800906a:	4620      	mov	r0, r4
 800906c:	f000 fd07 	bl	8009a7e <__multadd>
 8009070:	9b02      	ldr	r3, [sp, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	4606      	mov	r6, r0
 8009076:	dc4f      	bgt.n	8009118 <_dtoa_r+0x948>
 8009078:	9b06      	ldr	r3, [sp, #24]
 800907a:	2b02      	cmp	r3, #2
 800907c:	dd4c      	ble.n	8009118 <_dtoa_r+0x948>
 800907e:	e011      	b.n	80090a4 <_dtoa_r+0x8d4>
 8009080:	d0c9      	beq.n	8009016 <_dtoa_r+0x846>
 8009082:	9a05      	ldr	r2, [sp, #20]
 8009084:	331c      	adds	r3, #28
 8009086:	441a      	add	r2, r3
 8009088:	9205      	str	r2, [sp, #20]
 800908a:	441d      	add	r5, r3
 800908c:	4498      	add	r8, r3
 800908e:	e7c2      	b.n	8009016 <_dtoa_r+0x846>
 8009090:	4603      	mov	r3, r0
 8009092:	e7f6      	b.n	8009082 <_dtoa_r+0x8b2>
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	dc38      	bgt.n	800910c <_dtoa_r+0x93c>
 800909a:	9b06      	ldr	r3, [sp, #24]
 800909c:	2b02      	cmp	r3, #2
 800909e:	dd35      	ble.n	800910c <_dtoa_r+0x93c>
 80090a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80090a4:	9b02      	ldr	r3, [sp, #8]
 80090a6:	b963      	cbnz	r3, 80090c2 <_dtoa_r+0x8f2>
 80090a8:	4639      	mov	r1, r7
 80090aa:	2205      	movs	r2, #5
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fce6 	bl	8009a7e <__multadd>
 80090b2:	4601      	mov	r1, r0
 80090b4:	4607      	mov	r7, r0
 80090b6:	9804      	ldr	r0, [sp, #16]
 80090b8:	f000 feea 	bl	8009e90 <__mcmp>
 80090bc:	2800      	cmp	r0, #0
 80090be:	f73f adcc 	bgt.w	8008c5a <_dtoa_r+0x48a>
 80090c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c4:	465d      	mov	r5, fp
 80090c6:	ea6f 0a03 	mvn.w	sl, r3
 80090ca:	f04f 0900 	mov.w	r9, #0
 80090ce:	4639      	mov	r1, r7
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fcbd 	bl	8009a50 <_Bfree>
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	f43f aeb7 	beq.w	8008e4a <_dtoa_r+0x67a>
 80090dc:	f1b9 0f00 	cmp.w	r9, #0
 80090e0:	d005      	beq.n	80090ee <_dtoa_r+0x91e>
 80090e2:	45b1      	cmp	r9, r6
 80090e4:	d003      	beq.n	80090ee <_dtoa_r+0x91e>
 80090e6:	4649      	mov	r1, r9
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fcb1 	bl	8009a50 <_Bfree>
 80090ee:	4631      	mov	r1, r6
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fcad 	bl	8009a50 <_Bfree>
 80090f6:	e6a8      	b.n	8008e4a <_dtoa_r+0x67a>
 80090f8:	2700      	movs	r7, #0
 80090fa:	463e      	mov	r6, r7
 80090fc:	e7e1      	b.n	80090c2 <_dtoa_r+0x8f2>
 80090fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009102:	463e      	mov	r6, r7
 8009104:	e5a9      	b.n	8008c5a <_dtoa_r+0x48a>
 8009106:	bf00      	nop
 8009108:	40240000 	.word	0x40240000
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80fa 	beq.w	800930c <_dtoa_r+0xb3c>
 8009118:	2d00      	cmp	r5, #0
 800911a:	dd05      	ble.n	8009128 <_dtoa_r+0x958>
 800911c:	4631      	mov	r1, r6
 800911e:	462a      	mov	r2, r5
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fe61 	bl	8009de8 <__lshift>
 8009126:	4606      	mov	r6, r0
 8009128:	9b07      	ldr	r3, [sp, #28]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d04c      	beq.n	80091c8 <_dtoa_r+0x9f8>
 800912e:	6871      	ldr	r1, [r6, #4]
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fc59 	bl	80099e8 <_Balloc>
 8009136:	6932      	ldr	r2, [r6, #16]
 8009138:	3202      	adds	r2, #2
 800913a:	4605      	mov	r5, r0
 800913c:	0092      	lsls	r2, r2, #2
 800913e:	f106 010c 	add.w	r1, r6, #12
 8009142:	300c      	adds	r0, #12
 8009144:	f7fd fd7a 	bl	8006c3c <memcpy>
 8009148:	2201      	movs	r2, #1
 800914a:	4629      	mov	r1, r5
 800914c:	4620      	mov	r0, r4
 800914e:	f000 fe4b 	bl	8009de8 <__lshift>
 8009152:	9b00      	ldr	r3, [sp, #0]
 8009154:	f8cd b014 	str.w	fp, [sp, #20]
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	46b1      	mov	r9, r6
 800915e:	9307      	str	r3, [sp, #28]
 8009160:	4606      	mov	r6, r0
 8009162:	4639      	mov	r1, r7
 8009164:	9804      	ldr	r0, [sp, #16]
 8009166:	f7ff faa5 	bl	80086b4 <quorem>
 800916a:	4649      	mov	r1, r9
 800916c:	4605      	mov	r5, r0
 800916e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009172:	9804      	ldr	r0, [sp, #16]
 8009174:	f000 fe8c 	bl	8009e90 <__mcmp>
 8009178:	4632      	mov	r2, r6
 800917a:	9000      	str	r0, [sp, #0]
 800917c:	4639      	mov	r1, r7
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fea0 	bl	8009ec4 <__mdiff>
 8009184:	68c3      	ldr	r3, [r0, #12]
 8009186:	4602      	mov	r2, r0
 8009188:	bb03      	cbnz	r3, 80091cc <_dtoa_r+0x9fc>
 800918a:	4601      	mov	r1, r0
 800918c:	9008      	str	r0, [sp, #32]
 800918e:	9804      	ldr	r0, [sp, #16]
 8009190:	f000 fe7e 	bl	8009e90 <__mcmp>
 8009194:	9a08      	ldr	r2, [sp, #32]
 8009196:	4603      	mov	r3, r0
 8009198:	4611      	mov	r1, r2
 800919a:	4620      	mov	r0, r4
 800919c:	9308      	str	r3, [sp, #32]
 800919e:	f000 fc57 	bl	8009a50 <_Bfree>
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	b9a3      	cbnz	r3, 80091d0 <_dtoa_r+0xa00>
 80091a6:	9a06      	ldr	r2, [sp, #24]
 80091a8:	b992      	cbnz	r2, 80091d0 <_dtoa_r+0xa00>
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	b982      	cbnz	r2, 80091d0 <_dtoa_r+0xa00>
 80091ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091b2:	d029      	beq.n	8009208 <_dtoa_r+0xa38>
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dd01      	ble.n	80091be <_dtoa_r+0x9ee>
 80091ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80091be:	9b05      	ldr	r3, [sp, #20]
 80091c0:	1c5d      	adds	r5, r3, #1
 80091c2:	f883 8000 	strb.w	r8, [r3]
 80091c6:	e782      	b.n	80090ce <_dtoa_r+0x8fe>
 80091c8:	4630      	mov	r0, r6
 80091ca:	e7c2      	b.n	8009152 <_dtoa_r+0x982>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e7e3      	b.n	8009198 <_dtoa_r+0x9c8>
 80091d0:	9a00      	ldr	r2, [sp, #0]
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	db04      	blt.n	80091e0 <_dtoa_r+0xa10>
 80091d6:	d125      	bne.n	8009224 <_dtoa_r+0xa54>
 80091d8:	9a06      	ldr	r2, [sp, #24]
 80091da:	bb1a      	cbnz	r2, 8009224 <_dtoa_r+0xa54>
 80091dc:	9a07      	ldr	r2, [sp, #28]
 80091de:	bb0a      	cbnz	r2, 8009224 <_dtoa_r+0xa54>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	ddec      	ble.n	80091be <_dtoa_r+0x9ee>
 80091e4:	2201      	movs	r2, #1
 80091e6:	9904      	ldr	r1, [sp, #16]
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fdfd 	bl	8009de8 <__lshift>
 80091ee:	4639      	mov	r1, r7
 80091f0:	9004      	str	r0, [sp, #16]
 80091f2:	f000 fe4d 	bl	8009e90 <__mcmp>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	dc03      	bgt.n	8009202 <_dtoa_r+0xa32>
 80091fa:	d1e0      	bne.n	80091be <_dtoa_r+0x9ee>
 80091fc:	f018 0f01 	tst.w	r8, #1
 8009200:	d0dd      	beq.n	80091be <_dtoa_r+0x9ee>
 8009202:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009206:	d1d8      	bne.n	80091ba <_dtoa_r+0x9ea>
 8009208:	9b05      	ldr	r3, [sp, #20]
 800920a:	9a05      	ldr	r2, [sp, #20]
 800920c:	1c5d      	adds	r5, r3, #1
 800920e:	2339      	movs	r3, #57	; 0x39
 8009210:	7013      	strb	r3, [r2, #0]
 8009212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009216:	2b39      	cmp	r3, #57	; 0x39
 8009218:	f105 32ff 	add.w	r2, r5, #4294967295
 800921c:	d04f      	beq.n	80092be <_dtoa_r+0xaee>
 800921e:	3301      	adds	r3, #1
 8009220:	7013      	strb	r3, [r2, #0]
 8009222:	e754      	b.n	80090ce <_dtoa_r+0x8fe>
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f102 0501 	add.w	r5, r2, #1
 800922c:	dd06      	ble.n	800923c <_dtoa_r+0xa6c>
 800922e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009232:	d0e9      	beq.n	8009208 <_dtoa_r+0xa38>
 8009234:	f108 0801 	add.w	r8, r8, #1
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	e7c2      	b.n	80091c2 <_dtoa_r+0x9f2>
 800923c:	9a02      	ldr	r2, [sp, #8]
 800923e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009242:	eba5 030b 	sub.w	r3, r5, fp
 8009246:	4293      	cmp	r3, r2
 8009248:	d021      	beq.n	800928e <_dtoa_r+0xabe>
 800924a:	2300      	movs	r3, #0
 800924c:	220a      	movs	r2, #10
 800924e:	9904      	ldr	r1, [sp, #16]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fc14 	bl	8009a7e <__multadd>
 8009256:	45b1      	cmp	r9, r6
 8009258:	9004      	str	r0, [sp, #16]
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	f04f 020a 	mov.w	r2, #10
 8009262:	4649      	mov	r1, r9
 8009264:	4620      	mov	r0, r4
 8009266:	d105      	bne.n	8009274 <_dtoa_r+0xaa4>
 8009268:	f000 fc09 	bl	8009a7e <__multadd>
 800926c:	4681      	mov	r9, r0
 800926e:	4606      	mov	r6, r0
 8009270:	9505      	str	r5, [sp, #20]
 8009272:	e776      	b.n	8009162 <_dtoa_r+0x992>
 8009274:	f000 fc03 	bl	8009a7e <__multadd>
 8009278:	4631      	mov	r1, r6
 800927a:	4681      	mov	r9, r0
 800927c:	2300      	movs	r3, #0
 800927e:	220a      	movs	r2, #10
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fbfc 	bl	8009a7e <__multadd>
 8009286:	4606      	mov	r6, r0
 8009288:	e7f2      	b.n	8009270 <_dtoa_r+0xaa0>
 800928a:	f04f 0900 	mov.w	r9, #0
 800928e:	2201      	movs	r2, #1
 8009290:	9904      	ldr	r1, [sp, #16]
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fda8 	bl	8009de8 <__lshift>
 8009298:	4639      	mov	r1, r7
 800929a:	9004      	str	r0, [sp, #16]
 800929c:	f000 fdf8 	bl	8009e90 <__mcmp>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	dcb6      	bgt.n	8009212 <_dtoa_r+0xa42>
 80092a4:	d102      	bne.n	80092ac <_dtoa_r+0xadc>
 80092a6:	f018 0f01 	tst.w	r8, #1
 80092aa:	d1b2      	bne.n	8009212 <_dtoa_r+0xa42>
 80092ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092b0:	2b30      	cmp	r3, #48	; 0x30
 80092b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80092b6:	f47f af0a 	bne.w	80090ce <_dtoa_r+0x8fe>
 80092ba:	4615      	mov	r5, r2
 80092bc:	e7f6      	b.n	80092ac <_dtoa_r+0xadc>
 80092be:	4593      	cmp	fp, r2
 80092c0:	d105      	bne.n	80092ce <_dtoa_r+0xafe>
 80092c2:	2331      	movs	r3, #49	; 0x31
 80092c4:	f10a 0a01 	add.w	sl, sl, #1
 80092c8:	f88b 3000 	strb.w	r3, [fp]
 80092cc:	e6ff      	b.n	80090ce <_dtoa_r+0x8fe>
 80092ce:	4615      	mov	r5, r2
 80092d0:	e79f      	b.n	8009212 <_dtoa_r+0xa42>
 80092d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009338 <_dtoa_r+0xb68>
 80092d6:	e007      	b.n	80092e8 <_dtoa_r+0xb18>
 80092d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800933c <_dtoa_r+0xb6c>
 80092de:	b11b      	cbz	r3, 80092e8 <_dtoa_r+0xb18>
 80092e0:	f10b 0308 	add.w	r3, fp, #8
 80092e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	4658      	mov	r0, fp
 80092ea:	b017      	add	sp, #92	; 0x5c
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	9b06      	ldr	r3, [sp, #24]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	f77f ae35 	ble.w	8008f62 <_dtoa_r+0x792>
 80092f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092fa:	9307      	str	r3, [sp, #28]
 80092fc:	e649      	b.n	8008f92 <_dtoa_r+0x7c2>
 80092fe:	9b02      	ldr	r3, [sp, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	dc03      	bgt.n	800930c <_dtoa_r+0xb3c>
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	2b02      	cmp	r3, #2
 8009308:	f73f aecc 	bgt.w	80090a4 <_dtoa_r+0x8d4>
 800930c:	465d      	mov	r5, fp
 800930e:	4639      	mov	r1, r7
 8009310:	9804      	ldr	r0, [sp, #16]
 8009312:	f7ff f9cf 	bl	80086b4 <quorem>
 8009316:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800931a:	f805 8b01 	strb.w	r8, [r5], #1
 800931e:	9a02      	ldr	r2, [sp, #8]
 8009320:	eba5 030b 	sub.w	r3, r5, fp
 8009324:	429a      	cmp	r2, r3
 8009326:	ddb0      	ble.n	800928a <_dtoa_r+0xaba>
 8009328:	2300      	movs	r3, #0
 800932a:	220a      	movs	r2, #10
 800932c:	9904      	ldr	r1, [sp, #16]
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fba5 	bl	8009a7e <__multadd>
 8009334:	9004      	str	r0, [sp, #16]
 8009336:	e7ea      	b.n	800930e <_dtoa_r+0xb3e>
 8009338:	0800b3ca 	.word	0x0800b3ca
 800933c:	0800b1a0 	.word	0x0800b1a0

08009340 <rshift>:
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	6906      	ldr	r6, [r0, #16]
 8009344:	114b      	asrs	r3, r1, #5
 8009346:	429e      	cmp	r6, r3
 8009348:	f100 0414 	add.w	r4, r0, #20
 800934c:	dd30      	ble.n	80093b0 <rshift+0x70>
 800934e:	f011 011f 	ands.w	r1, r1, #31
 8009352:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009356:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800935a:	d108      	bne.n	800936e <rshift+0x2e>
 800935c:	4621      	mov	r1, r4
 800935e:	42b2      	cmp	r2, r6
 8009360:	460b      	mov	r3, r1
 8009362:	d211      	bcs.n	8009388 <rshift+0x48>
 8009364:	f852 3b04 	ldr.w	r3, [r2], #4
 8009368:	f841 3b04 	str.w	r3, [r1], #4
 800936c:	e7f7      	b.n	800935e <rshift+0x1e>
 800936e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009372:	f1c1 0c20 	rsb	ip, r1, #32
 8009376:	40cd      	lsrs	r5, r1
 8009378:	3204      	adds	r2, #4
 800937a:	4623      	mov	r3, r4
 800937c:	42b2      	cmp	r2, r6
 800937e:	4617      	mov	r7, r2
 8009380:	d30c      	bcc.n	800939c <rshift+0x5c>
 8009382:	601d      	str	r5, [r3, #0]
 8009384:	b105      	cbz	r5, 8009388 <rshift+0x48>
 8009386:	3304      	adds	r3, #4
 8009388:	1b1a      	subs	r2, r3, r4
 800938a:	42a3      	cmp	r3, r4
 800938c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009390:	bf08      	it	eq
 8009392:	2300      	moveq	r3, #0
 8009394:	6102      	str	r2, [r0, #16]
 8009396:	bf08      	it	eq
 8009398:	6143      	streq	r3, [r0, #20]
 800939a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939c:	683f      	ldr	r7, [r7, #0]
 800939e:	fa07 f70c 	lsl.w	r7, r7, ip
 80093a2:	433d      	orrs	r5, r7
 80093a4:	f843 5b04 	str.w	r5, [r3], #4
 80093a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80093ac:	40cd      	lsrs	r5, r1
 80093ae:	e7e5      	b.n	800937c <rshift+0x3c>
 80093b0:	4623      	mov	r3, r4
 80093b2:	e7e9      	b.n	8009388 <rshift+0x48>

080093b4 <__hexdig_fun>:
 80093b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093b8:	2b09      	cmp	r3, #9
 80093ba:	d802      	bhi.n	80093c2 <__hexdig_fun+0xe>
 80093bc:	3820      	subs	r0, #32
 80093be:	b2c0      	uxtb	r0, r0
 80093c0:	4770      	bx	lr
 80093c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	d801      	bhi.n	80093ce <__hexdig_fun+0x1a>
 80093ca:	3847      	subs	r0, #71	; 0x47
 80093cc:	e7f7      	b.n	80093be <__hexdig_fun+0xa>
 80093ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d801      	bhi.n	80093da <__hexdig_fun+0x26>
 80093d6:	3827      	subs	r0, #39	; 0x27
 80093d8:	e7f1      	b.n	80093be <__hexdig_fun+0xa>
 80093da:	2000      	movs	r0, #0
 80093dc:	4770      	bx	lr

080093de <__gethex>:
 80093de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e2:	b08b      	sub	sp, #44	; 0x2c
 80093e4:	468a      	mov	sl, r1
 80093e6:	9002      	str	r0, [sp, #8]
 80093e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80093ea:	9306      	str	r3, [sp, #24]
 80093ec:	4690      	mov	r8, r2
 80093ee:	f000 fad0 	bl	8009992 <__localeconv_l>
 80093f2:	6803      	ldr	r3, [r0, #0]
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f6 feea 	bl	80001d0 <strlen>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	9001      	str	r0, [sp, #4]
 8009400:	4403      	add	r3, r0
 8009402:	f04f 0b00 	mov.w	fp, #0
 8009406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800940a:	9307      	str	r3, [sp, #28]
 800940c:	f8da 3000 	ldr.w	r3, [sl]
 8009410:	3302      	adds	r3, #2
 8009412:	461f      	mov	r7, r3
 8009414:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009418:	2830      	cmp	r0, #48	; 0x30
 800941a:	d06c      	beq.n	80094f6 <__gethex+0x118>
 800941c:	f7ff ffca 	bl	80093b4 <__hexdig_fun>
 8009420:	4604      	mov	r4, r0
 8009422:	2800      	cmp	r0, #0
 8009424:	d16a      	bne.n	80094fc <__gethex+0x11e>
 8009426:	9a01      	ldr	r2, [sp, #4]
 8009428:	9903      	ldr	r1, [sp, #12]
 800942a:	4638      	mov	r0, r7
 800942c:	f001 f8f4 	bl	800a618 <strncmp>
 8009430:	2800      	cmp	r0, #0
 8009432:	d166      	bne.n	8009502 <__gethex+0x124>
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	5cf8      	ldrb	r0, [r7, r3]
 8009438:	18fe      	adds	r6, r7, r3
 800943a:	f7ff ffbb 	bl	80093b4 <__hexdig_fun>
 800943e:	2800      	cmp	r0, #0
 8009440:	d062      	beq.n	8009508 <__gethex+0x12a>
 8009442:	4633      	mov	r3, r6
 8009444:	7818      	ldrb	r0, [r3, #0]
 8009446:	2830      	cmp	r0, #48	; 0x30
 8009448:	461f      	mov	r7, r3
 800944a:	f103 0301 	add.w	r3, r3, #1
 800944e:	d0f9      	beq.n	8009444 <__gethex+0x66>
 8009450:	f7ff ffb0 	bl	80093b4 <__hexdig_fun>
 8009454:	fab0 f580 	clz	r5, r0
 8009458:	096d      	lsrs	r5, r5, #5
 800945a:	4634      	mov	r4, r6
 800945c:	f04f 0b01 	mov.w	fp, #1
 8009460:	463a      	mov	r2, r7
 8009462:	4616      	mov	r6, r2
 8009464:	3201      	adds	r2, #1
 8009466:	7830      	ldrb	r0, [r6, #0]
 8009468:	f7ff ffa4 	bl	80093b4 <__hexdig_fun>
 800946c:	2800      	cmp	r0, #0
 800946e:	d1f8      	bne.n	8009462 <__gethex+0x84>
 8009470:	9a01      	ldr	r2, [sp, #4]
 8009472:	9903      	ldr	r1, [sp, #12]
 8009474:	4630      	mov	r0, r6
 8009476:	f001 f8cf 	bl	800a618 <strncmp>
 800947a:	b950      	cbnz	r0, 8009492 <__gethex+0xb4>
 800947c:	b954      	cbnz	r4, 8009494 <__gethex+0xb6>
 800947e:	9b01      	ldr	r3, [sp, #4]
 8009480:	18f4      	adds	r4, r6, r3
 8009482:	4622      	mov	r2, r4
 8009484:	4616      	mov	r6, r2
 8009486:	3201      	adds	r2, #1
 8009488:	7830      	ldrb	r0, [r6, #0]
 800948a:	f7ff ff93 	bl	80093b4 <__hexdig_fun>
 800948e:	2800      	cmp	r0, #0
 8009490:	d1f8      	bne.n	8009484 <__gethex+0xa6>
 8009492:	b10c      	cbz	r4, 8009498 <__gethex+0xba>
 8009494:	1ba4      	subs	r4, r4, r6
 8009496:	00a4      	lsls	r4, r4, #2
 8009498:	7833      	ldrb	r3, [r6, #0]
 800949a:	2b50      	cmp	r3, #80	; 0x50
 800949c:	d001      	beq.n	80094a2 <__gethex+0xc4>
 800949e:	2b70      	cmp	r3, #112	; 0x70
 80094a0:	d140      	bne.n	8009524 <__gethex+0x146>
 80094a2:	7873      	ldrb	r3, [r6, #1]
 80094a4:	2b2b      	cmp	r3, #43	; 0x2b
 80094a6:	d031      	beq.n	800950c <__gethex+0x12e>
 80094a8:	2b2d      	cmp	r3, #45	; 0x2d
 80094aa:	d033      	beq.n	8009514 <__gethex+0x136>
 80094ac:	1c71      	adds	r1, r6, #1
 80094ae:	f04f 0900 	mov.w	r9, #0
 80094b2:	7808      	ldrb	r0, [r1, #0]
 80094b4:	f7ff ff7e 	bl	80093b4 <__hexdig_fun>
 80094b8:	1e43      	subs	r3, r0, #1
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b18      	cmp	r3, #24
 80094be:	d831      	bhi.n	8009524 <__gethex+0x146>
 80094c0:	f1a0 0210 	sub.w	r2, r0, #16
 80094c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094c8:	f7ff ff74 	bl	80093b4 <__hexdig_fun>
 80094cc:	1e43      	subs	r3, r0, #1
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b18      	cmp	r3, #24
 80094d2:	d922      	bls.n	800951a <__gethex+0x13c>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	d000      	beq.n	80094dc <__gethex+0xfe>
 80094da:	4252      	negs	r2, r2
 80094dc:	4414      	add	r4, r2
 80094de:	f8ca 1000 	str.w	r1, [sl]
 80094e2:	b30d      	cbz	r5, 8009528 <__gethex+0x14a>
 80094e4:	f1bb 0f00 	cmp.w	fp, #0
 80094e8:	bf0c      	ite	eq
 80094ea:	2706      	moveq	r7, #6
 80094ec:	2700      	movne	r7, #0
 80094ee:	4638      	mov	r0, r7
 80094f0:	b00b      	add	sp, #44	; 0x2c
 80094f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f6:	f10b 0b01 	add.w	fp, fp, #1
 80094fa:	e78a      	b.n	8009412 <__gethex+0x34>
 80094fc:	2500      	movs	r5, #0
 80094fe:	462c      	mov	r4, r5
 8009500:	e7ae      	b.n	8009460 <__gethex+0x82>
 8009502:	463e      	mov	r6, r7
 8009504:	2501      	movs	r5, #1
 8009506:	e7c7      	b.n	8009498 <__gethex+0xba>
 8009508:	4604      	mov	r4, r0
 800950a:	e7fb      	b.n	8009504 <__gethex+0x126>
 800950c:	f04f 0900 	mov.w	r9, #0
 8009510:	1cb1      	adds	r1, r6, #2
 8009512:	e7ce      	b.n	80094b2 <__gethex+0xd4>
 8009514:	f04f 0901 	mov.w	r9, #1
 8009518:	e7fa      	b.n	8009510 <__gethex+0x132>
 800951a:	230a      	movs	r3, #10
 800951c:	fb03 0202 	mla	r2, r3, r2, r0
 8009520:	3a10      	subs	r2, #16
 8009522:	e7cf      	b.n	80094c4 <__gethex+0xe6>
 8009524:	4631      	mov	r1, r6
 8009526:	e7da      	b.n	80094de <__gethex+0x100>
 8009528:	1bf3      	subs	r3, r6, r7
 800952a:	3b01      	subs	r3, #1
 800952c:	4629      	mov	r1, r5
 800952e:	2b07      	cmp	r3, #7
 8009530:	dc49      	bgt.n	80095c6 <__gethex+0x1e8>
 8009532:	9802      	ldr	r0, [sp, #8]
 8009534:	f000 fa58 	bl	80099e8 <_Balloc>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	f100 0914 	add.w	r9, r0, #20
 800953e:	f04f 0b00 	mov.w	fp, #0
 8009542:	f1c3 0301 	rsb	r3, r3, #1
 8009546:	4605      	mov	r5, r0
 8009548:	f8cd 9010 	str.w	r9, [sp, #16]
 800954c:	46da      	mov	sl, fp
 800954e:	9308      	str	r3, [sp, #32]
 8009550:	42b7      	cmp	r7, r6
 8009552:	d33b      	bcc.n	80095cc <__gethex+0x1ee>
 8009554:	9804      	ldr	r0, [sp, #16]
 8009556:	f840 ab04 	str.w	sl, [r0], #4
 800955a:	eba0 0009 	sub.w	r0, r0, r9
 800955e:	1080      	asrs	r0, r0, #2
 8009560:	6128      	str	r0, [r5, #16]
 8009562:	0147      	lsls	r7, r0, #5
 8009564:	4650      	mov	r0, sl
 8009566:	f000 fb03 	bl	8009b70 <__hi0bits>
 800956a:	f8d8 6000 	ldr.w	r6, [r8]
 800956e:	1a3f      	subs	r7, r7, r0
 8009570:	42b7      	cmp	r7, r6
 8009572:	dd64      	ble.n	800963e <__gethex+0x260>
 8009574:	1bbf      	subs	r7, r7, r6
 8009576:	4639      	mov	r1, r7
 8009578:	4628      	mov	r0, r5
 800957a:	f000 fe13 	bl	800a1a4 <__any_on>
 800957e:	4682      	mov	sl, r0
 8009580:	b178      	cbz	r0, 80095a2 <__gethex+0x1c4>
 8009582:	1e7b      	subs	r3, r7, #1
 8009584:	1159      	asrs	r1, r3, #5
 8009586:	f003 021f 	and.w	r2, r3, #31
 800958a:	f04f 0a01 	mov.w	sl, #1
 800958e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009592:	fa0a f202 	lsl.w	r2, sl, r2
 8009596:	420a      	tst	r2, r1
 8009598:	d003      	beq.n	80095a2 <__gethex+0x1c4>
 800959a:	4553      	cmp	r3, sl
 800959c:	dc46      	bgt.n	800962c <__gethex+0x24e>
 800959e:	f04f 0a02 	mov.w	sl, #2
 80095a2:	4639      	mov	r1, r7
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff fecb 	bl	8009340 <rshift>
 80095aa:	443c      	add	r4, r7
 80095ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	da52      	bge.n	800965a <__gethex+0x27c>
 80095b4:	4629      	mov	r1, r5
 80095b6:	9802      	ldr	r0, [sp, #8]
 80095b8:	f000 fa4a 	bl	8009a50 <_Bfree>
 80095bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095be:	2300      	movs	r3, #0
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	27a3      	movs	r7, #163	; 0xa3
 80095c4:	e793      	b.n	80094ee <__gethex+0x110>
 80095c6:	3101      	adds	r1, #1
 80095c8:	105b      	asrs	r3, r3, #1
 80095ca:	e7b0      	b.n	800952e <__gethex+0x150>
 80095cc:	1e73      	subs	r3, r6, #1
 80095ce:	9305      	str	r3, [sp, #20]
 80095d0:	9a07      	ldr	r2, [sp, #28]
 80095d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d018      	beq.n	800960c <__gethex+0x22e>
 80095da:	f1bb 0f20 	cmp.w	fp, #32
 80095de:	d107      	bne.n	80095f0 <__gethex+0x212>
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	f8c3 a000 	str.w	sl, [r3]
 80095e6:	3304      	adds	r3, #4
 80095e8:	f04f 0a00 	mov.w	sl, #0
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	46d3      	mov	fp, sl
 80095f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80095f4:	f7ff fede 	bl	80093b4 <__hexdig_fun>
 80095f8:	f000 000f 	and.w	r0, r0, #15
 80095fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009600:	ea4a 0a00 	orr.w	sl, sl, r0
 8009604:	f10b 0b04 	add.w	fp, fp, #4
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	e00d      	b.n	8009628 <__gethex+0x24a>
 800960c:	9b05      	ldr	r3, [sp, #20]
 800960e:	9a08      	ldr	r2, [sp, #32]
 8009610:	4413      	add	r3, r2
 8009612:	42bb      	cmp	r3, r7
 8009614:	d3e1      	bcc.n	80095da <__gethex+0x1fc>
 8009616:	4618      	mov	r0, r3
 8009618:	9a01      	ldr	r2, [sp, #4]
 800961a:	9903      	ldr	r1, [sp, #12]
 800961c:	9309      	str	r3, [sp, #36]	; 0x24
 800961e:	f000 fffb 	bl	800a618 <strncmp>
 8009622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009624:	2800      	cmp	r0, #0
 8009626:	d1d8      	bne.n	80095da <__gethex+0x1fc>
 8009628:	461e      	mov	r6, r3
 800962a:	e791      	b.n	8009550 <__gethex+0x172>
 800962c:	1eb9      	subs	r1, r7, #2
 800962e:	4628      	mov	r0, r5
 8009630:	f000 fdb8 	bl	800a1a4 <__any_on>
 8009634:	2800      	cmp	r0, #0
 8009636:	d0b2      	beq.n	800959e <__gethex+0x1c0>
 8009638:	f04f 0a03 	mov.w	sl, #3
 800963c:	e7b1      	b.n	80095a2 <__gethex+0x1c4>
 800963e:	da09      	bge.n	8009654 <__gethex+0x276>
 8009640:	1bf7      	subs	r7, r6, r7
 8009642:	4629      	mov	r1, r5
 8009644:	463a      	mov	r2, r7
 8009646:	9802      	ldr	r0, [sp, #8]
 8009648:	f000 fbce 	bl	8009de8 <__lshift>
 800964c:	1be4      	subs	r4, r4, r7
 800964e:	4605      	mov	r5, r0
 8009650:	f100 0914 	add.w	r9, r0, #20
 8009654:	f04f 0a00 	mov.w	sl, #0
 8009658:	e7a8      	b.n	80095ac <__gethex+0x1ce>
 800965a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800965e:	42a0      	cmp	r0, r4
 8009660:	dd6a      	ble.n	8009738 <__gethex+0x35a>
 8009662:	1b04      	subs	r4, r0, r4
 8009664:	42a6      	cmp	r6, r4
 8009666:	dc2e      	bgt.n	80096c6 <__gethex+0x2e8>
 8009668:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d022      	beq.n	80096b6 <__gethex+0x2d8>
 8009670:	2b03      	cmp	r3, #3
 8009672:	d024      	beq.n	80096be <__gethex+0x2e0>
 8009674:	2b01      	cmp	r3, #1
 8009676:	d115      	bne.n	80096a4 <__gethex+0x2c6>
 8009678:	42a6      	cmp	r6, r4
 800967a:	d113      	bne.n	80096a4 <__gethex+0x2c6>
 800967c:	2e01      	cmp	r6, #1
 800967e:	dc0b      	bgt.n	8009698 <__gethex+0x2ba>
 8009680:	9a06      	ldr	r2, [sp, #24]
 8009682:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	2301      	movs	r3, #1
 800968a:	612b      	str	r3, [r5, #16]
 800968c:	f8c9 3000 	str.w	r3, [r9]
 8009690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009692:	2762      	movs	r7, #98	; 0x62
 8009694:	601d      	str	r5, [r3, #0]
 8009696:	e72a      	b.n	80094ee <__gethex+0x110>
 8009698:	1e71      	subs	r1, r6, #1
 800969a:	4628      	mov	r0, r5
 800969c:	f000 fd82 	bl	800a1a4 <__any_on>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d1ed      	bne.n	8009680 <__gethex+0x2a2>
 80096a4:	4629      	mov	r1, r5
 80096a6:	9802      	ldr	r0, [sp, #8]
 80096a8:	f000 f9d2 	bl	8009a50 <_Bfree>
 80096ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096ae:	2300      	movs	r3, #0
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	2750      	movs	r7, #80	; 0x50
 80096b4:	e71b      	b.n	80094ee <__gethex+0x110>
 80096b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0e1      	beq.n	8009680 <__gethex+0x2a2>
 80096bc:	e7f2      	b.n	80096a4 <__gethex+0x2c6>
 80096be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1dd      	bne.n	8009680 <__gethex+0x2a2>
 80096c4:	e7ee      	b.n	80096a4 <__gethex+0x2c6>
 80096c6:	1e67      	subs	r7, r4, #1
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	d131      	bne.n	8009732 <__gethex+0x354>
 80096ce:	b127      	cbz	r7, 80096da <__gethex+0x2fc>
 80096d0:	4639      	mov	r1, r7
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 fd66 	bl	800a1a4 <__any_on>
 80096d8:	4682      	mov	sl, r0
 80096da:	117a      	asrs	r2, r7, #5
 80096dc:	2301      	movs	r3, #1
 80096de:	f007 071f 	and.w	r7, r7, #31
 80096e2:	fa03 f707 	lsl.w	r7, r3, r7
 80096e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80096ea:	4621      	mov	r1, r4
 80096ec:	421f      	tst	r7, r3
 80096ee:	4628      	mov	r0, r5
 80096f0:	bf18      	it	ne
 80096f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80096f6:	1b36      	subs	r6, r6, r4
 80096f8:	f7ff fe22 	bl	8009340 <rshift>
 80096fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009700:	2702      	movs	r7, #2
 8009702:	f1ba 0f00 	cmp.w	sl, #0
 8009706:	d048      	beq.n	800979a <__gethex+0x3bc>
 8009708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d015      	beq.n	800973c <__gethex+0x35e>
 8009710:	2b03      	cmp	r3, #3
 8009712:	d017      	beq.n	8009744 <__gethex+0x366>
 8009714:	2b01      	cmp	r3, #1
 8009716:	d109      	bne.n	800972c <__gethex+0x34e>
 8009718:	f01a 0f02 	tst.w	sl, #2
 800971c:	d006      	beq.n	800972c <__gethex+0x34e>
 800971e:	f8d9 3000 	ldr.w	r3, [r9]
 8009722:	ea4a 0a03 	orr.w	sl, sl, r3
 8009726:	f01a 0f01 	tst.w	sl, #1
 800972a:	d10e      	bne.n	800974a <__gethex+0x36c>
 800972c:	f047 0710 	orr.w	r7, r7, #16
 8009730:	e033      	b.n	800979a <__gethex+0x3bc>
 8009732:	f04f 0a01 	mov.w	sl, #1
 8009736:	e7d0      	b.n	80096da <__gethex+0x2fc>
 8009738:	2701      	movs	r7, #1
 800973a:	e7e2      	b.n	8009702 <__gethex+0x324>
 800973c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800973e:	f1c3 0301 	rsb	r3, r3, #1
 8009742:	9315      	str	r3, [sp, #84]	; 0x54
 8009744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0f0      	beq.n	800972c <__gethex+0x34e>
 800974a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800974e:	f105 0314 	add.w	r3, r5, #20
 8009752:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009756:	eb03 010a 	add.w	r1, r3, sl
 800975a:	f04f 0c00 	mov.w	ip, #0
 800975e:	4618      	mov	r0, r3
 8009760:	f853 2b04 	ldr.w	r2, [r3], #4
 8009764:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009768:	d01c      	beq.n	80097a4 <__gethex+0x3c6>
 800976a:	3201      	adds	r2, #1
 800976c:	6002      	str	r2, [r0, #0]
 800976e:	2f02      	cmp	r7, #2
 8009770:	f105 0314 	add.w	r3, r5, #20
 8009774:	d138      	bne.n	80097e8 <__gethex+0x40a>
 8009776:	f8d8 2000 	ldr.w	r2, [r8]
 800977a:	3a01      	subs	r2, #1
 800977c:	42b2      	cmp	r2, r6
 800977e:	d10a      	bne.n	8009796 <__gethex+0x3b8>
 8009780:	1171      	asrs	r1, r6, #5
 8009782:	2201      	movs	r2, #1
 8009784:	f006 061f 	and.w	r6, r6, #31
 8009788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800978c:	fa02 f606 	lsl.w	r6, r2, r6
 8009790:	421e      	tst	r6, r3
 8009792:	bf18      	it	ne
 8009794:	4617      	movne	r7, r2
 8009796:	f047 0720 	orr.w	r7, r7, #32
 800979a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800979c:	601d      	str	r5, [r3, #0]
 800979e:	9b06      	ldr	r3, [sp, #24]
 80097a0:	601c      	str	r4, [r3, #0]
 80097a2:	e6a4      	b.n	80094ee <__gethex+0x110>
 80097a4:	4299      	cmp	r1, r3
 80097a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80097aa:	d8d8      	bhi.n	800975e <__gethex+0x380>
 80097ac:	68ab      	ldr	r3, [r5, #8]
 80097ae:	4599      	cmp	r9, r3
 80097b0:	db12      	blt.n	80097d8 <__gethex+0x3fa>
 80097b2:	6869      	ldr	r1, [r5, #4]
 80097b4:	9802      	ldr	r0, [sp, #8]
 80097b6:	3101      	adds	r1, #1
 80097b8:	f000 f916 	bl	80099e8 <_Balloc>
 80097bc:	692a      	ldr	r2, [r5, #16]
 80097be:	3202      	adds	r2, #2
 80097c0:	f105 010c 	add.w	r1, r5, #12
 80097c4:	4683      	mov	fp, r0
 80097c6:	0092      	lsls	r2, r2, #2
 80097c8:	300c      	adds	r0, #12
 80097ca:	f7fd fa37 	bl	8006c3c <memcpy>
 80097ce:	4629      	mov	r1, r5
 80097d0:	9802      	ldr	r0, [sp, #8]
 80097d2:	f000 f93d 	bl	8009a50 <_Bfree>
 80097d6:	465d      	mov	r5, fp
 80097d8:	692b      	ldr	r3, [r5, #16]
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80097e0:	612a      	str	r2, [r5, #16]
 80097e2:	2201      	movs	r2, #1
 80097e4:	615a      	str	r2, [r3, #20]
 80097e6:	e7c2      	b.n	800976e <__gethex+0x390>
 80097e8:	692a      	ldr	r2, [r5, #16]
 80097ea:	454a      	cmp	r2, r9
 80097ec:	dd0b      	ble.n	8009806 <__gethex+0x428>
 80097ee:	2101      	movs	r1, #1
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7ff fda5 	bl	8009340 <rshift>
 80097f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097fa:	3401      	adds	r4, #1
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	f6ff aed9 	blt.w	80095b4 <__gethex+0x1d6>
 8009802:	2701      	movs	r7, #1
 8009804:	e7c7      	b.n	8009796 <__gethex+0x3b8>
 8009806:	f016 061f 	ands.w	r6, r6, #31
 800980a:	d0fa      	beq.n	8009802 <__gethex+0x424>
 800980c:	449a      	add	sl, r3
 800980e:	f1c6 0620 	rsb	r6, r6, #32
 8009812:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009816:	f000 f9ab 	bl	8009b70 <__hi0bits>
 800981a:	42b0      	cmp	r0, r6
 800981c:	dbe7      	blt.n	80097ee <__gethex+0x410>
 800981e:	e7f0      	b.n	8009802 <__gethex+0x424>

08009820 <L_shift>:
 8009820:	f1c2 0208 	rsb	r2, r2, #8
 8009824:	0092      	lsls	r2, r2, #2
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	f1c2 0620 	rsb	r6, r2, #32
 800982c:	6843      	ldr	r3, [r0, #4]
 800982e:	6804      	ldr	r4, [r0, #0]
 8009830:	fa03 f506 	lsl.w	r5, r3, r6
 8009834:	432c      	orrs	r4, r5
 8009836:	40d3      	lsrs	r3, r2
 8009838:	6004      	str	r4, [r0, #0]
 800983a:	f840 3f04 	str.w	r3, [r0, #4]!
 800983e:	4288      	cmp	r0, r1
 8009840:	d3f4      	bcc.n	800982c <L_shift+0xc>
 8009842:	bd70      	pop	{r4, r5, r6, pc}

08009844 <__match>:
 8009844:	b530      	push	{r4, r5, lr}
 8009846:	6803      	ldr	r3, [r0, #0]
 8009848:	3301      	adds	r3, #1
 800984a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984e:	b914      	cbnz	r4, 8009856 <__match+0x12>
 8009850:	6003      	str	r3, [r0, #0]
 8009852:	2001      	movs	r0, #1
 8009854:	bd30      	pop	{r4, r5, pc}
 8009856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800985a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800985e:	2d19      	cmp	r5, #25
 8009860:	bf98      	it	ls
 8009862:	3220      	addls	r2, #32
 8009864:	42a2      	cmp	r2, r4
 8009866:	d0f0      	beq.n	800984a <__match+0x6>
 8009868:	2000      	movs	r0, #0
 800986a:	e7f3      	b.n	8009854 <__match+0x10>

0800986c <__hexnan>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	680b      	ldr	r3, [r1, #0]
 8009872:	6801      	ldr	r1, [r0, #0]
 8009874:	115f      	asrs	r7, r3, #5
 8009876:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800987a:	f013 031f 	ands.w	r3, r3, #31
 800987e:	b087      	sub	sp, #28
 8009880:	bf18      	it	ne
 8009882:	3704      	addne	r7, #4
 8009884:	2500      	movs	r5, #0
 8009886:	1f3e      	subs	r6, r7, #4
 8009888:	4682      	mov	sl, r0
 800988a:	4690      	mov	r8, r2
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009892:	46b1      	mov	r9, r6
 8009894:	4634      	mov	r4, r6
 8009896:	9502      	str	r5, [sp, #8]
 8009898:	46ab      	mov	fp, r5
 800989a:	784a      	ldrb	r2, [r1, #1]
 800989c:	1c4b      	adds	r3, r1, #1
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	b342      	cbz	r2, 80098f4 <__hexnan+0x88>
 80098a2:	4610      	mov	r0, r2
 80098a4:	9105      	str	r1, [sp, #20]
 80098a6:	9204      	str	r2, [sp, #16]
 80098a8:	f7ff fd84 	bl	80093b4 <__hexdig_fun>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d143      	bne.n	8009938 <__hexnan+0xcc>
 80098b0:	9a04      	ldr	r2, [sp, #16]
 80098b2:	9905      	ldr	r1, [sp, #20]
 80098b4:	2a20      	cmp	r2, #32
 80098b6:	d818      	bhi.n	80098ea <__hexnan+0x7e>
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	459b      	cmp	fp, r3
 80098bc:	dd13      	ble.n	80098e6 <__hexnan+0x7a>
 80098be:	454c      	cmp	r4, r9
 80098c0:	d206      	bcs.n	80098d0 <__hexnan+0x64>
 80098c2:	2d07      	cmp	r5, #7
 80098c4:	dc04      	bgt.n	80098d0 <__hexnan+0x64>
 80098c6:	462a      	mov	r2, r5
 80098c8:	4649      	mov	r1, r9
 80098ca:	4620      	mov	r0, r4
 80098cc:	f7ff ffa8 	bl	8009820 <L_shift>
 80098d0:	4544      	cmp	r4, r8
 80098d2:	d944      	bls.n	800995e <__hexnan+0xf2>
 80098d4:	2300      	movs	r3, #0
 80098d6:	f1a4 0904 	sub.w	r9, r4, #4
 80098da:	f844 3c04 	str.w	r3, [r4, #-4]
 80098de:	f8cd b008 	str.w	fp, [sp, #8]
 80098e2:	464c      	mov	r4, r9
 80098e4:	461d      	mov	r5, r3
 80098e6:	9903      	ldr	r1, [sp, #12]
 80098e8:	e7d7      	b.n	800989a <__hexnan+0x2e>
 80098ea:	2a29      	cmp	r2, #41	; 0x29
 80098ec:	d14a      	bne.n	8009984 <__hexnan+0x118>
 80098ee:	3102      	adds	r1, #2
 80098f0:	f8ca 1000 	str.w	r1, [sl]
 80098f4:	f1bb 0f00 	cmp.w	fp, #0
 80098f8:	d044      	beq.n	8009984 <__hexnan+0x118>
 80098fa:	454c      	cmp	r4, r9
 80098fc:	d206      	bcs.n	800990c <__hexnan+0xa0>
 80098fe:	2d07      	cmp	r5, #7
 8009900:	dc04      	bgt.n	800990c <__hexnan+0xa0>
 8009902:	462a      	mov	r2, r5
 8009904:	4649      	mov	r1, r9
 8009906:	4620      	mov	r0, r4
 8009908:	f7ff ff8a 	bl	8009820 <L_shift>
 800990c:	4544      	cmp	r4, r8
 800990e:	d928      	bls.n	8009962 <__hexnan+0xf6>
 8009910:	4643      	mov	r3, r8
 8009912:	f854 2b04 	ldr.w	r2, [r4], #4
 8009916:	f843 2b04 	str.w	r2, [r3], #4
 800991a:	42a6      	cmp	r6, r4
 800991c:	d2f9      	bcs.n	8009912 <__hexnan+0xa6>
 800991e:	2200      	movs	r2, #0
 8009920:	f843 2b04 	str.w	r2, [r3], #4
 8009924:	429e      	cmp	r6, r3
 8009926:	d2fb      	bcs.n	8009920 <__hexnan+0xb4>
 8009928:	6833      	ldr	r3, [r6, #0]
 800992a:	b91b      	cbnz	r3, 8009934 <__hexnan+0xc8>
 800992c:	4546      	cmp	r6, r8
 800992e:	d127      	bne.n	8009980 <__hexnan+0x114>
 8009930:	2301      	movs	r3, #1
 8009932:	6033      	str	r3, [r6, #0]
 8009934:	2005      	movs	r0, #5
 8009936:	e026      	b.n	8009986 <__hexnan+0x11a>
 8009938:	3501      	adds	r5, #1
 800993a:	2d08      	cmp	r5, #8
 800993c:	f10b 0b01 	add.w	fp, fp, #1
 8009940:	dd06      	ble.n	8009950 <__hexnan+0xe4>
 8009942:	4544      	cmp	r4, r8
 8009944:	d9cf      	bls.n	80098e6 <__hexnan+0x7a>
 8009946:	2300      	movs	r3, #0
 8009948:	f844 3c04 	str.w	r3, [r4, #-4]
 800994c:	2501      	movs	r5, #1
 800994e:	3c04      	subs	r4, #4
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	f000 000f 	and.w	r0, r0, #15
 8009956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800995a:	6020      	str	r0, [r4, #0]
 800995c:	e7c3      	b.n	80098e6 <__hexnan+0x7a>
 800995e:	2508      	movs	r5, #8
 8009960:	e7c1      	b.n	80098e6 <__hexnan+0x7a>
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0df      	beq.n	8009928 <__hexnan+0xbc>
 8009968:	f04f 32ff 	mov.w	r2, #4294967295
 800996c:	f1c3 0320 	rsb	r3, r3, #32
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
 8009974:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009978:	401a      	ands	r2, r3
 800997a:	f847 2c04 	str.w	r2, [r7, #-4]
 800997e:	e7d3      	b.n	8009928 <__hexnan+0xbc>
 8009980:	3e04      	subs	r6, #4
 8009982:	e7d1      	b.n	8009928 <__hexnan+0xbc>
 8009984:	2004      	movs	r0, #4
 8009986:	b007      	add	sp, #28
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800998c <__locale_ctype_ptr_l>:
 800998c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009990:	4770      	bx	lr

08009992 <__localeconv_l>:
 8009992:	30f0      	adds	r0, #240	; 0xf0
 8009994:	4770      	bx	lr
	...

08009998 <_localeconv_r>:
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <_localeconv_r+0x14>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6a18      	ldr	r0, [r3, #32]
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <_localeconv_r+0x18>)
 80099a0:	2800      	cmp	r0, #0
 80099a2:	bf08      	it	eq
 80099a4:	4618      	moveq	r0, r3
 80099a6:	30f0      	adds	r0, #240	; 0xf0
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	20000fb0 	.word	0x20000fb0
 80099b0:	20001014 	.word	0x20001014

080099b4 <malloc>:
 80099b4:	4b02      	ldr	r3, [pc, #8]	; (80099c0 <malloc+0xc>)
 80099b6:	4601      	mov	r1, r0
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	f000 bc71 	b.w	800a2a0 <_malloc_r>
 80099be:	bf00      	nop
 80099c0:	20000fb0 	.word	0x20000fb0

080099c4 <__ascii_mbtowc>:
 80099c4:	b082      	sub	sp, #8
 80099c6:	b901      	cbnz	r1, 80099ca <__ascii_mbtowc+0x6>
 80099c8:	a901      	add	r1, sp, #4
 80099ca:	b142      	cbz	r2, 80099de <__ascii_mbtowc+0x1a>
 80099cc:	b14b      	cbz	r3, 80099e2 <__ascii_mbtowc+0x1e>
 80099ce:	7813      	ldrb	r3, [r2, #0]
 80099d0:	600b      	str	r3, [r1, #0]
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	1c10      	adds	r0, r2, #0
 80099d6:	bf18      	it	ne
 80099d8:	2001      	movne	r0, #1
 80099da:	b002      	add	sp, #8
 80099dc:	4770      	bx	lr
 80099de:	4610      	mov	r0, r2
 80099e0:	e7fb      	b.n	80099da <__ascii_mbtowc+0x16>
 80099e2:	f06f 0001 	mvn.w	r0, #1
 80099e6:	e7f8      	b.n	80099da <__ascii_mbtowc+0x16>

080099e8 <_Balloc>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099ec:	4604      	mov	r4, r0
 80099ee:	460e      	mov	r6, r1
 80099f0:	b93d      	cbnz	r5, 8009a02 <_Balloc+0x1a>
 80099f2:	2010      	movs	r0, #16
 80099f4:	f7ff ffde 	bl	80099b4 <malloc>
 80099f8:	6260      	str	r0, [r4, #36]	; 0x24
 80099fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099fe:	6005      	str	r5, [r0, #0]
 8009a00:	60c5      	str	r5, [r0, #12]
 8009a02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a04:	68eb      	ldr	r3, [r5, #12]
 8009a06:	b183      	cbz	r3, 8009a2a <_Balloc+0x42>
 8009a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a10:	b9b8      	cbnz	r0, 8009a42 <_Balloc+0x5a>
 8009a12:	2101      	movs	r1, #1
 8009a14:	fa01 f506 	lsl.w	r5, r1, r6
 8009a18:	1d6a      	adds	r2, r5, #5
 8009a1a:	0092      	lsls	r2, r2, #2
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 fbe2 	bl	800a1e6 <_calloc_r>
 8009a22:	b160      	cbz	r0, 8009a3e <_Balloc+0x56>
 8009a24:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009a28:	e00e      	b.n	8009a48 <_Balloc+0x60>
 8009a2a:	2221      	movs	r2, #33	; 0x21
 8009a2c:	2104      	movs	r1, #4
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 fbd9 	bl	800a1e6 <_calloc_r>
 8009a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a36:	60e8      	str	r0, [r5, #12]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e4      	bne.n	8009a08 <_Balloc+0x20>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
 8009a42:	6802      	ldr	r2, [r0, #0]
 8009a44:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a4e:	e7f7      	b.n	8009a40 <_Balloc+0x58>

08009a50 <_Bfree>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a54:	4606      	mov	r6, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	b93c      	cbnz	r4, 8009a6a <_Bfree+0x1a>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ffaa 	bl	80099b4 <malloc>
 8009a60:	6270      	str	r0, [r6, #36]	; 0x24
 8009a62:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a66:	6004      	str	r4, [r0, #0]
 8009a68:	60c4      	str	r4, [r0, #12]
 8009a6a:	b13d      	cbz	r5, 8009a7c <_Bfree+0x2c>
 8009a6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a6e:	686a      	ldr	r2, [r5, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a76:	6029      	str	r1, [r5, #0]
 8009a78:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a7c:	bd70      	pop	{r4, r5, r6, pc}

08009a7e <__multadd>:
 8009a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a82:	690d      	ldr	r5, [r1, #16]
 8009a84:	461f      	mov	r7, r3
 8009a86:	4606      	mov	r6, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	f101 0c14 	add.w	ip, r1, #20
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8dc 0000 	ldr.w	r0, [ip]
 8009a94:	b281      	uxth	r1, r0
 8009a96:	fb02 7101 	mla	r1, r2, r1, r7
 8009a9a:	0c0f      	lsrs	r7, r1, #16
 8009a9c:	0c00      	lsrs	r0, r0, #16
 8009a9e:	fb02 7000 	mla	r0, r2, r0, r7
 8009aa2:	b289      	uxth	r1, r1
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009aaa:	429d      	cmp	r5, r3
 8009aac:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ab0:	f84c 1b04 	str.w	r1, [ip], #4
 8009ab4:	dcec      	bgt.n	8009a90 <__multadd+0x12>
 8009ab6:	b1d7      	cbz	r7, 8009aee <__multadd+0x70>
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	42ab      	cmp	r3, r5
 8009abc:	dc12      	bgt.n	8009ae4 <__multadd+0x66>
 8009abe:	6861      	ldr	r1, [r4, #4]
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	3101      	adds	r1, #1
 8009ac4:	f7ff ff90 	bl	80099e8 <_Balloc>
 8009ac8:	6922      	ldr	r2, [r4, #16]
 8009aca:	3202      	adds	r2, #2
 8009acc:	f104 010c 	add.w	r1, r4, #12
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	0092      	lsls	r2, r2, #2
 8009ad4:	300c      	adds	r0, #12
 8009ad6:	f7fd f8b1 	bl	8006c3c <memcpy>
 8009ada:	4621      	mov	r1, r4
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ffb7 	bl	8009a50 <_Bfree>
 8009ae2:	4644      	mov	r4, r8
 8009ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ae8:	3501      	adds	r5, #1
 8009aea:	615f      	str	r7, [r3, #20]
 8009aec:	6125      	str	r5, [r4, #16]
 8009aee:	4620      	mov	r0, r4
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009af4 <__s2b>:
 8009af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af8:	460c      	mov	r4, r1
 8009afa:	4615      	mov	r5, r2
 8009afc:	461f      	mov	r7, r3
 8009afe:	2209      	movs	r2, #9
 8009b00:	3308      	adds	r3, #8
 8009b02:	4606      	mov	r6, r0
 8009b04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b08:	2100      	movs	r1, #0
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	db20      	blt.n	8009b52 <__s2b+0x5e>
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ff69 	bl	80099e8 <_Balloc>
 8009b16:	9b08      	ldr	r3, [sp, #32]
 8009b18:	6143      	str	r3, [r0, #20]
 8009b1a:	2d09      	cmp	r5, #9
 8009b1c:	f04f 0301 	mov.w	r3, #1
 8009b20:	6103      	str	r3, [r0, #16]
 8009b22:	dd19      	ble.n	8009b58 <__s2b+0x64>
 8009b24:	f104 0809 	add.w	r8, r4, #9
 8009b28:	46c1      	mov	r9, r8
 8009b2a:	442c      	add	r4, r5
 8009b2c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009b30:	4601      	mov	r1, r0
 8009b32:	3b30      	subs	r3, #48	; 0x30
 8009b34:	220a      	movs	r2, #10
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7ff ffa1 	bl	8009a7e <__multadd>
 8009b3c:	45a1      	cmp	r9, r4
 8009b3e:	d1f5      	bne.n	8009b2c <__s2b+0x38>
 8009b40:	eb08 0405 	add.w	r4, r8, r5
 8009b44:	3c08      	subs	r4, #8
 8009b46:	1b2d      	subs	r5, r5, r4
 8009b48:	1963      	adds	r3, r4, r5
 8009b4a:	42bb      	cmp	r3, r7
 8009b4c:	db07      	blt.n	8009b5e <__s2b+0x6a>
 8009b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b52:	0052      	lsls	r2, r2, #1
 8009b54:	3101      	adds	r1, #1
 8009b56:	e7d9      	b.n	8009b0c <__s2b+0x18>
 8009b58:	340a      	adds	r4, #10
 8009b5a:	2509      	movs	r5, #9
 8009b5c:	e7f3      	b.n	8009b46 <__s2b+0x52>
 8009b5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b62:	4601      	mov	r1, r0
 8009b64:	3b30      	subs	r3, #48	; 0x30
 8009b66:	220a      	movs	r2, #10
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ff88 	bl	8009a7e <__multadd>
 8009b6e:	e7eb      	b.n	8009b48 <__s2b+0x54>

08009b70 <__hi0bits>:
 8009b70:	0c02      	lsrs	r2, r0, #16
 8009b72:	0412      	lsls	r2, r2, #16
 8009b74:	4603      	mov	r3, r0
 8009b76:	b9b2      	cbnz	r2, 8009ba6 <__hi0bits+0x36>
 8009b78:	0403      	lsls	r3, r0, #16
 8009b7a:	2010      	movs	r0, #16
 8009b7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b80:	bf04      	itt	eq
 8009b82:	021b      	lsleq	r3, r3, #8
 8009b84:	3008      	addeq	r0, #8
 8009b86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b8a:	bf04      	itt	eq
 8009b8c:	011b      	lsleq	r3, r3, #4
 8009b8e:	3004      	addeq	r0, #4
 8009b90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b94:	bf04      	itt	eq
 8009b96:	009b      	lsleq	r3, r3, #2
 8009b98:	3002      	addeq	r0, #2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	db06      	blt.n	8009bac <__hi0bits+0x3c>
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	d503      	bpl.n	8009baa <__hi0bits+0x3a>
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	4770      	bx	lr
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	e7e8      	b.n	8009b7c <__hi0bits+0xc>
 8009baa:	2020      	movs	r0, #32
 8009bac:	4770      	bx	lr

08009bae <__lo0bits>:
 8009bae:	6803      	ldr	r3, [r0, #0]
 8009bb0:	f013 0207 	ands.w	r2, r3, #7
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	d00b      	beq.n	8009bd0 <__lo0bits+0x22>
 8009bb8:	07da      	lsls	r2, r3, #31
 8009bba:	d423      	bmi.n	8009c04 <__lo0bits+0x56>
 8009bbc:	0798      	lsls	r0, r3, #30
 8009bbe:	bf49      	itett	mi
 8009bc0:	085b      	lsrmi	r3, r3, #1
 8009bc2:	089b      	lsrpl	r3, r3, #2
 8009bc4:	2001      	movmi	r0, #1
 8009bc6:	600b      	strmi	r3, [r1, #0]
 8009bc8:	bf5c      	itt	pl
 8009bca:	600b      	strpl	r3, [r1, #0]
 8009bcc:	2002      	movpl	r0, #2
 8009bce:	4770      	bx	lr
 8009bd0:	b298      	uxth	r0, r3
 8009bd2:	b9a8      	cbnz	r0, 8009c00 <__lo0bits+0x52>
 8009bd4:	0c1b      	lsrs	r3, r3, #16
 8009bd6:	2010      	movs	r0, #16
 8009bd8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009bdc:	bf04      	itt	eq
 8009bde:	0a1b      	lsreq	r3, r3, #8
 8009be0:	3008      	addeq	r0, #8
 8009be2:	071a      	lsls	r2, r3, #28
 8009be4:	bf04      	itt	eq
 8009be6:	091b      	lsreq	r3, r3, #4
 8009be8:	3004      	addeq	r0, #4
 8009bea:	079a      	lsls	r2, r3, #30
 8009bec:	bf04      	itt	eq
 8009bee:	089b      	lsreq	r3, r3, #2
 8009bf0:	3002      	addeq	r0, #2
 8009bf2:	07da      	lsls	r2, r3, #31
 8009bf4:	d402      	bmi.n	8009bfc <__lo0bits+0x4e>
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	d006      	beq.n	8009c08 <__lo0bits+0x5a>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	600b      	str	r3, [r1, #0]
 8009bfe:	4770      	bx	lr
 8009c00:	4610      	mov	r0, r2
 8009c02:	e7e9      	b.n	8009bd8 <__lo0bits+0x2a>
 8009c04:	2000      	movs	r0, #0
 8009c06:	4770      	bx	lr
 8009c08:	2020      	movs	r0, #32
 8009c0a:	4770      	bx	lr

08009c0c <__i2b>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	460c      	mov	r4, r1
 8009c10:	2101      	movs	r1, #1
 8009c12:	f7ff fee9 	bl	80099e8 <_Balloc>
 8009c16:	2201      	movs	r2, #1
 8009c18:	6144      	str	r4, [r0, #20]
 8009c1a:	6102      	str	r2, [r0, #16]
 8009c1c:	bd10      	pop	{r4, pc}

08009c1e <__multiply>:
 8009c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c22:	4614      	mov	r4, r2
 8009c24:	690a      	ldr	r2, [r1, #16]
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	bfb8      	it	lt
 8009c2c:	460b      	movlt	r3, r1
 8009c2e:	4688      	mov	r8, r1
 8009c30:	bfbc      	itt	lt
 8009c32:	46a0      	movlt	r8, r4
 8009c34:	461c      	movlt	r4, r3
 8009c36:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c46:	eb07 0609 	add.w	r6, r7, r9
 8009c4a:	42b3      	cmp	r3, r6
 8009c4c:	bfb8      	it	lt
 8009c4e:	3101      	addlt	r1, #1
 8009c50:	f7ff feca 	bl	80099e8 <_Balloc>
 8009c54:	f100 0514 	add.w	r5, r0, #20
 8009c58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4573      	cmp	r3, lr
 8009c62:	d316      	bcc.n	8009c92 <__multiply+0x74>
 8009c64:	f104 0214 	add.w	r2, r4, #20
 8009c68:	f108 0114 	add.w	r1, r8, #20
 8009c6c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c70:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	9201      	str	r2, [sp, #4]
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d80c      	bhi.n	8009c98 <__multiply+0x7a>
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	dd03      	ble.n	8009c8a <__multiply+0x6c>
 8009c82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d05d      	beq.n	8009d46 <__multiply+0x128>
 8009c8a:	6106      	str	r6, [r0, #16]
 8009c8c:	b003      	add	sp, #12
 8009c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c92:	f843 2b04 	str.w	r2, [r3], #4
 8009c96:	e7e3      	b.n	8009c60 <__multiply+0x42>
 8009c98:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ca0:	d023      	beq.n	8009cea <__multiply+0xcc>
 8009ca2:	4689      	mov	r9, r1
 8009ca4:	46ac      	mov	ip, r5
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	f859 4b04 	ldr.w	r4, [r9], #4
 8009cae:	f8dc a000 	ldr.w	sl, [ip]
 8009cb2:	b2a3      	uxth	r3, r4
 8009cb4:	fa1f fa8a 	uxth.w	sl, sl
 8009cb8:	fb0b a303 	mla	r3, fp, r3, sl
 8009cbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009cc0:	f8dc 4000 	ldr.w	r4, [ip]
 8009cc4:	4443      	add	r3, r8
 8009cc6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009cca:	fb0b 840a 	mla	r4, fp, sl, r8
 8009cce:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009cd2:	46e2      	mov	sl, ip
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009cda:	454f      	cmp	r7, r9
 8009cdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ce0:	f84a 3b04 	str.w	r3, [sl], #4
 8009ce4:	d82b      	bhi.n	8009d3e <__multiply+0x120>
 8009ce6:	f8cc 8004 	str.w	r8, [ip, #4]
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009cf0:	3204      	adds	r2, #4
 8009cf2:	f1ba 0f00 	cmp.w	sl, #0
 8009cf6:	d020      	beq.n	8009d3a <__multiply+0x11c>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	4689      	mov	r9, r1
 8009cfc:	46a8      	mov	r8, r5
 8009cfe:	f04f 0b00 	mov.w	fp, #0
 8009d02:	f8b9 c000 	ldrh.w	ip, [r9]
 8009d06:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009d0a:	fb0a 440c 	mla	r4, sl, ip, r4
 8009d0e:	445c      	add	r4, fp
 8009d10:	46c4      	mov	ip, r8
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d18:	f84c 3b04 	str.w	r3, [ip], #4
 8009d1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d20:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	fb0a b303 	mla	r3, sl, r3, fp
 8009d2a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009d2e:	454f      	cmp	r7, r9
 8009d30:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d34:	d805      	bhi.n	8009d42 <__multiply+0x124>
 8009d36:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d3a:	3504      	adds	r5, #4
 8009d3c:	e79b      	b.n	8009c76 <__multiply+0x58>
 8009d3e:	46d4      	mov	ip, sl
 8009d40:	e7b3      	b.n	8009caa <__multiply+0x8c>
 8009d42:	46e0      	mov	r8, ip
 8009d44:	e7dd      	b.n	8009d02 <__multiply+0xe4>
 8009d46:	3e01      	subs	r6, #1
 8009d48:	e799      	b.n	8009c7e <__multiply+0x60>
	...

08009d4c <__pow5mult>:
 8009d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4615      	mov	r5, r2
 8009d52:	f012 0203 	ands.w	r2, r2, #3
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	d007      	beq.n	8009d6c <__pow5mult+0x20>
 8009d5c:	3a01      	subs	r2, #1
 8009d5e:	4c21      	ldr	r4, [pc, #132]	; (8009de4 <__pow5mult+0x98>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d66:	f7ff fe8a 	bl	8009a7e <__multadd>
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	10ad      	asrs	r5, r5, #2
 8009d6e:	d035      	beq.n	8009ddc <__pow5mult+0x90>
 8009d70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d72:	b93c      	cbnz	r4, 8009d84 <__pow5mult+0x38>
 8009d74:	2010      	movs	r0, #16
 8009d76:	f7ff fe1d 	bl	80099b4 <malloc>
 8009d7a:	6270      	str	r0, [r6, #36]	; 0x24
 8009d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d80:	6004      	str	r4, [r0, #0]
 8009d82:	60c4      	str	r4, [r0, #12]
 8009d84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d8c:	b94c      	cbnz	r4, 8009da2 <__pow5mult+0x56>
 8009d8e:	f240 2171 	movw	r1, #625	; 0x271
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7ff ff3a 	bl	8009c0c <__i2b>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d9e:	4604      	mov	r4, r0
 8009da0:	6003      	str	r3, [r0, #0]
 8009da2:	f04f 0800 	mov.w	r8, #0
 8009da6:	07eb      	lsls	r3, r5, #31
 8009da8:	d50a      	bpl.n	8009dc0 <__pow5mult+0x74>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4622      	mov	r2, r4
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ff35 	bl	8009c1e <__multiply>
 8009db4:	4639      	mov	r1, r7
 8009db6:	4681      	mov	r9, r0
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7ff fe49 	bl	8009a50 <_Bfree>
 8009dbe:	464f      	mov	r7, r9
 8009dc0:	106d      	asrs	r5, r5, #1
 8009dc2:	d00b      	beq.n	8009ddc <__pow5mult+0x90>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	b938      	cbnz	r0, 8009dd8 <__pow5mult+0x8c>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff ff26 	bl	8009c1e <__multiply>
 8009dd2:	6020      	str	r0, [r4, #0]
 8009dd4:	f8c0 8000 	str.w	r8, [r0]
 8009dd8:	4604      	mov	r4, r0
 8009dda:	e7e4      	b.n	8009da6 <__pow5mult+0x5a>
 8009ddc:	4638      	mov	r0, r7
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	bf00      	nop
 8009de4:	0800b2a8 	.word	0x0800b2a8

08009de8 <__lshift>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	460c      	mov	r4, r1
 8009dee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	6849      	ldr	r1, [r1, #4]
 8009df6:	eb0a 0903 	add.w	r9, sl, r3
 8009dfa:	68a3      	ldr	r3, [r4, #8]
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	4616      	mov	r6, r2
 8009e00:	f109 0501 	add.w	r5, r9, #1
 8009e04:	42ab      	cmp	r3, r5
 8009e06:	db32      	blt.n	8009e6e <__lshift+0x86>
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff fded 	bl	80099e8 <_Balloc>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4680      	mov	r8, r0
 8009e12:	f100 0114 	add.w	r1, r0, #20
 8009e16:	461a      	mov	r2, r3
 8009e18:	4553      	cmp	r3, sl
 8009e1a:	db2b      	blt.n	8009e74 <__lshift+0x8c>
 8009e1c:	6920      	ldr	r0, [r4, #16]
 8009e1e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e22:	f104 0314 	add.w	r3, r4, #20
 8009e26:	f016 021f 	ands.w	r2, r6, #31
 8009e2a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e2e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e32:	d025      	beq.n	8009e80 <__lshift+0x98>
 8009e34:	f1c2 0e20 	rsb	lr, r2, #32
 8009e38:	2000      	movs	r0, #0
 8009e3a:	681e      	ldr	r6, [r3, #0]
 8009e3c:	468a      	mov	sl, r1
 8009e3e:	4096      	lsls	r6, r2
 8009e40:	4330      	orrs	r0, r6
 8009e42:	f84a 0b04 	str.w	r0, [sl], #4
 8009e46:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e4a:	459c      	cmp	ip, r3
 8009e4c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e50:	d814      	bhi.n	8009e7c <__lshift+0x94>
 8009e52:	6048      	str	r0, [r1, #4]
 8009e54:	b108      	cbz	r0, 8009e5a <__lshift+0x72>
 8009e56:	f109 0502 	add.w	r5, r9, #2
 8009e5a:	3d01      	subs	r5, #1
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e62:	4621      	mov	r1, r4
 8009e64:	f7ff fdf4 	bl	8009a50 <_Bfree>
 8009e68:	4640      	mov	r0, r8
 8009e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6e:	3101      	adds	r1, #1
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	e7c7      	b.n	8009e04 <__lshift+0x1c>
 8009e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	e7cd      	b.n	8009e18 <__lshift+0x30>
 8009e7c:	4651      	mov	r1, sl
 8009e7e:	e7dc      	b.n	8009e3a <__lshift+0x52>
 8009e80:	3904      	subs	r1, #4
 8009e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e86:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e8a:	459c      	cmp	ip, r3
 8009e8c:	d8f9      	bhi.n	8009e82 <__lshift+0x9a>
 8009e8e:	e7e4      	b.n	8009e5a <__lshift+0x72>

08009e90 <__mcmp>:
 8009e90:	6903      	ldr	r3, [r0, #16]
 8009e92:	690a      	ldr	r2, [r1, #16]
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	b530      	push	{r4, r5, lr}
 8009e98:	d10c      	bne.n	8009eb4 <__mcmp+0x24>
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	3014      	adds	r0, #20
 8009e9e:	3114      	adds	r1, #20
 8009ea0:	1884      	adds	r4, r0, r2
 8009ea2:	4411      	add	r1, r2
 8009ea4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ea8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009eac:	4295      	cmp	r5, r2
 8009eae:	d003      	beq.n	8009eb8 <__mcmp+0x28>
 8009eb0:	d305      	bcc.n	8009ebe <__mcmp+0x2e>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	bd30      	pop	{r4, r5, pc}
 8009eb8:	42a0      	cmp	r0, r4
 8009eba:	d3f3      	bcc.n	8009ea4 <__mcmp+0x14>
 8009ebc:	e7fa      	b.n	8009eb4 <__mcmp+0x24>
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec2:	e7f7      	b.n	8009eb4 <__mcmp+0x24>

08009ec4 <__mdiff>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	460d      	mov	r5, r1
 8009eca:	4607      	mov	r7, r0
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4628      	mov	r0, r5
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	f7ff ffdd 	bl	8009e90 <__mcmp>
 8009ed6:	1e06      	subs	r6, r0, #0
 8009ed8:	d108      	bne.n	8009eec <__mdiff+0x28>
 8009eda:	4631      	mov	r1, r6
 8009edc:	4638      	mov	r0, r7
 8009ede:	f7ff fd83 	bl	80099e8 <_Balloc>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eec:	bfa4      	itt	ge
 8009eee:	4623      	movge	r3, r4
 8009ef0:	462c      	movge	r4, r5
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	6861      	ldr	r1, [r4, #4]
 8009ef6:	bfa6      	itte	ge
 8009ef8:	461d      	movge	r5, r3
 8009efa:	2600      	movge	r6, #0
 8009efc:	2601      	movlt	r6, #1
 8009efe:	f7ff fd73 	bl	80099e8 <_Balloc>
 8009f02:	692b      	ldr	r3, [r5, #16]
 8009f04:	60c6      	str	r6, [r0, #12]
 8009f06:	6926      	ldr	r6, [r4, #16]
 8009f08:	f105 0914 	add.w	r9, r5, #20
 8009f0c:	f104 0214 	add.w	r2, r4, #20
 8009f10:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009f14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009f18:	f100 0514 	add.w	r5, r0, #20
 8009f1c:	f04f 0e00 	mov.w	lr, #0
 8009f20:	f852 ab04 	ldr.w	sl, [r2], #4
 8009f24:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f28:	fa1e f18a 	uxtah	r1, lr, sl
 8009f2c:	b2a3      	uxth	r3, r4
 8009f2e:	1ac9      	subs	r1, r1, r3
 8009f30:	0c23      	lsrs	r3, r4, #16
 8009f32:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009f36:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f3a:	b289      	uxth	r1, r1
 8009f3c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f40:	45c8      	cmp	r8, r9
 8009f42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f46:	4694      	mov	ip, r2
 8009f48:	f845 3b04 	str.w	r3, [r5], #4
 8009f4c:	d8e8      	bhi.n	8009f20 <__mdiff+0x5c>
 8009f4e:	45bc      	cmp	ip, r7
 8009f50:	d304      	bcc.n	8009f5c <__mdiff+0x98>
 8009f52:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009f56:	b183      	cbz	r3, 8009f7a <__mdiff+0xb6>
 8009f58:	6106      	str	r6, [r0, #16]
 8009f5a:	e7c5      	b.n	8009ee8 <__mdiff+0x24>
 8009f5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f60:	fa1e f381 	uxtah	r3, lr, r1
 8009f64:	141a      	asrs	r2, r3, #16
 8009f66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f70:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009f74:	f845 3b04 	str.w	r3, [r5], #4
 8009f78:	e7e9      	b.n	8009f4e <__mdiff+0x8a>
 8009f7a:	3e01      	subs	r6, #1
 8009f7c:	e7e9      	b.n	8009f52 <__mdiff+0x8e>
	...

08009f80 <__ulp>:
 8009f80:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <__ulp+0x4c>)
 8009f82:	ee10 2a90 	vmov	r2, s1
 8009f86:	401a      	ands	r2, r3
 8009f88:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dd04      	ble.n	8009f9a <__ulp+0x1a>
 8009f90:	2000      	movs	r0, #0
 8009f92:	4619      	mov	r1, r3
 8009f94:	ec41 0b10 	vmov	d0, r0, r1
 8009f98:	4770      	bx	lr
 8009f9a:	425b      	negs	r3, r3
 8009f9c:	151b      	asrs	r3, r3, #20
 8009f9e:	2b13      	cmp	r3, #19
 8009fa0:	f04f 0000 	mov.w	r0, #0
 8009fa4:	f04f 0100 	mov.w	r1, #0
 8009fa8:	dc04      	bgt.n	8009fb4 <__ulp+0x34>
 8009faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009fae:	fa42 f103 	asr.w	r1, r2, r3
 8009fb2:	e7ef      	b.n	8009f94 <__ulp+0x14>
 8009fb4:	3b14      	subs	r3, #20
 8009fb6:	2b1e      	cmp	r3, #30
 8009fb8:	f04f 0201 	mov.w	r2, #1
 8009fbc:	bfda      	itte	le
 8009fbe:	f1c3 031f 	rsble	r3, r3, #31
 8009fc2:	fa02 f303 	lslle.w	r3, r2, r3
 8009fc6:	4613      	movgt	r3, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	e7e3      	b.n	8009f94 <__ulp+0x14>
 8009fcc:	7ff00000 	.word	0x7ff00000

08009fd0 <__b2d>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	6905      	ldr	r5, [r0, #16]
 8009fd4:	f100 0714 	add.w	r7, r0, #20
 8009fd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009fdc:	1f2e      	subs	r6, r5, #4
 8009fde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff fdc4 	bl	8009b70 <__hi0bits>
 8009fe8:	f1c0 0320 	rsb	r3, r0, #32
 8009fec:	280a      	cmp	r0, #10
 8009fee:	600b      	str	r3, [r1, #0]
 8009ff0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a068 <__b2d+0x98>
 8009ff4:	dc14      	bgt.n	800a020 <__b2d+0x50>
 8009ff6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009ffa:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ffe:	42b7      	cmp	r7, r6
 800a000:	ea41 030c 	orr.w	r3, r1, ip
 800a004:	bf34      	ite	cc
 800a006:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a00a:	2100      	movcs	r1, #0
 800a00c:	3015      	adds	r0, #21
 800a00e:	fa04 f000 	lsl.w	r0, r4, r0
 800a012:	fa21 f10e 	lsr.w	r1, r1, lr
 800a016:	ea40 0201 	orr.w	r2, r0, r1
 800a01a:	ec43 2b10 	vmov	d0, r2, r3
 800a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a020:	42b7      	cmp	r7, r6
 800a022:	bf3a      	itte	cc
 800a024:	f1a5 0608 	subcc.w	r6, r5, #8
 800a028:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a02c:	2100      	movcs	r1, #0
 800a02e:	380b      	subs	r0, #11
 800a030:	d015      	beq.n	800a05e <__b2d+0x8e>
 800a032:	4084      	lsls	r4, r0
 800a034:	f1c0 0520 	rsb	r5, r0, #32
 800a038:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a03c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a040:	42be      	cmp	r6, r7
 800a042:	fa21 fc05 	lsr.w	ip, r1, r5
 800a046:	ea44 030c 	orr.w	r3, r4, ip
 800a04a:	bf8c      	ite	hi
 800a04c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a050:	2400      	movls	r4, #0
 800a052:	fa01 f000 	lsl.w	r0, r1, r0
 800a056:	40ec      	lsrs	r4, r5
 800a058:	ea40 0204 	orr.w	r2, r0, r4
 800a05c:	e7dd      	b.n	800a01a <__b2d+0x4a>
 800a05e:	ea44 030c 	orr.w	r3, r4, ip
 800a062:	460a      	mov	r2, r1
 800a064:	e7d9      	b.n	800a01a <__b2d+0x4a>
 800a066:	bf00      	nop
 800a068:	3ff00000 	.word	0x3ff00000

0800a06c <__d2b>:
 800a06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a070:	460e      	mov	r6, r1
 800a072:	2101      	movs	r1, #1
 800a074:	ec59 8b10 	vmov	r8, r9, d0
 800a078:	4615      	mov	r5, r2
 800a07a:	f7ff fcb5 	bl	80099e8 <_Balloc>
 800a07e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a082:	4607      	mov	r7, r0
 800a084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a088:	bb34      	cbnz	r4, 800a0d8 <__d2b+0x6c>
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	f1b8 0300 	subs.w	r3, r8, #0
 800a090:	d027      	beq.n	800a0e2 <__d2b+0x76>
 800a092:	a802      	add	r0, sp, #8
 800a094:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a098:	f7ff fd89 	bl	8009bae <__lo0bits>
 800a09c:	9900      	ldr	r1, [sp, #0]
 800a09e:	b1f0      	cbz	r0, 800a0de <__d2b+0x72>
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	f1c0 0320 	rsb	r3, r0, #32
 800a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0aa:	430b      	orrs	r3, r1
 800a0ac:	40c2      	lsrs	r2, r0
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	9201      	str	r2, [sp, #4]
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	61bb      	str	r3, [r7, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bf14      	ite	ne
 800a0ba:	2102      	movne	r1, #2
 800a0bc:	2101      	moveq	r1, #1
 800a0be:	6139      	str	r1, [r7, #16]
 800a0c0:	b1c4      	cbz	r4, 800a0f4 <__d2b+0x88>
 800a0c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a0c6:	4404      	add	r4, r0
 800a0c8:	6034      	str	r4, [r6, #0]
 800a0ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0ce:	6028      	str	r0, [r5, #0]
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	b003      	add	sp, #12
 800a0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0dc:	e7d5      	b.n	800a08a <__d2b+0x1e>
 800a0de:	6179      	str	r1, [r7, #20]
 800a0e0:	e7e7      	b.n	800a0b2 <__d2b+0x46>
 800a0e2:	a801      	add	r0, sp, #4
 800a0e4:	f7ff fd63 	bl	8009bae <__lo0bits>
 800a0e8:	9b01      	ldr	r3, [sp, #4]
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	6139      	str	r1, [r7, #16]
 800a0f0:	3020      	adds	r0, #32
 800a0f2:	e7e5      	b.n	800a0c0 <__d2b+0x54>
 800a0f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a0f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0fc:	6030      	str	r0, [r6, #0]
 800a0fe:	6918      	ldr	r0, [r3, #16]
 800a100:	f7ff fd36 	bl	8009b70 <__hi0bits>
 800a104:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a108:	e7e1      	b.n	800a0ce <__d2b+0x62>

0800a10a <__ratio>:
 800a10a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10e:	4688      	mov	r8, r1
 800a110:	4669      	mov	r1, sp
 800a112:	4681      	mov	r9, r0
 800a114:	f7ff ff5c 	bl	8009fd0 <__b2d>
 800a118:	a901      	add	r1, sp, #4
 800a11a:	4640      	mov	r0, r8
 800a11c:	ec57 6b10 	vmov	r6, r7, d0
 800a120:	f7ff ff56 	bl	8009fd0 <__b2d>
 800a124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a128:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a12c:	eba3 0c02 	sub.w	ip, r3, r2
 800a130:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a13a:	ec5b ab10 	vmov	sl, fp, d0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bfce      	itee	gt
 800a142:	463a      	movgt	r2, r7
 800a144:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a148:	465a      	movle	r2, fp
 800a14a:	4659      	mov	r1, fp
 800a14c:	463d      	mov	r5, r7
 800a14e:	bfd4      	ite	le
 800a150:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a154:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a158:	4630      	mov	r0, r6
 800a15a:	ee10 2a10 	vmov	r2, s0
 800a15e:	460b      	mov	r3, r1
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fb73 	bl	800084c <__aeabi_ddiv>
 800a166:	ec41 0b10 	vmov	d0, r0, r1
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a170 <__copybits>:
 800a170:	3901      	subs	r1, #1
 800a172:	b510      	push	{r4, lr}
 800a174:	1149      	asrs	r1, r1, #5
 800a176:	6914      	ldr	r4, [r2, #16]
 800a178:	3101      	adds	r1, #1
 800a17a:	f102 0314 	add.w	r3, r2, #20
 800a17e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a182:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a186:	42a3      	cmp	r3, r4
 800a188:	4602      	mov	r2, r0
 800a18a:	d303      	bcc.n	800a194 <__copybits+0x24>
 800a18c:	2300      	movs	r3, #0
 800a18e:	428a      	cmp	r2, r1
 800a190:	d305      	bcc.n	800a19e <__copybits+0x2e>
 800a192:	bd10      	pop	{r4, pc}
 800a194:	f853 2b04 	ldr.w	r2, [r3], #4
 800a198:	f840 2b04 	str.w	r2, [r0], #4
 800a19c:	e7f3      	b.n	800a186 <__copybits+0x16>
 800a19e:	f842 3b04 	str.w	r3, [r2], #4
 800a1a2:	e7f4      	b.n	800a18e <__copybits+0x1e>

0800a1a4 <__any_on>:
 800a1a4:	f100 0214 	add.w	r2, r0, #20
 800a1a8:	6900      	ldr	r0, [r0, #16]
 800a1aa:	114b      	asrs	r3, r1, #5
 800a1ac:	4298      	cmp	r0, r3
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	db11      	blt.n	800a1d6 <__any_on+0x32>
 800a1b2:	dd0a      	ble.n	800a1ca <__any_on+0x26>
 800a1b4:	f011 011f 	ands.w	r1, r1, #31
 800a1b8:	d007      	beq.n	800a1ca <__any_on+0x26>
 800a1ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1be:	fa24 f001 	lsr.w	r0, r4, r1
 800a1c2:	fa00 f101 	lsl.w	r1, r0, r1
 800a1c6:	428c      	cmp	r4, r1
 800a1c8:	d10b      	bne.n	800a1e2 <__any_on+0x3e>
 800a1ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d803      	bhi.n	800a1da <__any_on+0x36>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	e7f7      	b.n	800a1ca <__any_on+0x26>
 800a1da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1de:	2900      	cmp	r1, #0
 800a1e0:	d0f5      	beq.n	800a1ce <__any_on+0x2a>
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	e7f6      	b.n	800a1d4 <__any_on+0x30>

0800a1e6 <_calloc_r>:
 800a1e6:	b538      	push	{r3, r4, r5, lr}
 800a1e8:	fb02 f401 	mul.w	r4, r2, r1
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f000 f857 	bl	800a2a0 <_malloc_r>
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	b118      	cbz	r0, 800a1fe <_calloc_r+0x18>
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	f7fc fd2a 	bl	8006c52 <memset>
 800a1fe:	4628      	mov	r0, r5
 800a200:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a204 <_free_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4605      	mov	r5, r0
 800a208:	2900      	cmp	r1, #0
 800a20a:	d045      	beq.n	800a298 <_free_r+0x94>
 800a20c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a210:	1f0c      	subs	r4, r1, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	bfb8      	it	lt
 800a216:	18e4      	addlt	r4, r4, r3
 800a218:	f000 fa36 	bl	800a688 <__malloc_lock>
 800a21c:	4a1f      	ldr	r2, [pc, #124]	; (800a29c <_free_r+0x98>)
 800a21e:	6813      	ldr	r3, [r2, #0]
 800a220:	4610      	mov	r0, r2
 800a222:	b933      	cbnz	r3, 800a232 <_free_r+0x2e>
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	6014      	str	r4, [r2, #0]
 800a228:	4628      	mov	r0, r5
 800a22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22e:	f000 ba2c 	b.w	800a68a <__malloc_unlock>
 800a232:	42a3      	cmp	r3, r4
 800a234:	d90c      	bls.n	800a250 <_free_r+0x4c>
 800a236:	6821      	ldr	r1, [r4, #0]
 800a238:	1862      	adds	r2, r4, r1
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bf04      	itt	eq
 800a23e:	681a      	ldreq	r2, [r3, #0]
 800a240:	685b      	ldreq	r3, [r3, #4]
 800a242:	6063      	str	r3, [r4, #4]
 800a244:	bf04      	itt	eq
 800a246:	1852      	addeq	r2, r2, r1
 800a248:	6022      	streq	r2, [r4, #0]
 800a24a:	6004      	str	r4, [r0, #0]
 800a24c:	e7ec      	b.n	800a228 <_free_r+0x24>
 800a24e:	4613      	mov	r3, r2
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	b10a      	cbz	r2, 800a258 <_free_r+0x54>
 800a254:	42a2      	cmp	r2, r4
 800a256:	d9fa      	bls.n	800a24e <_free_r+0x4a>
 800a258:	6819      	ldr	r1, [r3, #0]
 800a25a:	1858      	adds	r0, r3, r1
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d10b      	bne.n	800a278 <_free_r+0x74>
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	4401      	add	r1, r0
 800a264:	1858      	adds	r0, r3, r1
 800a266:	4282      	cmp	r2, r0
 800a268:	6019      	str	r1, [r3, #0]
 800a26a:	d1dd      	bne.n	800a228 <_free_r+0x24>
 800a26c:	6810      	ldr	r0, [r2, #0]
 800a26e:	6852      	ldr	r2, [r2, #4]
 800a270:	605a      	str	r2, [r3, #4]
 800a272:	4401      	add	r1, r0
 800a274:	6019      	str	r1, [r3, #0]
 800a276:	e7d7      	b.n	800a228 <_free_r+0x24>
 800a278:	d902      	bls.n	800a280 <_free_r+0x7c>
 800a27a:	230c      	movs	r3, #12
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	e7d3      	b.n	800a228 <_free_r+0x24>
 800a280:	6820      	ldr	r0, [r4, #0]
 800a282:	1821      	adds	r1, r4, r0
 800a284:	428a      	cmp	r2, r1
 800a286:	bf04      	itt	eq
 800a288:	6811      	ldreq	r1, [r2, #0]
 800a28a:	6852      	ldreq	r2, [r2, #4]
 800a28c:	6062      	str	r2, [r4, #4]
 800a28e:	bf04      	itt	eq
 800a290:	1809      	addeq	r1, r1, r0
 800a292:	6021      	streq	r1, [r4, #0]
 800a294:	605c      	str	r4, [r3, #4]
 800a296:	e7c7      	b.n	800a228 <_free_r+0x24>
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	2000de38 	.word	0x2000de38

0800a2a0 <_malloc_r>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	1ccd      	adds	r5, r1, #3
 800a2a4:	f025 0503 	bic.w	r5, r5, #3
 800a2a8:	3508      	adds	r5, #8
 800a2aa:	2d0c      	cmp	r5, #12
 800a2ac:	bf38      	it	cc
 800a2ae:	250c      	movcc	r5, #12
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	db01      	blt.n	800a2ba <_malloc_r+0x1a>
 800a2b6:	42a9      	cmp	r1, r5
 800a2b8:	d903      	bls.n	800a2c2 <_malloc_r+0x22>
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	6033      	str	r3, [r6, #0]
 800a2be:	2000      	movs	r0, #0
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	f000 f9e1 	bl	800a688 <__malloc_lock>
 800a2c6:	4a21      	ldr	r2, [pc, #132]	; (800a34c <_malloc_r+0xac>)
 800a2c8:	6814      	ldr	r4, [r2, #0]
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	b991      	cbnz	r1, 800a2f4 <_malloc_r+0x54>
 800a2ce:	4c20      	ldr	r4, [pc, #128]	; (800a350 <_malloc_r+0xb0>)
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	b91b      	cbnz	r3, 800a2dc <_malloc_r+0x3c>
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f000 f98f 	bl	800a5f8 <_sbrk_r>
 800a2da:	6020      	str	r0, [r4, #0]
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f000 f98a 	bl	800a5f8 <_sbrk_r>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d124      	bne.n	800a332 <_malloc_r+0x92>
 800a2e8:	230c      	movs	r3, #12
 800a2ea:	6033      	str	r3, [r6, #0]
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f000 f9cc 	bl	800a68a <__malloc_unlock>
 800a2f2:	e7e4      	b.n	800a2be <_malloc_r+0x1e>
 800a2f4:	680b      	ldr	r3, [r1, #0]
 800a2f6:	1b5b      	subs	r3, r3, r5
 800a2f8:	d418      	bmi.n	800a32c <_malloc_r+0x8c>
 800a2fa:	2b0b      	cmp	r3, #11
 800a2fc:	d90f      	bls.n	800a31e <_malloc_r+0x7e>
 800a2fe:	600b      	str	r3, [r1, #0]
 800a300:	50cd      	str	r5, [r1, r3]
 800a302:	18cc      	adds	r4, r1, r3
 800a304:	4630      	mov	r0, r6
 800a306:	f000 f9c0 	bl	800a68a <__malloc_unlock>
 800a30a:	f104 000b 	add.w	r0, r4, #11
 800a30e:	1d23      	adds	r3, r4, #4
 800a310:	f020 0007 	bic.w	r0, r0, #7
 800a314:	1ac3      	subs	r3, r0, r3
 800a316:	d0d3      	beq.n	800a2c0 <_malloc_r+0x20>
 800a318:	425a      	negs	r2, r3
 800a31a:	50e2      	str	r2, [r4, r3]
 800a31c:	e7d0      	b.n	800a2c0 <_malloc_r+0x20>
 800a31e:	428c      	cmp	r4, r1
 800a320:	684b      	ldr	r3, [r1, #4]
 800a322:	bf16      	itet	ne
 800a324:	6063      	strne	r3, [r4, #4]
 800a326:	6013      	streq	r3, [r2, #0]
 800a328:	460c      	movne	r4, r1
 800a32a:	e7eb      	b.n	800a304 <_malloc_r+0x64>
 800a32c:	460c      	mov	r4, r1
 800a32e:	6849      	ldr	r1, [r1, #4]
 800a330:	e7cc      	b.n	800a2cc <_malloc_r+0x2c>
 800a332:	1cc4      	adds	r4, r0, #3
 800a334:	f024 0403 	bic.w	r4, r4, #3
 800a338:	42a0      	cmp	r0, r4
 800a33a:	d005      	beq.n	800a348 <_malloc_r+0xa8>
 800a33c:	1a21      	subs	r1, r4, r0
 800a33e:	4630      	mov	r0, r6
 800a340:	f000 f95a 	bl	800a5f8 <_sbrk_r>
 800a344:	3001      	adds	r0, #1
 800a346:	d0cf      	beq.n	800a2e8 <_malloc_r+0x48>
 800a348:	6025      	str	r5, [r4, #0]
 800a34a:	e7db      	b.n	800a304 <_malloc_r+0x64>
 800a34c:	2000de38 	.word	0x2000de38
 800a350:	2000de3c 	.word	0x2000de3c

0800a354 <__ssputs_r>:
 800a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	688e      	ldr	r6, [r1, #8]
 800a35a:	429e      	cmp	r6, r3
 800a35c:	4682      	mov	sl, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4690      	mov	r8, r2
 800a362:	4699      	mov	r9, r3
 800a364:	d837      	bhi.n	800a3d6 <__ssputs_r+0x82>
 800a366:	898a      	ldrh	r2, [r1, #12]
 800a368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a36c:	d031      	beq.n	800a3d2 <__ssputs_r+0x7e>
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	6909      	ldr	r1, [r1, #16]
 800a372:	1a6f      	subs	r7, r5, r1
 800a374:	6965      	ldr	r5, [r4, #20]
 800a376:	2302      	movs	r3, #2
 800a378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a37c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a380:	f109 0301 	add.w	r3, r9, #1
 800a384:	443b      	add	r3, r7
 800a386:	429d      	cmp	r5, r3
 800a388:	bf38      	it	cc
 800a38a:	461d      	movcc	r5, r3
 800a38c:	0553      	lsls	r3, r2, #21
 800a38e:	d530      	bpl.n	800a3f2 <__ssputs_r+0x9e>
 800a390:	4629      	mov	r1, r5
 800a392:	f7ff ff85 	bl	800a2a0 <_malloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	b950      	cbnz	r0, 800a3b0 <__ssputs_r+0x5c>
 800a39a:	230c      	movs	r3, #12
 800a39c:	f8ca 3000 	str.w	r3, [sl]
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	463a      	mov	r2, r7
 800a3b2:	6921      	ldr	r1, [r4, #16]
 800a3b4:	f7fc fc42 	bl	8006c3c <memcpy>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	6126      	str	r6, [r4, #16]
 800a3c6:	6165      	str	r5, [r4, #20]
 800a3c8:	443e      	add	r6, r7
 800a3ca:	1bed      	subs	r5, r5, r7
 800a3cc:	6026      	str	r6, [r4, #0]
 800a3ce:	60a5      	str	r5, [r4, #8]
 800a3d0:	464e      	mov	r6, r9
 800a3d2:	454e      	cmp	r6, r9
 800a3d4:	d900      	bls.n	800a3d8 <__ssputs_r+0x84>
 800a3d6:	464e      	mov	r6, r9
 800a3d8:	4632      	mov	r2, r6
 800a3da:	4641      	mov	r1, r8
 800a3dc:	6820      	ldr	r0, [r4, #0]
 800a3de:	f000 f93a 	bl	800a656 <memmove>
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	1b9b      	subs	r3, r3, r6
 800a3e6:	60a3      	str	r3, [r4, #8]
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	441e      	add	r6, r3
 800a3ec:	6026      	str	r6, [r4, #0]
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	e7dc      	b.n	800a3ac <__ssputs_r+0x58>
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	f000 f94a 	bl	800a68c <_realloc_r>
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d1e2      	bne.n	800a3c4 <__ssputs_r+0x70>
 800a3fe:	6921      	ldr	r1, [r4, #16]
 800a400:	4650      	mov	r0, sl
 800a402:	f7ff feff 	bl	800a204 <_free_r>
 800a406:	e7c8      	b.n	800a39a <__ssputs_r+0x46>

0800a408 <_svfiprintf_r>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	461d      	mov	r5, r3
 800a40e:	898b      	ldrh	r3, [r1, #12]
 800a410:	061f      	lsls	r7, r3, #24
 800a412:	b09d      	sub	sp, #116	; 0x74
 800a414:	4680      	mov	r8, r0
 800a416:	460c      	mov	r4, r1
 800a418:	4616      	mov	r6, r2
 800a41a:	d50f      	bpl.n	800a43c <_svfiprintf_r+0x34>
 800a41c:	690b      	ldr	r3, [r1, #16]
 800a41e:	b96b      	cbnz	r3, 800a43c <_svfiprintf_r+0x34>
 800a420:	2140      	movs	r1, #64	; 0x40
 800a422:	f7ff ff3d 	bl	800a2a0 <_malloc_r>
 800a426:	6020      	str	r0, [r4, #0]
 800a428:	6120      	str	r0, [r4, #16]
 800a42a:	b928      	cbnz	r0, 800a438 <_svfiprintf_r+0x30>
 800a42c:	230c      	movs	r3, #12
 800a42e:	f8c8 3000 	str.w	r3, [r8]
 800a432:	f04f 30ff 	mov.w	r0, #4294967295
 800a436:	e0c8      	b.n	800a5ca <_svfiprintf_r+0x1c2>
 800a438:	2340      	movs	r3, #64	; 0x40
 800a43a:	6163      	str	r3, [r4, #20]
 800a43c:	2300      	movs	r3, #0
 800a43e:	9309      	str	r3, [sp, #36]	; 0x24
 800a440:	2320      	movs	r3, #32
 800a442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a446:	2330      	movs	r3, #48	; 0x30
 800a448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a44c:	9503      	str	r5, [sp, #12]
 800a44e:	f04f 0b01 	mov.w	fp, #1
 800a452:	4637      	mov	r7, r6
 800a454:	463d      	mov	r5, r7
 800a456:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a45a:	b10b      	cbz	r3, 800a460 <_svfiprintf_r+0x58>
 800a45c:	2b25      	cmp	r3, #37	; 0x25
 800a45e:	d13e      	bne.n	800a4de <_svfiprintf_r+0xd6>
 800a460:	ebb7 0a06 	subs.w	sl, r7, r6
 800a464:	d00b      	beq.n	800a47e <_svfiprintf_r+0x76>
 800a466:	4653      	mov	r3, sl
 800a468:	4632      	mov	r2, r6
 800a46a:	4621      	mov	r1, r4
 800a46c:	4640      	mov	r0, r8
 800a46e:	f7ff ff71 	bl	800a354 <__ssputs_r>
 800a472:	3001      	adds	r0, #1
 800a474:	f000 80a4 	beq.w	800a5c0 <_svfiprintf_r+0x1b8>
 800a478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47a:	4453      	add	r3, sl
 800a47c:	9309      	str	r3, [sp, #36]	; 0x24
 800a47e:	783b      	ldrb	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 809d 	beq.w	800a5c0 <_svfiprintf_r+0x1b8>
 800a486:	2300      	movs	r3, #0
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a498:	931a      	str	r3, [sp, #104]	; 0x68
 800a49a:	462f      	mov	r7, r5
 800a49c:	2205      	movs	r2, #5
 800a49e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4a2:	4850      	ldr	r0, [pc, #320]	; (800a5e4 <_svfiprintf_r+0x1dc>)
 800a4a4:	f7f5 fe9c 	bl	80001e0 <memchr>
 800a4a8:	9b04      	ldr	r3, [sp, #16]
 800a4aa:	b9d0      	cbnz	r0, 800a4e2 <_svfiprintf_r+0xda>
 800a4ac:	06d9      	lsls	r1, r3, #27
 800a4ae:	bf44      	itt	mi
 800a4b0:	2220      	movmi	r2, #32
 800a4b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4b6:	071a      	lsls	r2, r3, #28
 800a4b8:	bf44      	itt	mi
 800a4ba:	222b      	movmi	r2, #43	; 0x2b
 800a4bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4c0:	782a      	ldrb	r2, [r5, #0]
 800a4c2:	2a2a      	cmp	r2, #42	; 0x2a
 800a4c4:	d015      	beq.n	800a4f2 <_svfiprintf_r+0xea>
 800a4c6:	9a07      	ldr	r2, [sp, #28]
 800a4c8:	462f      	mov	r7, r5
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	250a      	movs	r5, #10
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d4:	3b30      	subs	r3, #48	; 0x30
 800a4d6:	2b09      	cmp	r3, #9
 800a4d8:	d94d      	bls.n	800a576 <_svfiprintf_r+0x16e>
 800a4da:	b1b8      	cbz	r0, 800a50c <_svfiprintf_r+0x104>
 800a4dc:	e00f      	b.n	800a4fe <_svfiprintf_r+0xf6>
 800a4de:	462f      	mov	r7, r5
 800a4e0:	e7b8      	b.n	800a454 <_svfiprintf_r+0x4c>
 800a4e2:	4a40      	ldr	r2, [pc, #256]	; (800a5e4 <_svfiprintf_r+0x1dc>)
 800a4e4:	1a80      	subs	r0, r0, r2
 800a4e6:	fa0b f000 	lsl.w	r0, fp, r0
 800a4ea:	4318      	orrs	r0, r3
 800a4ec:	9004      	str	r0, [sp, #16]
 800a4ee:	463d      	mov	r5, r7
 800a4f0:	e7d3      	b.n	800a49a <_svfiprintf_r+0x92>
 800a4f2:	9a03      	ldr	r2, [sp, #12]
 800a4f4:	1d11      	adds	r1, r2, #4
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	9103      	str	r1, [sp, #12]
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	db01      	blt.n	800a502 <_svfiprintf_r+0xfa>
 800a4fe:	9207      	str	r2, [sp, #28]
 800a500:	e004      	b.n	800a50c <_svfiprintf_r+0x104>
 800a502:	4252      	negs	r2, r2
 800a504:	f043 0302 	orr.w	r3, r3, #2
 800a508:	9207      	str	r2, [sp, #28]
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	783b      	ldrb	r3, [r7, #0]
 800a50e:	2b2e      	cmp	r3, #46	; 0x2e
 800a510:	d10c      	bne.n	800a52c <_svfiprintf_r+0x124>
 800a512:	787b      	ldrb	r3, [r7, #1]
 800a514:	2b2a      	cmp	r3, #42	; 0x2a
 800a516:	d133      	bne.n	800a580 <_svfiprintf_r+0x178>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9203      	str	r2, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfb8      	it	lt
 800a524:	f04f 33ff 	movlt.w	r3, #4294967295
 800a528:	3702      	adds	r7, #2
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	4d2e      	ldr	r5, [pc, #184]	; (800a5e8 <_svfiprintf_r+0x1e0>)
 800a52e:	7839      	ldrb	r1, [r7, #0]
 800a530:	2203      	movs	r2, #3
 800a532:	4628      	mov	r0, r5
 800a534:	f7f5 fe54 	bl	80001e0 <memchr>
 800a538:	b138      	cbz	r0, 800a54a <_svfiprintf_r+0x142>
 800a53a:	2340      	movs	r3, #64	; 0x40
 800a53c:	1b40      	subs	r0, r0, r5
 800a53e:	fa03 f000 	lsl.w	r0, r3, r0
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	4303      	orrs	r3, r0
 800a546:	3701      	adds	r7, #1
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	7839      	ldrb	r1, [r7, #0]
 800a54c:	4827      	ldr	r0, [pc, #156]	; (800a5ec <_svfiprintf_r+0x1e4>)
 800a54e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a552:	2206      	movs	r2, #6
 800a554:	1c7e      	adds	r6, r7, #1
 800a556:	f7f5 fe43 	bl	80001e0 <memchr>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d038      	beq.n	800a5d0 <_svfiprintf_r+0x1c8>
 800a55e:	4b24      	ldr	r3, [pc, #144]	; (800a5f0 <_svfiprintf_r+0x1e8>)
 800a560:	bb13      	cbnz	r3, 800a5a8 <_svfiprintf_r+0x1a0>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	3307      	adds	r3, #7
 800a566:	f023 0307 	bic.w	r3, r3, #7
 800a56a:	3308      	adds	r3, #8
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	444b      	add	r3, r9
 800a572:	9309      	str	r3, [sp, #36]	; 0x24
 800a574:	e76d      	b.n	800a452 <_svfiprintf_r+0x4a>
 800a576:	fb05 3202 	mla	r2, r5, r2, r3
 800a57a:	2001      	movs	r0, #1
 800a57c:	460f      	mov	r7, r1
 800a57e:	e7a6      	b.n	800a4ce <_svfiprintf_r+0xc6>
 800a580:	2300      	movs	r3, #0
 800a582:	3701      	adds	r7, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	4619      	mov	r1, r3
 800a588:	250a      	movs	r5, #10
 800a58a:	4638      	mov	r0, r7
 800a58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a590:	3a30      	subs	r2, #48	; 0x30
 800a592:	2a09      	cmp	r2, #9
 800a594:	d903      	bls.n	800a59e <_svfiprintf_r+0x196>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0c8      	beq.n	800a52c <_svfiprintf_r+0x124>
 800a59a:	9105      	str	r1, [sp, #20]
 800a59c:	e7c6      	b.n	800a52c <_svfiprintf_r+0x124>
 800a59e:	fb05 2101 	mla	r1, r5, r1, r2
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	e7f0      	b.n	800a58a <_svfiprintf_r+0x182>
 800a5a8:	ab03      	add	r3, sp, #12
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <_svfiprintf_r+0x1ec>)
 800a5b0:	a904      	add	r1, sp, #16
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7fc fbea 	bl	8006d8c <_printf_float>
 800a5b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a5bc:	4681      	mov	r9, r0
 800a5be:	d1d6      	bne.n	800a56e <_svfiprintf_r+0x166>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	065b      	lsls	r3, r3, #25
 800a5c4:	f53f af35 	bmi.w	800a432 <_svfiprintf_r+0x2a>
 800a5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ca:	b01d      	add	sp, #116	; 0x74
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <_svfiprintf_r+0x1ec>)
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	4640      	mov	r0, r8
 800a5dc:	f7fc fe8c 	bl	80072f8 <_printf_i>
 800a5e0:	e7ea      	b.n	800a5b8 <_svfiprintf_r+0x1b0>
 800a5e2:	bf00      	nop
 800a5e4:	0800b2b4 	.word	0x0800b2b4
 800a5e8:	0800b2ba 	.word	0x0800b2ba
 800a5ec:	0800b2be 	.word	0x0800b2be
 800a5f0:	08006d8d 	.word	0x08006d8d
 800a5f4:	0800a355 	.word	0x0800a355

0800a5f8 <_sbrk_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4c06      	ldr	r4, [pc, #24]	; (800a614 <_sbrk_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4605      	mov	r5, r0
 800a600:	4608      	mov	r0, r1
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	f7f7 f8f6 	bl	80017f4 <_sbrk>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_sbrk_r+0x1a>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_sbrk_r+0x1a>
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20010914 	.word	0x20010914

0800a618 <strncmp>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	b16a      	cbz	r2, 800a638 <strncmp+0x20>
 800a61c:	3901      	subs	r1, #1
 800a61e:	1884      	adds	r4, r0, r2
 800a620:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a624:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a628:	4293      	cmp	r3, r2
 800a62a:	d103      	bne.n	800a634 <strncmp+0x1c>
 800a62c:	42a0      	cmp	r0, r4
 800a62e:	d001      	beq.n	800a634 <strncmp+0x1c>
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1f5      	bne.n	800a620 <strncmp+0x8>
 800a634:	1a98      	subs	r0, r3, r2
 800a636:	bd10      	pop	{r4, pc}
 800a638:	4610      	mov	r0, r2
 800a63a:	e7fc      	b.n	800a636 <strncmp+0x1e>

0800a63c <__ascii_wctomb>:
 800a63c:	b149      	cbz	r1, 800a652 <__ascii_wctomb+0x16>
 800a63e:	2aff      	cmp	r2, #255	; 0xff
 800a640:	bf85      	ittet	hi
 800a642:	238a      	movhi	r3, #138	; 0x8a
 800a644:	6003      	strhi	r3, [r0, #0]
 800a646:	700a      	strbls	r2, [r1, #0]
 800a648:	f04f 30ff 	movhi.w	r0, #4294967295
 800a64c:	bf98      	it	ls
 800a64e:	2001      	movls	r0, #1
 800a650:	4770      	bx	lr
 800a652:	4608      	mov	r0, r1
 800a654:	4770      	bx	lr

0800a656 <memmove>:
 800a656:	4288      	cmp	r0, r1
 800a658:	b510      	push	{r4, lr}
 800a65a:	eb01 0302 	add.w	r3, r1, r2
 800a65e:	d807      	bhi.n	800a670 <memmove+0x1a>
 800a660:	1e42      	subs	r2, r0, #1
 800a662:	4299      	cmp	r1, r3
 800a664:	d00a      	beq.n	800a67c <memmove+0x26>
 800a666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a66a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a66e:	e7f8      	b.n	800a662 <memmove+0xc>
 800a670:	4283      	cmp	r3, r0
 800a672:	d9f5      	bls.n	800a660 <memmove+0xa>
 800a674:	1881      	adds	r1, r0, r2
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	42d3      	cmn	r3, r2
 800a67a:	d100      	bne.n	800a67e <memmove+0x28>
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a682:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a686:	e7f7      	b.n	800a678 <memmove+0x22>

0800a688 <__malloc_lock>:
 800a688:	4770      	bx	lr

0800a68a <__malloc_unlock>:
 800a68a:	4770      	bx	lr

0800a68c <_realloc_r>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	4607      	mov	r7, r0
 800a690:	4614      	mov	r4, r2
 800a692:	460e      	mov	r6, r1
 800a694:	b921      	cbnz	r1, 800a6a0 <_realloc_r+0x14>
 800a696:	4611      	mov	r1, r2
 800a698:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a69c:	f7ff be00 	b.w	800a2a0 <_malloc_r>
 800a6a0:	b922      	cbnz	r2, 800a6ac <_realloc_r+0x20>
 800a6a2:	f7ff fdaf 	bl	800a204 <_free_r>
 800a6a6:	4625      	mov	r5, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	f000 f814 	bl	800a6d8 <_malloc_usable_size_r>
 800a6b0:	42a0      	cmp	r0, r4
 800a6b2:	d20f      	bcs.n	800a6d4 <_realloc_r+0x48>
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff fdf2 	bl	800a2a0 <_malloc_r>
 800a6bc:	4605      	mov	r5, r0
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0f2      	beq.n	800a6a8 <_realloc_r+0x1c>
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	f7fc fab9 	bl	8006c3c <memcpy>
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	f7ff fd99 	bl	800a204 <_free_r>
 800a6d2:	e7e9      	b.n	800a6a8 <_realloc_r+0x1c>
 800a6d4:	4635      	mov	r5, r6
 800a6d6:	e7e7      	b.n	800a6a8 <_realloc_r+0x1c>

0800a6d8 <_malloc_usable_size_r>:
 800a6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6dc:	1f18      	subs	r0, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfbc      	itt	lt
 800a6e2:	580b      	ldrlt	r3, [r1, r0]
 800a6e4:	18c0      	addlt	r0, r0, r3
 800a6e6:	4770      	bx	lr

0800a6e8 <log10>:
 800a6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ea:	ed2d 8b02 	vpush	{d8}
 800a6ee:	b08b      	sub	sp, #44	; 0x2c
 800a6f0:	ec55 4b10 	vmov	r4, r5, d0
 800a6f4:	f000 f8d4 	bl	800a8a0 <__ieee754_log10>
 800a6f8:	4b36      	ldr	r3, [pc, #216]	; (800a7d4 <log10+0xec>)
 800a6fa:	eeb0 8a40 	vmov.f32	s16, s0
 800a6fe:	eef0 8a60 	vmov.f32	s17, s1
 800a702:	f993 6000 	ldrsb.w	r6, [r3]
 800a706:	1c73      	adds	r3, r6, #1
 800a708:	d05c      	beq.n	800a7c4 <log10+0xdc>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	4620      	mov	r0, r4
 800a710:	4629      	mov	r1, r5
 800a712:	f7f6 fa0b 	bl	8000b2c <__aeabi_dcmpun>
 800a716:	4607      	mov	r7, r0
 800a718:	2800      	cmp	r0, #0
 800a71a:	d153      	bne.n	800a7c4 <log10+0xdc>
 800a71c:	2200      	movs	r2, #0
 800a71e:	2300      	movs	r3, #0
 800a720:	4620      	mov	r0, r4
 800a722:	4629      	mov	r1, r5
 800a724:	f7f6 f9e4 	bl	8000af0 <__aeabi_dcmple>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d04b      	beq.n	800a7c4 <log10+0xdc>
 800a72c:	4b2a      	ldr	r3, [pc, #168]	; (800a7d8 <log10+0xf0>)
 800a72e:	9301      	str	r3, [sp, #4]
 800a730:	9708      	str	r7, [sp, #32]
 800a732:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a736:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a73a:	b9a6      	cbnz	r6, 800a766 <log10+0x7e>
 800a73c:	4b27      	ldr	r3, [pc, #156]	; (800a7dc <log10+0xf4>)
 800a73e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a742:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a746:	4620      	mov	r0, r4
 800a748:	2200      	movs	r2, #0
 800a74a:	2300      	movs	r3, #0
 800a74c:	4629      	mov	r1, r5
 800a74e:	f7f6 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a752:	bb40      	cbnz	r0, 800a7a6 <log10+0xbe>
 800a754:	2301      	movs	r3, #1
 800a756:	2e02      	cmp	r6, #2
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	d119      	bne.n	800a790 <log10+0xa8>
 800a75c:	f7fc fa44 	bl	8006be8 <__errno>
 800a760:	2321      	movs	r3, #33	; 0x21
 800a762:	6003      	str	r3, [r0, #0]
 800a764:	e019      	b.n	800a79a <log10+0xb2>
 800a766:	4b1e      	ldr	r3, [pc, #120]	; (800a7e0 <log10+0xf8>)
 800a768:	2200      	movs	r2, #0
 800a76a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a76e:	4620      	mov	r0, r4
 800a770:	2200      	movs	r2, #0
 800a772:	2300      	movs	r3, #0
 800a774:	4629      	mov	r1, r5
 800a776:	f7f6 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d0ea      	beq.n	800a754 <log10+0x6c>
 800a77e:	2302      	movs	r3, #2
 800a780:	429e      	cmp	r6, r3
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	d111      	bne.n	800a7aa <log10+0xc2>
 800a786:	f7fc fa2f 	bl	8006be8 <__errno>
 800a78a:	2322      	movs	r3, #34	; 0x22
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	e011      	b.n	800a7b4 <log10+0xcc>
 800a790:	4668      	mov	r0, sp
 800a792:	f000 f9bf 	bl	800ab14 <matherr>
 800a796:	2800      	cmp	r0, #0
 800a798:	d0e0      	beq.n	800a75c <log10+0x74>
 800a79a:	4812      	ldr	r0, [pc, #72]	; (800a7e4 <log10+0xfc>)
 800a79c:	f000 f9bc 	bl	800ab18 <nan>
 800a7a0:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a7a4:	e006      	b.n	800a7b4 <log10+0xcc>
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4668      	mov	r0, sp
 800a7ac:	f000 f9b2 	bl	800ab14 <matherr>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d0e8      	beq.n	800a786 <log10+0x9e>
 800a7b4:	9b08      	ldr	r3, [sp, #32]
 800a7b6:	b11b      	cbz	r3, 800a7c0 <log10+0xd8>
 800a7b8:	f7fc fa16 	bl	8006be8 <__errno>
 800a7bc:	9b08      	ldr	r3, [sp, #32]
 800a7be:	6003      	str	r3, [r0, #0]
 800a7c0:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a7c4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7c8:	eef0 0a68 	vmov.f32	s1, s17
 800a7cc:	b00b      	add	sp, #44	; 0x2c
 800a7ce:	ecbd 8b02 	vpop	{d8}
 800a7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d4:	20001180 	.word	0x20001180
 800a7d8:	0800b3c6 	.word	0x0800b3c6
 800a7dc:	c7efffff 	.word	0xc7efffff
 800a7e0:	fff00000 	.word	0xfff00000
 800a7e4:	0800b2b9 	.word	0x0800b2b9

0800a7e8 <sqrt>:
 800a7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	ed2d 8b02 	vpush	{d8}
 800a7f0:	b08b      	sub	sp, #44	; 0x2c
 800a7f2:	ec55 4b10 	vmov	r4, r5, d0
 800a7f6:	f000 f8dd 	bl	800a9b4 <__ieee754_sqrt>
 800a7fa:	4b26      	ldr	r3, [pc, #152]	; (800a894 <sqrt+0xac>)
 800a7fc:	eeb0 8a40 	vmov.f32	s16, s0
 800a800:	eef0 8a60 	vmov.f32	s17, s1
 800a804:	f993 6000 	ldrsb.w	r6, [r3]
 800a808:	1c73      	adds	r3, r6, #1
 800a80a:	d02a      	beq.n	800a862 <sqrt+0x7a>
 800a80c:	4622      	mov	r2, r4
 800a80e:	462b      	mov	r3, r5
 800a810:	4620      	mov	r0, r4
 800a812:	4629      	mov	r1, r5
 800a814:	f7f6 f98a 	bl	8000b2c <__aeabi_dcmpun>
 800a818:	4607      	mov	r7, r0
 800a81a:	bb10      	cbnz	r0, 800a862 <sqrt+0x7a>
 800a81c:	f04f 0800 	mov.w	r8, #0
 800a820:	f04f 0900 	mov.w	r9, #0
 800a824:	4642      	mov	r2, r8
 800a826:	464b      	mov	r3, r9
 800a828:	4620      	mov	r0, r4
 800a82a:	4629      	mov	r1, r5
 800a82c:	f7f6 f956 	bl	8000adc <__aeabi_dcmplt>
 800a830:	b1b8      	cbz	r0, 800a862 <sqrt+0x7a>
 800a832:	2301      	movs	r3, #1
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4b18      	ldr	r3, [pc, #96]	; (800a898 <sqrt+0xb0>)
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	9708      	str	r7, [sp, #32]
 800a83c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a840:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a844:	b9b6      	cbnz	r6, 800a874 <sqrt+0x8c>
 800a846:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a84a:	4668      	mov	r0, sp
 800a84c:	f000 f962 	bl	800ab14 <matherr>
 800a850:	b1d0      	cbz	r0, 800a888 <sqrt+0xa0>
 800a852:	9b08      	ldr	r3, [sp, #32]
 800a854:	b11b      	cbz	r3, 800a85e <sqrt+0x76>
 800a856:	f7fc f9c7 	bl	8006be8 <__errno>
 800a85a:	9b08      	ldr	r3, [sp, #32]
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a862:	eeb0 0a48 	vmov.f32	s0, s16
 800a866:	eef0 0a68 	vmov.f32	s1, s17
 800a86a:	b00b      	add	sp, #44	; 0x2c
 800a86c:	ecbd 8b02 	vpop	{d8}
 800a870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a874:	4642      	mov	r2, r8
 800a876:	464b      	mov	r3, r9
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f5 ffe6 	bl	800084c <__aeabi_ddiv>
 800a880:	2e02      	cmp	r6, #2
 800a882:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a886:	d1e0      	bne.n	800a84a <sqrt+0x62>
 800a888:	f7fc f9ae 	bl	8006be8 <__errno>
 800a88c:	2321      	movs	r3, #33	; 0x21
 800a88e:	6003      	str	r3, [r0, #0]
 800a890:	e7df      	b.n	800a852 <sqrt+0x6a>
 800a892:	bf00      	nop
 800a894:	20001180 	.word	0x20001180
 800a898:	0800b3cc 	.word	0x0800b3cc
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <__ieee754_log10>:
 800a8a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	ec55 4b10 	vmov	r4, r5, d0
 800a8a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	da2f      	bge.n	800a910 <__ieee754_log10+0x70>
 800a8b0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800a8b4:	4322      	orrs	r2, r4
 800a8b6:	d10a      	bne.n	800a8ce <__ieee754_log10+0x2e>
 800a8b8:	493b      	ldr	r1, [pc, #236]	; (800a9a8 <__ieee754_log10+0x108>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2300      	movs	r3, #0
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7f5 ffc4 	bl	800084c <__aeabi_ddiv>
 800a8c4:	ec41 0b10 	vmov	d0, r0, r1
 800a8c8:	b003      	add	sp, #12
 800a8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	da08      	bge.n	800a8e4 <__ieee754_log10+0x44>
 800a8d2:	ee10 2a10 	vmov	r2, s0
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7f5 fcd5 	bl	8000288 <__aeabi_dsub>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e7ed      	b.n	800a8c0 <__ieee754_log10+0x20>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4b31      	ldr	r3, [pc, #196]	; (800a9ac <__ieee754_log10+0x10c>)
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	ee10 0a10 	vmov	r0, s0
 800a8ee:	f7f5 fe83 	bl	80005f8 <__aeabi_dmul>
 800a8f2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	492c      	ldr	r1, [pc, #176]	; (800a9b0 <__ieee754_log10+0x110>)
 800a8fe:	428b      	cmp	r3, r1
 800a900:	dd08      	ble.n	800a914 <__ieee754_log10+0x74>
 800a902:	4622      	mov	r2, r4
 800a904:	462b      	mov	r3, r5
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 fcbf 	bl	800028c <__adddf3>
 800a90e:	e7d9      	b.n	800a8c4 <__ieee754_log10+0x24>
 800a910:	2200      	movs	r2, #0
 800a912:	e7f3      	b.n	800a8fc <__ieee754_log10+0x5c>
 800a914:	1518      	asrs	r0, r3, #20
 800a916:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800a91a:	4410      	add	r0, r2
 800a91c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800a920:	4448      	add	r0, r9
 800a922:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800a926:	f7f5 fdfd 	bl	8000524 <__aeabi_i2d>
 800a92a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800a92e:	3303      	adds	r3, #3
 800a930:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800a934:	ec45 4b10 	vmov	d0, r4, r5
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	f000 f8f4 	bl	800ab28 <__ieee754_log>
 800a940:	a313      	add	r3, pc, #76	; (adr r3, 800a990 <__ieee754_log10+0xf0>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	4630      	mov	r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	ed8d 0b00 	vstr	d0, [sp]
 800a94e:	f7f5 fe53 	bl	80005f8 <__aeabi_dmul>
 800a952:	ed9d 0b00 	vldr	d0, [sp]
 800a956:	4604      	mov	r4, r0
 800a958:	460d      	mov	r5, r1
 800a95a:	a30f      	add	r3, pc, #60	; (adr r3, 800a998 <__ieee754_log10+0xf8>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	ec51 0b10 	vmov	r0, r1, d0
 800a964:	f7f5 fe48 	bl	80005f8 <__aeabi_dmul>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	4620      	mov	r0, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	f7f5 fc8c 	bl	800028c <__adddf3>
 800a974:	a30a      	add	r3, pc, #40	; (adr r3, 800a9a0 <__ieee754_log10+0x100>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	4630      	mov	r0, r6
 800a980:	4639      	mov	r1, r7
 800a982:	f7f5 fe39 	bl	80005f8 <__aeabi_dmul>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	e7bc      	b.n	800a90a <__ieee754_log10+0x6a>
 800a990:	11f12b36 	.word	0x11f12b36
 800a994:	3d59fef3 	.word	0x3d59fef3
 800a998:	1526e50e 	.word	0x1526e50e
 800a99c:	3fdbcb7b 	.word	0x3fdbcb7b
 800a9a0:	509f6000 	.word	0x509f6000
 800a9a4:	3fd34413 	.word	0x3fd34413
 800a9a8:	c3500000 	.word	0xc3500000
 800a9ac:	43500000 	.word	0x43500000
 800a9b0:	7fefffff 	.word	0x7fefffff

0800a9b4 <__ieee754_sqrt>:
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	4955      	ldr	r1, [pc, #340]	; (800ab10 <__ieee754_sqrt+0x15c>)
 800a9ba:	ec55 4b10 	vmov	r4, r5, d0
 800a9be:	43a9      	bics	r1, r5
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	d112      	bne.n	800a9ec <__ieee754_sqrt+0x38>
 800a9c6:	ee10 2a10 	vmov	r2, s0
 800a9ca:	ee10 0a10 	vmov	r0, s0
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f7f5 fe12 	bl	80005f8 <__aeabi_dmul>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4620      	mov	r0, r4
 800a9da:	4629      	mov	r1, r5
 800a9dc:	f7f5 fc56 	bl	800028c <__adddf3>
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	460d      	mov	r5, r1
 800a9e4:	ec45 4b10 	vmov	d0, r4, r5
 800a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	ee10 0a10 	vmov	r0, s0
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	dc0f      	bgt.n	800aa16 <__ieee754_sqrt+0x62>
 800a9f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a9fa:	4330      	orrs	r0, r6
 800a9fc:	d0f2      	beq.n	800a9e4 <__ieee754_sqrt+0x30>
 800a9fe:	b155      	cbz	r5, 800aa16 <__ieee754_sqrt+0x62>
 800aa00:	ee10 2a10 	vmov	r2, s0
 800aa04:	4620      	mov	r0, r4
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7f5 fc3e 	bl	8000288 <__aeabi_dsub>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	f7f5 ff1c 	bl	800084c <__aeabi_ddiv>
 800aa14:	e7e4      	b.n	800a9e0 <__ieee754_sqrt+0x2c>
 800aa16:	151b      	asrs	r3, r3, #20
 800aa18:	d073      	beq.n	800ab02 <__ieee754_sqrt+0x14e>
 800aa1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa1e:	07dd      	lsls	r5, r3, #31
 800aa20:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aa24:	bf48      	it	mi
 800aa26:	0fc8      	lsrmi	r0, r1, #31
 800aa28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa2c:	bf44      	itt	mi
 800aa2e:	0049      	lslmi	r1, r1, #1
 800aa30:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800aa34:	2500      	movs	r5, #0
 800aa36:	1058      	asrs	r0, r3, #1
 800aa38:	0fcb      	lsrs	r3, r1, #31
 800aa3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800aa3e:	0049      	lsls	r1, r1, #1
 800aa40:	2316      	movs	r3, #22
 800aa42:	462c      	mov	r4, r5
 800aa44:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800aa48:	19a7      	adds	r7, r4, r6
 800aa4a:	4297      	cmp	r7, r2
 800aa4c:	bfde      	ittt	le
 800aa4e:	19bc      	addle	r4, r7, r6
 800aa50:	1bd2      	suble	r2, r2, r7
 800aa52:	19ad      	addle	r5, r5, r6
 800aa54:	0fcf      	lsrs	r7, r1, #31
 800aa56:	3b01      	subs	r3, #1
 800aa58:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800aa5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa64:	d1f0      	bne.n	800aa48 <__ieee754_sqrt+0x94>
 800aa66:	f04f 0c20 	mov.w	ip, #32
 800aa6a:	469e      	mov	lr, r3
 800aa6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa70:	42a2      	cmp	r2, r4
 800aa72:	eb06 070e 	add.w	r7, r6, lr
 800aa76:	dc02      	bgt.n	800aa7e <__ieee754_sqrt+0xca>
 800aa78:	d112      	bne.n	800aaa0 <__ieee754_sqrt+0xec>
 800aa7a:	428f      	cmp	r7, r1
 800aa7c:	d810      	bhi.n	800aaa0 <__ieee754_sqrt+0xec>
 800aa7e:	2f00      	cmp	r7, #0
 800aa80:	eb07 0e06 	add.w	lr, r7, r6
 800aa84:	da42      	bge.n	800ab0c <__ieee754_sqrt+0x158>
 800aa86:	f1be 0f00 	cmp.w	lr, #0
 800aa8a:	db3f      	blt.n	800ab0c <__ieee754_sqrt+0x158>
 800aa8c:	f104 0801 	add.w	r8, r4, #1
 800aa90:	1b12      	subs	r2, r2, r4
 800aa92:	428f      	cmp	r7, r1
 800aa94:	bf88      	it	hi
 800aa96:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aa9a:	1bc9      	subs	r1, r1, r7
 800aa9c:	4433      	add	r3, r6
 800aa9e:	4644      	mov	r4, r8
 800aaa0:	0052      	lsls	r2, r2, #1
 800aaa2:	f1bc 0c01 	subs.w	ip, ip, #1
 800aaa6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800aaaa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aaae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aab2:	d1dd      	bne.n	800aa70 <__ieee754_sqrt+0xbc>
 800aab4:	430a      	orrs	r2, r1
 800aab6:	d006      	beq.n	800aac6 <__ieee754_sqrt+0x112>
 800aab8:	1c5c      	adds	r4, r3, #1
 800aaba:	bf13      	iteet	ne
 800aabc:	3301      	addne	r3, #1
 800aabe:	3501      	addeq	r5, #1
 800aac0:	4663      	moveq	r3, ip
 800aac2:	f023 0301 	bicne.w	r3, r3, #1
 800aac6:	106a      	asrs	r2, r5, #1
 800aac8:	085b      	lsrs	r3, r3, #1
 800aaca:	07e9      	lsls	r1, r5, #31
 800aacc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aad0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aad4:	bf48      	it	mi
 800aad6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aada:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800aade:	461c      	mov	r4, r3
 800aae0:	e780      	b.n	800a9e4 <__ieee754_sqrt+0x30>
 800aae2:	0aca      	lsrs	r2, r1, #11
 800aae4:	3815      	subs	r0, #21
 800aae6:	0549      	lsls	r1, r1, #21
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	d0fa      	beq.n	800aae2 <__ieee754_sqrt+0x12e>
 800aaec:	02d6      	lsls	r6, r2, #11
 800aaee:	d50a      	bpl.n	800ab06 <__ieee754_sqrt+0x152>
 800aaf0:	f1c3 0420 	rsb	r4, r3, #32
 800aaf4:	fa21 f404 	lsr.w	r4, r1, r4
 800aaf8:	1e5d      	subs	r5, r3, #1
 800aafa:	4099      	lsls	r1, r3
 800aafc:	4322      	orrs	r2, r4
 800aafe:	1b43      	subs	r3, r0, r5
 800ab00:	e78b      	b.n	800aa1a <__ieee754_sqrt+0x66>
 800ab02:	4618      	mov	r0, r3
 800ab04:	e7f0      	b.n	800aae8 <__ieee754_sqrt+0x134>
 800ab06:	0052      	lsls	r2, r2, #1
 800ab08:	3301      	adds	r3, #1
 800ab0a:	e7ef      	b.n	800aaec <__ieee754_sqrt+0x138>
 800ab0c:	46a0      	mov	r8, r4
 800ab0e:	e7bf      	b.n	800aa90 <__ieee754_sqrt+0xdc>
 800ab10:	7ff00000 	.word	0x7ff00000

0800ab14 <matherr>:
 800ab14:	2000      	movs	r0, #0
 800ab16:	4770      	bx	lr

0800ab18 <nan>:
 800ab18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab20 <nan+0x8>
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	00000000 	.word	0x00000000
 800ab24:	7ff80000 	.word	0x7ff80000

0800ab28 <__ieee754_log>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ec51 0b10 	vmov	r0, r1, d0
 800ab30:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ab34:	b087      	sub	sp, #28
 800ab36:	460d      	mov	r5, r1
 800ab38:	da27      	bge.n	800ab8a <__ieee754_log+0x62>
 800ab3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab3e:	4303      	orrs	r3, r0
 800ab40:	ee10 2a10 	vmov	r2, s0
 800ab44:	d10a      	bne.n	800ab5c <__ieee754_log+0x34>
 800ab46:	49cc      	ldr	r1, [pc, #816]	; (800ae78 <__ieee754_log+0x350>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	f7f5 fe7d 	bl	800084c <__aeabi_ddiv>
 800ab52:	ec41 0b10 	vmov	d0, r0, r1
 800ab56:	b007      	add	sp, #28
 800ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	da05      	bge.n	800ab6c <__ieee754_log+0x44>
 800ab60:	460b      	mov	r3, r1
 800ab62:	f7f5 fb91 	bl	8000288 <__aeabi_dsub>
 800ab66:	2200      	movs	r2, #0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e7f0      	b.n	800ab4e <__ieee754_log+0x26>
 800ab6c:	4bc3      	ldr	r3, [pc, #780]	; (800ae7c <__ieee754_log+0x354>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f7f5 fd42 	bl	80005f8 <__aeabi_dmul>
 800ab74:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ab78:	460d      	mov	r5, r1
 800ab7a:	4ac1      	ldr	r2, [pc, #772]	; (800ae80 <__ieee754_log+0x358>)
 800ab7c:	4295      	cmp	r5, r2
 800ab7e:	dd06      	ble.n	800ab8e <__ieee754_log+0x66>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	f7f5 fb82 	bl	800028c <__adddf3>
 800ab88:	e7e3      	b.n	800ab52 <__ieee754_log+0x2a>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e7f5      	b.n	800ab7a <__ieee754_log+0x52>
 800ab8e:	152c      	asrs	r4, r5, #20
 800ab90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ab94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ab98:	441c      	add	r4, r3
 800ab9a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ab9e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800aba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aba6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800abaa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800abae:	ea42 0105 	orr.w	r1, r2, r5
 800abb2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800abb6:	2200      	movs	r2, #0
 800abb8:	4bb2      	ldr	r3, [pc, #712]	; (800ae84 <__ieee754_log+0x35c>)
 800abba:	f7f5 fb65 	bl	8000288 <__aeabi_dsub>
 800abbe:	1cab      	adds	r3, r5, #2
 800abc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	4682      	mov	sl, r0
 800abc8:	468b      	mov	fp, r1
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	dc53      	bgt.n	800ac78 <__ieee754_log+0x150>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f7f5 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 800abd6:	b1d0      	cbz	r0, 800ac0e <__ieee754_log+0xe6>
 800abd8:	2c00      	cmp	r4, #0
 800abda:	f000 8120 	beq.w	800ae1e <__ieee754_log+0x2f6>
 800abde:	4620      	mov	r0, r4
 800abe0:	f7f5 fca0 	bl	8000524 <__aeabi_i2d>
 800abe4:	a390      	add	r3, pc, #576	; (adr r3, 800ae28 <__ieee754_log+0x300>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	f7f5 fd03 	bl	80005f8 <__aeabi_dmul>
 800abf2:	a38f      	add	r3, pc, #572	; (adr r3, 800ae30 <__ieee754_log+0x308>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	4630      	mov	r0, r6
 800abfe:	4639      	mov	r1, r7
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	e7ba      	b.n	800ab84 <__ieee754_log+0x5c>
 800ac0e:	a38a      	add	r3, pc, #552	; (adr r3, 800ae38 <__ieee754_log+0x310>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	4650      	mov	r0, sl
 800ac16:	4659      	mov	r1, fp
 800ac18:	f7f5 fcee 	bl	80005f8 <__aeabi_dmul>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	2000      	movs	r0, #0
 800ac22:	4999      	ldr	r1, [pc, #612]	; (800ae88 <__ieee754_log+0x360>)
 800ac24:	f7f5 fb30 	bl	8000288 <__aeabi_dsub>
 800ac28:	4652      	mov	r2, sl
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	465b      	mov	r3, fp
 800ac30:	4650      	mov	r0, sl
 800ac32:	4659      	mov	r1, fp
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	4639      	mov	r1, r7
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	4606      	mov	r6, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	b914      	cbnz	r4, 800ac50 <__ieee754_log+0x128>
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	e0a0      	b.n	800ad92 <__ieee754_log+0x26a>
 800ac50:	4620      	mov	r0, r4
 800ac52:	f7f5 fc67 	bl	8000524 <__aeabi_i2d>
 800ac56:	a374      	add	r3, pc, #464	; (adr r3, 800ae28 <__ieee754_log+0x300>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	4680      	mov	r8, r0
 800ac5e:	4689      	mov	r9, r1
 800ac60:	f7f5 fcca 	bl	80005f8 <__aeabi_dmul>
 800ac64:	a372      	add	r3, pc, #456	; (adr r3, 800ae30 <__ieee754_log+0x308>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	f7f5 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ac76:	e0a5      	b.n	800adc4 <__ieee754_log+0x29c>
 800ac78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac7c:	f7f5 fb06 	bl	800028c <__adddf3>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4650      	mov	r0, sl
 800ac86:	4659      	mov	r1, fp
 800ac88:	f7f5 fde0 	bl	800084c <__aeabi_ddiv>
 800ac8c:	e9cd 0100 	strd	r0, r1, [sp]
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7f5 fc47 	bl	8000524 <__aeabi_i2d>
 800ac96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	f7f5 fca9 	bl	80005f8 <__aeabi_dmul>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acae:	f7f5 fca3 	bl	80005f8 <__aeabi_dmul>
 800acb2:	a363      	add	r3, pc, #396	; (adr r3, 800ae40 <__ieee754_log+0x318>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	4680      	mov	r8, r0
 800acba:	4689      	mov	r9, r1
 800acbc:	f7f5 fc9c 	bl	80005f8 <__aeabi_dmul>
 800acc0:	a361      	add	r3, pc, #388	; (adr r3, 800ae48 <__ieee754_log+0x320>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fae1 	bl	800028c <__adddf3>
 800acca:	4642      	mov	r2, r8
 800accc:	464b      	mov	r3, r9
 800acce:	f7f5 fc93 	bl	80005f8 <__aeabi_dmul>
 800acd2:	a35f      	add	r3, pc, #380	; (adr r3, 800ae50 <__ieee754_log+0x328>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f7f5 fad8 	bl	800028c <__adddf3>
 800acdc:	4642      	mov	r2, r8
 800acde:	464b      	mov	r3, r9
 800ace0:	f7f5 fc8a 	bl	80005f8 <__aeabi_dmul>
 800ace4:	a35c      	add	r3, pc, #368	; (adr r3, 800ae58 <__ieee754_log+0x330>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	f7f5 facf 	bl	800028c <__adddf3>
 800acee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acf2:	f7f5 fc81 	bl	80005f8 <__aeabi_dmul>
 800acf6:	a35a      	add	r3, pc, #360	; (adr r3, 800ae60 <__ieee754_log+0x338>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	f7f5 fc78 	bl	80005f8 <__aeabi_dmul>
 800ad08:	a357      	add	r3, pc, #348	; (adr r3, 800ae68 <__ieee754_log+0x340>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f7f5 fabd 	bl	800028c <__adddf3>
 800ad12:	4642      	mov	r2, r8
 800ad14:	464b      	mov	r3, r9
 800ad16:	f7f5 fc6f 	bl	80005f8 <__aeabi_dmul>
 800ad1a:	a355      	add	r3, pc, #340	; (adr r3, 800ae70 <__ieee754_log+0x348>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fab4 	bl	800028c <__adddf3>
 800ad24:	4642      	mov	r2, r8
 800ad26:	464b      	mov	r3, r9
 800ad28:	f7f5 fc66 	bl	80005f8 <__aeabi_dmul>
 800ad2c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ad38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad3c:	f7f5 faa6 	bl	800028c <__adddf3>
 800ad40:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800ad44:	3551      	adds	r5, #81	; 0x51
 800ad46:	4335      	orrs	r5, r6
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	4689      	mov	r9, r1
 800ad4e:	dd48      	ble.n	800ade2 <__ieee754_log+0x2ba>
 800ad50:	2200      	movs	r2, #0
 800ad52:	4b4d      	ldr	r3, [pc, #308]	; (800ae88 <__ieee754_log+0x360>)
 800ad54:	4650      	mov	r0, sl
 800ad56:	4659      	mov	r1, fp
 800ad58:	f7f5 fc4e 	bl	80005f8 <__aeabi_dmul>
 800ad5c:	4652      	mov	r2, sl
 800ad5e:	465b      	mov	r3, fp
 800ad60:	f7f5 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4606      	mov	r6, r0
 800ad6a:	460f      	mov	r7, r1
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7f5 fa8c 	bl	800028c <__adddf3>
 800ad74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad78:	f7f5 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ad7c:	4680      	mov	r8, r0
 800ad7e:	4689      	mov	r9, r1
 800ad80:	b964      	cbnz	r4, 800ad9c <__ieee754_log+0x274>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 fa7d 	bl	8000288 <__aeabi_dsub>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4650      	mov	r0, sl
 800ad94:	4659      	mov	r1, fp
 800ad96:	f7f5 fa77 	bl	8000288 <__aeabi_dsub>
 800ad9a:	e6da      	b.n	800ab52 <__ieee754_log+0x2a>
 800ad9c:	a322      	add	r3, pc, #136	; (adr r3, 800ae28 <__ieee754_log+0x300>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada6:	f7f5 fc27 	bl	80005f8 <__aeabi_dmul>
 800adaa:	a321      	add	r3, pc, #132	; (adr r3, 800ae30 <__ieee754_log+0x308>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	4604      	mov	r4, r0
 800adb2:	460d      	mov	r5, r1
 800adb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb8:	f7f5 fc1e 	bl	80005f8 <__aeabi_dmul>
 800adbc:	4642      	mov	r2, r8
 800adbe:	464b      	mov	r3, r9
 800adc0:	f7f5 fa64 	bl	800028c <__adddf3>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fa5c 	bl	8000288 <__aeabi_dsub>
 800add0:	4652      	mov	r2, sl
 800add2:	465b      	mov	r3, fp
 800add4:	f7f5 fa58 	bl	8000288 <__aeabi_dsub>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	e7d9      	b.n	800ad96 <__ieee754_log+0x26e>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4650      	mov	r0, sl
 800ade8:	4659      	mov	r1, fp
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adf2:	f7f5 fc01 	bl	80005f8 <__aeabi_dmul>
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	f43f af25 	beq.w	800ac4a <__ieee754_log+0x122>
 800ae00:	a309      	add	r3, pc, #36	; (adr r3, 800ae28 <__ieee754_log+0x300>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae0a:	f7f5 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ae0e:	a308      	add	r3, pc, #32	; (adr r3, 800ae30 <__ieee754_log+0x308>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae1c:	e729      	b.n	800ac72 <__ieee754_log+0x14a>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	2100      	movs	r1, #0
 800ae22:	e696      	b.n	800ab52 <__ieee754_log+0x2a>
 800ae24:	f3af 8000 	nop.w
 800ae28:	fee00000 	.word	0xfee00000
 800ae2c:	3fe62e42 	.word	0x3fe62e42
 800ae30:	35793c76 	.word	0x35793c76
 800ae34:	3dea39ef 	.word	0x3dea39ef
 800ae38:	55555555 	.word	0x55555555
 800ae3c:	3fd55555 	.word	0x3fd55555
 800ae40:	df3e5244 	.word	0xdf3e5244
 800ae44:	3fc2f112 	.word	0x3fc2f112
 800ae48:	96cb03de 	.word	0x96cb03de
 800ae4c:	3fc74664 	.word	0x3fc74664
 800ae50:	94229359 	.word	0x94229359
 800ae54:	3fd24924 	.word	0x3fd24924
 800ae58:	55555593 	.word	0x55555593
 800ae5c:	3fe55555 	.word	0x3fe55555
 800ae60:	d078c69f 	.word	0xd078c69f
 800ae64:	3fc39a09 	.word	0x3fc39a09
 800ae68:	1d8e78af 	.word	0x1d8e78af
 800ae6c:	3fcc71c5 	.word	0x3fcc71c5
 800ae70:	9997fa04 	.word	0x9997fa04
 800ae74:	3fd99999 	.word	0x3fd99999
 800ae78:	c3500000 	.word	0xc3500000
 800ae7c:	43500000 	.word	0x43500000
 800ae80:	7fefffff 	.word	0x7fefffff
 800ae84:	3ff00000 	.word	0x3ff00000
 800ae88:	3fe00000 	.word	0x3fe00000

0800ae8c <_init>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	bf00      	nop
 800ae90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae92:	bc08      	pop	{r3}
 800ae94:	469e      	mov	lr, r3
 800ae96:	4770      	bx	lr

0800ae98 <_fini>:
 800ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9a:	bf00      	nop
 800ae9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9e:	bc08      	pop	{r3}
 800aea0:	469e      	mov	lr, r3
 800aea2:	4770      	bx	lr
