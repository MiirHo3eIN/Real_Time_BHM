
pca_prediction_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008004  08008478  08008478  00018478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801047c  0801047c  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801047c  0801047c  0002047c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010484  08010484  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010484  08010484  00020484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010488  08010488  00020488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801048c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009fe8  200001e8  08010674  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a1d0  08010674  0003a1d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a94e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035d0  00000000  00000000  0004ab66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0004e138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0004ec58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002904b  00000000  00000000  0004f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f359  00000000  00000000  0007860b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb2c1  00000000  00000000  00087964  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172c25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  00172ca0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008460 	.word	0x08008460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008460 	.word	0x08008460

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <arm_fill_f32>:
#else
void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f92:	60b8      	str	r0, [r7, #8]
 8000f94:	6079      	str	r1, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000f9a:	e007      	b.n	8000fac <arm_fill_f32+0x24>
  {
    /* C = value */

    /* Fill value in destination buffer */
    *pDst++ = value;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1d1a      	adds	r2, r3, #4
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f4      	bne.n	8000f9c <arm_fill_f32+0x14>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	817b      	strh	r3, [r7, #10]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	897a      	ldrh	r2, [r7, #10]
 8000fd4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	893a      	ldrh	r2, [r7, #8]
 8000fda:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	605a      	str	r2, [r3, #4]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <arm_mat_mult_f32>:
#else
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b093      	sub	sp, #76	; 0x4c
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	885b      	ldrh	r3, [r3, #2]
 8001022:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	885b      	ldrh	r3, [r3, #2]
 8001028:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102e:	8b7b      	ldrh	r3, [r7, #26]
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8001032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	4413      	add	r3, r2
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800103c:	8b3b      	ldrh	r3, [r7, #24]
 800103e:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104e:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8001050:	8afb      	ldrh	r3, [r7, #22]
 8001052:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8001054:	e017      	b.n	8001086 <arm_mat_mult_f32+0x98>
        {
          /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8001056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001058:	1d1a      	adds	r2, r3, #4
 800105a:	647a      	str	r2, [r7, #68]	; 0x44
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8001076:	8b3b      	ldrh	r3, [r7, #24]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800107c:	4413      	add	r3, r2
 800107e:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	3b01      	subs	r3, #1
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e4      	bne.n	8001056 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	63ba      	str	r2, [r7, #56]	; 0x38
 8001092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001094:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8001096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001098:	3b01      	subs	r3, #1
 800109a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800109c:	8b3a      	ldrh	r2, [r7, #24]
 800109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	6a3a      	ldr	r2, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80010aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ca      	bne.n	8001046 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80010b0:	8b3b      	ldrh	r3, [r7, #24]
 80010b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b4:	4413      	add	r3, r2
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010be:	4413      	add	r3, r2
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	3b01      	subs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1b1      	bne.n	8001032 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80010ce:	2300      	movs	r3, #0
 80010d0:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80010d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	374c      	adds	r7, #76	; 0x4c
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b08b      	sub	sp, #44	; 0x2c
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80010ee:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	885b      	ldrh	r3, [r3, #2]
 8001106:	fb03 f302 	mul.w	r3, r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8001110:	e010      	b.n	8001134 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	1d1a      	adds	r2, r3, #4
 8001116:	627a      	str	r2, [r7, #36]	; 0x24
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	1d1a      	adds	r2, r3, #4
 8001120:	623a      	str	r2, [r7, #32]
 8001122:	edd7 7a02 	vldr	s15, [r7, #8]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b01      	subs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1eb      	bne.n	8001112 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800113e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001142:	4618      	mov	r0, r3
 8001144:	372c      	adds	r7, #44	; 0x2c
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800114e:	b480      	push	{r7}
 8001150:	b08b      	sub	sp, #44	; 0x2c
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	885b      	ldrh	r3, [r3, #2]
 8001176:	fb03 f302 	mul.w	r3, r3, r2
 800117a:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8001180:	e013      	b.n	80011aa <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	1d1a      	adds	r2, r3, #4
 8001186:	627a      	str	r2, [r7, #36]	; 0x24
 8001188:	ed93 7a00 	vldr	s14, [r3]
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	1d1a      	adds	r2, r3, #4
 8001190:	623a      	str	r2, [r7, #32]
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	1d1a      	adds	r2, r3, #4
 800119a:	61fa      	str	r2, [r7, #28]
 800119c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e8      	bne.n	8001182 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80011b0:	2300      	movs	r3, #0
 80011b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80011b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	372c      	adds	r7, #44	; 0x2c
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b08b      	sub	sp, #44	; 0x2c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	885b      	ldrh	r3, [r3, #2]
 80011e4:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80011f8:	89bb      	ldrh	r3, [r7, #12]
 80011fa:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80011fc:	e00d      	b.n	800121a <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	1d1a      	adds	r2, r3, #4
 8001202:	627a      	str	r2, [r7, #36]	; 0x24
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	4413      	add	r3, r2
 8001212:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	3b01      	subs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ee      	bne.n	80011fe <arm_mat_trans_f32+0x3a>
      }

      i++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	3b01      	subs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1dd      	bne.n	80011ee <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8001232:	2300      	movs	r3, #0
 8001234:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8001236:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800123a:	4618      	mov	r0, r3
 800123c:	372c      	adds	r7, #44	; 0x2c
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800125c:	e00d      	b.n	800127a <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1d1a      	adds	r2, r3, #4
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ed97 7a04 	vldr	s14, [r7, #16]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3b01      	subs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ee      	bne.n	800125e <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800128a:	edd7 6a04 	vldr	s13, [r7, #16]
 800128e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edc3 7a00 	vstr	s15, [r3]
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <arm_power_f32>:
#else
void arm_power_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80012ba:	e013      	b.n	80012e4 <arm_power_f32+0x40>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    /* Compute Power and store result in a temporary variable, sum. */
    in = *pSrc++;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	60fa      	str	r2, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80012c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Decrement loop counter */
    blkCnt--;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1e8      	bne.n	80012bc <arm_power_f32+0x18>
  }

  /* Store result to destination */
  *pResult = sum;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3724      	adds	r7, #36	; 0x24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <arm_std_f32>:
#else
void arm_std_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
        float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
        float32_t squareOfSum;                         /* Square of Sum */
        float32_t var;                                 /* Temporary varaince storage */
#endif

  if (blockSize <= 1U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d804      	bhi.n	8001324 <arm_std_f32+0x28>
  {
    *pResult = 0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    return;
 8001322:	e074      	b.n	800140e <arm_std_f32+0x112>
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001328:	e01b      	b.n	8001362 <arm_std_f32+0x66>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */
    /* C = A[0] + A[1] + ... + A[blockSize-1] */

    in = *pSrc++;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1d1a      	adds	r2, r3, #4
 800132e:	60fa      	str	r2, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable, sumOfSquares. */
    sumOfSquares += ( in * in);
 8001334:	ed97 7a07 	vldr	s14, [r7, #28]
 8001338:	edd7 7a07 	vldr	s15, [r7, #28]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001348:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    /* Compute sum and store result in a temporary variable, sum. */
    sum += in;
 800134c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001350:	edd7 7a07 	vldr	s15, [r7, #28]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Decrement loop counter */
    blkCnt--;
 800135c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135e:	3b01      	subs	r3, #1
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8001362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e0      	bne.n	800132a <arm_std_f32+0x2e>
  }

#ifndef ARM_MATH_CM0_FAMILY

  /* Compute Mean of squares and store result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001376:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800137a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800137e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001382:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001390:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001398:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800139c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 80013c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute standard deviation and store result to destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 80013d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80013d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013dc:	edc7 7a06 	vstr	s15, [r7, #24]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80013e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	db09      	blt.n	8001406 <arm_std_f32+0x10a>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80013f2:	ed97 0a06 	vldr	s0, [r7, #24]
 80013f6:	f006 ffdd 	bl	80083b4 <sqrtf>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	edc3 7a00 	vstr	s15, [r3]
 8001404:	e003      	b.n	800140e <arm_std_f32+0x112>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
  /* Compute standard deviation and store result in destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800140e:	3738      	adds	r7, #56	; 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_GPIO_Init+0x2c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <MX_GPIO_Init+0x2c>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_GPIO_Init+0x2c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fc8d 	bl	8001d66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f85a 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f7ff ffe0 	bl	8001414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001454:	f000 fbe4 	bl	8001c20 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_UART_Receive_IT(&huart2, myRxdata, acc_len);
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <main+0x94>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	491f      	ldr	r1, [pc, #124]	; (80014dc <main+0x98>)
 8001460:	481f      	ldr	r0, [pc, #124]	; (80014e0 <main+0x9c>)
 8001462:	f002 fb3b 	bl	8003adc <HAL_UART_Receive_IT>
	  if (window == FULL)
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <main+0xa0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d1f4      	bne.n	8001458 <main+0x14>
	  {
		  mse = pca(buff_in, buff_reconst); 		/* Perform PCA when window is full */
 800146e:	491e      	ldr	r1, [pc, #120]	; (80014e8 <main+0xa4>)
 8001470:	481e      	ldr	r0, [pc, #120]	; (80014ec <main+0xa8>)
 8001472:	f000 fad1 	bl	8001a18 <pca>
 8001476:	eef0 7a40 	vmov.f32	s15, s0
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <main+0xac>)
 800147c:	edc3 7a00 	vstr	s15, [r3]
		  buff_mse[j] = mse;						/* keep MSE values for period of 15 minutes */
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <main+0xb0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <main+0xac>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <main+0xb4>)
 800148c:	0083      	lsls	r3, r0, #2
 800148e:	440b      	add	r3, r1
 8001490:	601a      	str	r2, [r3, #0]
		  window = NFULL;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <main+0xa0>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
		  j++;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <main+0xb0>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <main+0xb0>)
 80014a2:	801a      	strh	r2, [r3, #0]
		  i = 0;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <main+0xb8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]
		  if (mse != 0) valid_window_count ++;		/* keep track of number of valid windows 	*/
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <main+0xac>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d005      	beq.n	80014c6 <main+0x82>
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <main+0xbc>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <main+0xbc>)
 80014c4:	801a      	strh	r2, [r3, #0]
		  if (j == BUFF_OUTPUT_LEN) j = 0 ;			/* reset at the end of 15 minutes			*/
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <main+0xb0>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	2bb4      	cmp	r3, #180	; 0xb4
 80014cc:	d1c4      	bne.n	8001458 <main+0x14>
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <main+0xb0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	801a      	strh	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart2, myRxdata, acc_len);
 80014d4:	e7c0      	b.n	8001458 <main+0x14>
 80014d6:	bf00      	nop
 80014d8:	20000000 	.word	0x20000000
 80014dc:	200011bc 	.word	0x200011bc
 80014e0:	2000a148 	.word	0x2000a148
 80014e4:	20001498 	.word	0x20001498
 80014e8:	200009ec 	.word	0x200009ec
 80014ec:	20000204 	.word	0x20000204
 80014f0:	200009e4 	.word	0x200009e4
 80014f4:	200009e0 	.word	0x200009e0
 80014f8:	200011c8 	.word	0x200011c8
 80014fc:	200009e8 	.word	0x200009e8
 8001500:	200011c4 	.word	0x200011c4

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0b8      	sub	sp, #224	; 0xe0
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800150e:	2244      	movs	r2, #68	; 0x44
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f9fc 	bl	8004910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2288      	movs	r2, #136	; 0x88
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f9ee 	bl	8004910 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001534:	2310      	movs	r3, #16
 8001536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001552:	2301      	movs	r3, #1
 8001554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800155e:	2328      	movs	r3, #40	; 0x28
 8001560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001564:	2307      	movs	r3, #7
 8001566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157a:	4618      	mov	r0, r3
 800157c:	f000 ffc6 	bl	800250c <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001586:	f000 f865 	bl	8001654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2303      	movs	r3, #3
 8001592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015ac:	2104      	movs	r1, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fb92 	bl	8002cd8 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80015ba:	f000 f84b 	bl	8001654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015be:	2302      	movs	r3, #2
 80015c0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fd89 	bl	80030e0 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015d4:	f000 f83e 	bl	8001654 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015dc:	f000 ff40 	bl	8002460 <HAL_PWREx_ControlVoltageScaling>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80015e6:	f000 f835 	bl	8001654 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	37e0      	adds	r7, #224	; 0xe0
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

    UNUSED(huart);
	float32_t acceleration;
	acceleration = atof(myRxdata);
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <HAL_UART_RxCpltCallback+0x50>)
 80015fe:	f003 f95a 	bl	80048b6 <atof>
 8001602:	ec54 3b10 	vmov	r3, r4, d0
 8001606:	4618      	mov	r0, r3
 8001608:	4621      	mov	r1, r4
 800160a:	f7ff faed 	bl	8000be8 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	60fb      	str	r3, [r7, #12]
	buff_in[i] = acceleration;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_UART_RxCpltCallback+0x54>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_UART_RxCpltCallback+0x58>)
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	601a      	str	r2, [r3, #0]
	i ++;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_UART_RxCpltCallback+0x54>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_UART_RxCpltCallback+0x54>)
 800162a:	801a      	strh	r2, [r3, #0]
			if (i == INPUT_SIZE){
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_UART_RxCpltCallback+0x54>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001634:	d102      	bne.n	800163c <HAL_UART_RxCpltCallback+0x48>
						window = FULL;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_UART_RxCpltCallback+0x5c>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
				} // end if(i == HIGH_DIM)
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	200011bc 	.word	0x200011bc
 8001648:	200009e8 	.word	0x200009e8
 800164c:	20000204 	.word	0x20000204
 8001650:	20001498 	.word	0x20001498

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165a:	e7fe      	b.n	800165a <Error_Handler+0x6>

0800165c <mean_centering>:
extern uint16_t low_dim ;

/*
 * 1. Windowing and Mean Centering
 */
void mean_centering(float32_t In[], float32_t Out[]){
 800165c:	b580      	push	{r7, lr}
 800165e:	f5ad 6d7d 	sub.w	sp, sp, #4048	; 0xfd0
 8001662:	af00      	add	r7, sp, #0
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	6018      	str	r0, [r3, #0]
 8001668:	463b      	mov	r3, r7
 800166a:	6019      	str	r1, [r3, #0]

		float32_t conv = CONV;
 800166c:	4b39      	ldr	r3, [pc, #228]	; (8001754 <mean_centering+0xf8>)
 800166e:	f607 72cc 	addw	r2, r7, #4044	; 0xfcc
 8001672:	6013      	str	r3, [r2, #0]
		arm_matrix_instance_f32 A; 					// High_Dimensionla_Data
		arm_matrix_instance_f32 A_scaled; 			// To scale it down
		arm_matrix_instance_f32 mean; 				// MSE to shape the window
		arm_matrix_instance_f32 data_ready; 		// shaped data

			arm_mat_init_f32(&A, 			samples_num, high_dim, (float32_t *)In);
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <mean_centering+0xfc>)
 8001676:	8819      	ldrh	r1, [r3, #0]
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <mean_centering+0x100>)
 800167a:	881a      	ldrh	r2, [r3, #0]
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	f107 0020 	add.w	r0, r7, #32
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f7ff fc9b 	bl	8000fbe <arm_mat_init_f32>
			arm_mat_init_f32(&A_scaled,  	samples_num, high_dim, (float32_t *)In_scaled);
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <mean_centering+0xfc>)
 800168a:	8819      	ldrh	r1, [r3, #0]
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <mean_centering+0x100>)
 800168e:	881a      	ldrh	r2, [r3, #0]
 8001690:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 8001694:	f107 0018 	add.w	r0, r7, #24
 8001698:	f7ff fc91 	bl	8000fbe <arm_mat_init_f32>
			arm_mat_init_f32(&mean, 		samples_num, high_dim, (float32_t *)buff_mean_mat);
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <mean_centering+0xfc>)
 800169e:	8819      	ldrh	r1, [r3, #0]
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <mean_centering+0x100>)
 80016a2:	881a      	ldrh	r2, [r3, #0]
 80016a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a8:	f107 0010 	add.w	r0, r7, #16
 80016ac:	f7ff fc87 	bl	8000fbe <arm_mat_init_f32>
			arm_mat_init_f32(&data_ready,  	samples_num, high_dim, (float32_t *)Out);
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <mean_centering+0xfc>)
 80016b2:	8819      	ldrh	r1, [r3, #0]
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <mean_centering+0x100>)
 80016b6:	881a      	ldrh	r2, [r3, #0]
 80016b8:	463b      	mov	r3, r7
 80016ba:	f107 0008 	add.w	r0, r7, #8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f7ff fc7d 	bl	8000fbe <arm_mat_init_f32>




				status = arm_mat_scale_f32(&A, (float32_t)conv, &A_scaled); 								// first we multiply by conv in here
 80016c4:	f107 0218 	add.w	r2, r7, #24
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4611      	mov	r1, r2
 80016ce:	f607 72cc 	addw	r2, r7, #4044	; 0xfcc
 80016d2:	ed92 0a00 	vldr	s0, [r2]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fd03 	bl	80010e2 <arm_mat_scale_f32>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <mean_centering+0x104>)
 80016e2:	701a      	strb	r2, [r3, #0]
	   	   	  if (status == ARM_MATH_SIZE_MISMATCH)		Error_Handler();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <mean_centering+0x104>)
 80016e6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ea:	f113 0f03 	cmn.w	r3, #3
 80016ee:	d101      	bne.n	80016f4 <mean_centering+0x98>
 80016f0:	f7ff ffb0 	bl	8001654 <Error_Handler>

	  	  	  arm_mean_f32((float32_t *)In_scaled, (uint32_t)INPUT_SIZE, &buff_mean_org); 					// Then we compute mean of the data
 80016f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016f8:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 80016fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fda0 	bl	8001246 <arm_mean_f32>
	  	  	  arm_fill_f32(buff_mean_org, (float32_t *)buff_mean_mat, INPUT_SIZE);							// fill the mean to be able to subtract
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001712:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001716:	4618      	mov	r0, r3
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f7ff fc34 	bl	8000f88 <arm_fill_f32>
	  	  	  status = arm_mat_sub_f32(&A_scaled, &mean, &data_ready);										// mean centered data
 8001720:	f107 0208 	add.w	r2, r7, #8
 8001724:	f107 0110 	add.w	r1, r7, #16
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd0e 	bl	800114e <arm_mat_sub_f32>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <mean_centering+0x104>)
 8001738:	701a      	strb	r2, [r3, #0]

	  	  	  if (status == ARM_MATH_SIZE_MISMATCH)		Error_Handler();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <mean_centering+0x104>)
 800173c:	f993 3000 	ldrsb.w	r3, [r3]
 8001740:	f113 0f03 	cmn.w	r3, #3
 8001744:	d101      	bne.n	800174a <mean_centering+0xee>
 8001746:	f7ff ff85 	bl	8001654 <Error_Handler>

}
 800174a:	bf00      	nop
 800174c:	f507 677d 	add.w	r7, r7, #4048	; 0xfd0
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	38a00000 	.word	0x38a00000
 8001758:	20000004 	.word	0x20000004
 800175c:	20000002 	.word	0x20000002
 8001760:	2000149c 	.word	0x2000149c
 8001764:	00000000 	.word	0x00000000

08001768 <energy_filter>:

/*
 * 2. Energy Check
 */

int energy_filter(float32_t In[]){
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	double eg_thr = ENERGY_THR;
 8001770:	a418      	add	r4, pc, #96	; (adr r4, 80017d4 <energy_filter+0x6c>)
 8001772:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001776:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float32_t eg_validation;
	float32_t buff_energy;

	arm_power_f32(In, INPUT_SIZE, &buff_energy);
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	461a      	mov	r2, r3
 8001780:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fd8d 	bl	80012a4 <arm_power_f32>
	eg_validation = buff_energy / INPUT_SIZE;
 800178a:	ed97 7a02 	vldr	s14, [r7, #8]
 800178e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017d0 <energy_filter+0x68>
 800179a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179e:	edc7 7a03 	vstr	s15, [r7, #12]

	if (eg_validation>eg_thr)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7fe fed0 	bl	8000548 <__aeabi_f2d>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	461a      	mov	r2, r3
 80017ae:	4623      	mov	r3, r4
 80017b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017b4:	f7ff f992 	bl	8000adc <__aeabi_dcmplt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <energy_filter+0x5a>
		return 1 ;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <energy_filter+0x5c>
		else return 0;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	f3af 8000 	nop.w
 80017d0:	42c80000 	.word	0x42c80000
 80017d4:	eb1c432d 	.word	0xeb1c432d
 80017d8:	3eca36e2 	.word	0x3eca36e2

080017dc <data_scaling>:

/*
 * 3. Data Scaling
 */
void data_scaling(float32_t In[], float32_t Out[]){
 80017dc:	b580      	push	{r7, lr}
 80017de:	f6ad 7dd8 	subw	sp, sp, #4056	; 0xfd8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	6018      	str	r0, [r3, #0]
 80017e8:	463b      	mov	r3, r7
 80017ea:	6019      	str	r1, [r3, #0]
		arm_matrix_instance_f32 In_mat;
		arm_matrix_instance_f32 mean_mat;
		arm_matrix_instance_f32 top;
		arm_matrix_instance_f32 Out_mat;
		/* Local Matrix Initialization ======== */
		arm_mat_init_f32(&In_mat, 	samples_num,high_dim,  		(float32_t *)In);
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <data_scaling+0xfc>)
 80017ee:	8819      	ldrh	r1, [r3, #0]
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <data_scaling+0x100>)
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	f107 0020 	add.w	r0, r7, #32
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f7ff fbdf 	bl	8000fbe <arm_mat_init_f32>
		arm_mat_init_f32(&mean_mat, samples_num,high_dim, 		(float32_t *)buff_mean_mat);
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <data_scaling+0xfc>)
 8001802:	8819      	ldrh	r1, [r3, #0]
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <data_scaling+0x100>)
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 800180c:	f107 0018 	add.w	r0, r7, #24
 8001810:	f7ff fbd5 	bl	8000fbe <arm_mat_init_f32>
		arm_mat_init_f32(&top, 		samples_num,high_dim, 		(float32_t *)buff_top);
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <data_scaling+0xfc>)
 8001816:	8819      	ldrh	r1, [r3, #0]
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <data_scaling+0x100>)
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001820:	f107 0010 	add.w	r0, r7, #16
 8001824:	f7ff fbcb 	bl	8000fbe <arm_mat_init_f32>
		arm_mat_init_f32(&Out_mat, 	samples_num,high_dim, 		(float32_t *)Out);
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <data_scaling+0xfc>)
 800182a:	8819      	ldrh	r1, [r3, #0]
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <data_scaling+0x100>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	463b      	mov	r3, r7
 8001832:	f107 0008 	add.w	r0, r7, #8
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f7ff fbc1 	bl	8000fbe <arm_mat_init_f32>
		/* center mean the shaped data ======== */
		arm_mean_f32((float32_t *)In, INPUT_SIZE, &row_mean);
 800183c:	f607 72cc 	addw	r2, r7, #4044	; 0xfcc
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f7ff fcfd 	bl	8001246 <arm_mean_f32>
		arm_fill_f32(row_mean, (float32_t *)buff_mean_mat, INPUT_SIZE);
 800184c:	f607 73cc 	addw	r3, r7, #4044	; 0xfcc
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 8001858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800185c:	4618      	mov	r0, r3
 800185e:	eeb0 0a67 	vmov.f32	s0, s15
 8001862:	f7ff fb91 	bl	8000f88 <arm_fill_f32>
		arm_mat_sub_f32(&In_mat, &mean_mat, &top);
 8001866:	f107 0210 	add.w	r2, r7, #16
 800186a:	f107 0118 	add.w	r1, r7, #24
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc6b 	bl	800114e <arm_mat_sub_f32>
		/* division by standard division */
		arm_std_f32(In, INPUT_SIZE, &row_std);
 8001878:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f7ff fd3a 	bl	80012fc <arm_std_f32>
		float32_t std_top = 1/ row_std;
 8001888:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001898:	f607 73d4 	addw	r3, r7, #4052	; 0xfd4
 800189c:	edc3 7a00 	vstr	s15, [r3]
		status = arm_mat_scale_f32(&top, std_top, &Out_mat);
 80018a0:	f107 0208 	add.w	r2, r7, #8
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4611      	mov	r1, r2
 80018aa:	f607 72d4 	addw	r2, r7, #4052	; 0xfd4
 80018ae:	ed92 0a00 	vldr	s0, [r2]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc15 	bl	80010e2 <arm_mat_scale_f32>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3
		if (status == ARM_MATH_SIZE_MISMATCH)
 80018be:	f997 3fd3 	ldrsb.w	r3, [r7, #4051]	; 0xfd3
 80018c2:	f113 0f03 	cmn.w	r3, #3
 80018c6:	d101      	bne.n	80018cc <data_scaling+0xf0>
			  Error_Handler();
 80018c8:	f7ff fec4 	bl	8001654 <Error_Handler>

}
 80018cc:	bf00      	nop
 80018ce:	f607 77d8 	addw	r7, r7, #4056	; 0xfd8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000004 	.word	0x20000004
 80018dc:	20000002 	.word	0x20000002

080018e0 <pca_computing>:

/*
 * 4. Reconstruction and MSE computation
 */

float32_t pca_computing(float32_t In[], float32_t Eigen_Val[], float32_t Eigen_Val_T[], float32_t Out[]){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	f6ad 0d5c 	subw	sp, sp, #2140	; 0x85c
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	f107 040c 	add.w	r4, r7, #12
 80018ec:	6020      	str	r0, [r4, #0]
 80018ee:	f107 0008 	add.w	r0, r7, #8
 80018f2:	6001      	str	r1, [r0, #0]
 80018f4:	1d39      	adds	r1, r7, #4
 80018f6:	600a      	str	r2, [r1, #0]
 80018f8:	463a      	mov	r2, r7
 80018fa:	6013      	str	r3, [r2, #0]
	arm_matrix_instance_f32 reconstructed; 			// Reconstructed data
	arm_matrix_instance_f32 sub_mse;				// (x - rpca)
	/*
	 * Matrix Initialization
	 */
	arm_mat_init_f32(&normalize_data, samples_num, high_dim, (float32_t *)In);
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <pca_computing+0x128>)
 80018fe:	8819      	ldrh	r1, [r3, #0]
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <pca_computing+0x12c>)
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f7ff fb56 	bl	8000fbe <arm_mat_init_f32>
	arm_mat_init_f32(&Compressor, high_dim, low_dim, (float32_t *)Eigen_Val);				/* eigen 		  */
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <pca_computing+0x12c>)
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <pca_computing+0x130>)
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f7ff fb4b 	bl	8000fbe <arm_mat_init_f32>
	arm_mat_init_f32(&deCompressor, low_dim, high_dim, (float32_t *)Eigen_Val_T); 			/* eigen_transpose */
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <pca_computing+0x130>)
 800192a:	8819      	ldrh	r1, [r3, #0]
 800192c:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <pca_computing+0x12c>)
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f7ff fb41 	bl	8000fbe <arm_mat_init_f32>

	arm_mat_init_f32(&compressed_data,  samples_num, low_dim, (float32_t *)buff_compress); 	/* compress result 		*/
 800193c:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <pca_computing+0x128>)
 800193e:	8819      	ldrh	r1, [r3, #0]
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <pca_computing+0x130>)
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8001948:	f107 0020 	add.w	r0, r7, #32
 800194c:	f7ff fb37 	bl	8000fbe <arm_mat_init_f32>

	arm_mat_init_f32(&reconstructed, samples_num, high_dim, (float32_t *)Out);				/* Reconstructed	*/
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <pca_computing+0x128>)
 8001952:	8819      	ldrh	r1, [r3, #0]
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <pca_computing+0x12c>)
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	463b      	mov	r3, r7
 800195a:	f107 0018 	add.w	r0, r7, #24
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f7ff fb2d 	bl	8000fbe <arm_mat_init_f32>

	arm_mat_init_f32(&sub_mse, samples_num, high_dim, buff_sub_mse);							/* MSE */
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <pca_computing+0x128>)
 8001966:	8819      	ldrh	r1, [r3, #0]
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <pca_computing+0x12c>)
 800196a:	881a      	ldrh	r2, [r3, #0]
 800196c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001970:	f107 0010 	add.w	r0, r7, #16
 8001974:	f7ff fb23 	bl	8000fbe <arm_mat_init_f32>


			#ifndef FLASH_USE
			status = arm_mat_trans_f32(&Compressor, &deCompressor);
 8001978:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800197c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc1e 	bl	80011c4 <arm_mat_trans_f32>
 8001988:	4603      	mov	r3, r0
 800198a:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
			#endif

			status = arm_mat_mult_f32(&normalize_data, &Compressor ,&compressed_data);     /*(1xIn_window) * (In_windowxK) = (1xK)*/
 800198e:	f107 0220 	add.w	r2, r7, #32
 8001992:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb27 	bl	8000fee <arm_mat_mult_f32>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857

		    status = arm_mat_mult_f32(&compressed_data, &deCompressor, &reconstructed);
 80019a6:	f107 0218 	add.w	r2, r7, #24
 80019aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fb1b 	bl	8000fee <arm_mat_mult_f32>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857

			status = arm_mat_sub_f32(&normalize_data, &reconstructed, &sub_mse);
 80019be:	f107 0210 	add.w	r2, r7, #16
 80019c2:	f107 0118 	add.w	r1, r7, #24
 80019c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbbf 	bl	800114e <arm_mat_sub_f32>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
			arm_power_f32(buff_sub_mse, INPUT_SIZE, &buff_pow_mse);
 80019d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc5e 	bl	80012a4 <arm_power_f32>
	  		return buff_pow_mse/(float)(INPUT_SIZE);
 80019e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a14 <pca_computing+0x134>
 80019f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019f8:	eef0 7a66 	vmov.f32	s15, s13

}
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f607 075c 	addw	r7, r7, #2140	; 0x85c
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	20000002 	.word	0x20000002
 8001a10:	20000006 	.word	0x20000006
 8001a14:	43fa0000 	.word	0x43fa0000

08001a18 <pca>:
#endif
float32_t mse_res;
int energy_valid;
arm_status status;

float32_t pca(float32_t In[], float32_t Out[]){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]


	mean_centering(In, shaped_data);		/* 	mean centered data  */
 8001a22:	4917      	ldr	r1, [pc, #92]	; (8001a80 <pca+0x68>)
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fe19 	bl	800165c <mean_centering>

	energy_valid 	=  energy_filter(shaped_data);
 8001a2a:	4815      	ldr	r0, [pc, #84]	; (8001a80 <pca+0x68>)
 8001a2c:	f7ff fe9c 	bl	8001768 <energy_filter>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <pca+0x6c>)
 8001a34:	601a      	str	r2, [r3, #0]
	if (energy_valid == OK)
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <pca+0x6c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d10f      	bne.n	8001a5e <pca+0x46>
	{
			data_scaling(shaped_data, pca_entry_data);
 8001a3e:	4912      	ldr	r1, [pc, #72]	; (8001a88 <pca+0x70>)
 8001a40:	480f      	ldr	r0, [pc, #60]	; (8001a80 <pca+0x68>)
 8001a42:	f7ff fecb 	bl	80017dc <data_scaling>

			mse_res = pca_computing(pca_entry_data, eig_buff, eigen_val_tran, Out); 	/* It does the PCA and return MSE */
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <pca+0x74>)
 8001a4a:	4911      	ldr	r1, [pc, #68]	; (8001a90 <pca+0x78>)
 8001a4c:	480e      	ldr	r0, [pc, #56]	; (8001a88 <pca+0x70>)
 8001a4e:	f7ff ff47 	bl	80018e0 <pca_computing>
 8001a52:	eef0 7a40 	vmov.f32	s15, s0
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <pca+0x7c>)
 8001a58:	edc3 7a00 	vstr	s15, [r3]
 8001a5c:	e007      	b.n	8001a6e <pca+0x56>


	}
	else if(energy_valid == NOK)	mse_res = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <pca+0x6c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <pca+0x56>
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <pca+0x7c>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]

	return mse_res;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <pca+0x7c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3


}
 8001a76:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200014a0 	.word	0x200014a0
 8001a84:	20002444 	.word	0x20002444
 8001a88:	20001c74 	.word	0x20001c74
 8001a8c:	20002448 	.word	0x20002448
 8001a90:	08008478 	.word	0x08008478
 8001a94:	20001c70 	.word	0x20001c70

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f970 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USART2_IRQHandler+0x10>)
 8001b3a:	f002 f871 	bl	8003c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000a148 	.word	0x2000a148

08001b48 <_sbrk>:
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
 8001b78:	f002 fea0 	bl	80048bc <__errno>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	230c      	movs	r3, #12
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20018000 	.word	0x20018000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	200009d4 	.word	0x200009d4
 8001bb0:	2000a1d0 	.word	0x2000a1d0

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <SystemInit+0x64>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <SystemInit+0x64>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <SystemInit+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <SystemInit+0x68>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <SystemInit+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <SystemInit+0x68>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <SystemInit+0x68>)
 8001be0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001be4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <SystemInit+0x68>)
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SystemInit+0x68>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <SystemInit+0x68>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <SystemInit+0x68>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SystemInit+0x64>)
 8001c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	40021000 	.word	0x40021000

08001c20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <MX_USART2_UART_Init+0x5c>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c64:	f001 feec 	bl	8003a40 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c6e:	f7ff fcf1 	bl	8001654 <Error_Handler>
  }

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000a148 	.word	0x2000a148
 8001c7c:	40004400 	.word	0x40004400

08001c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_UART_MspInit+0x8c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d130      	bne.n	8001d04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_UART_MspInit+0x90>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_UART_MspInit+0x90>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_UART_MspInit+0x90>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_UART_MspInit+0x90>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_UART_MspInit+0x90>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_UART_MspInit+0x90>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf0:	f000 fa00 	bl	80020f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2026      	movs	r0, #38	; 0x26
 8001cfa:	f000 f984 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cfe:	2026      	movs	r0, #38	; 0x26
 8001d00:	f000 f99d 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40004400 	.word	0x40004400
 8001d10:	40021000 	.word	0x40021000

08001d14 <Reset_Handler>:
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopForever+0x2>
 8001d18:	f7ff ff4c 	bl	8001bb4 <SystemInit>
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <LoopForever+0x6>)
 8001d22:	585b      	ldr	r3, [r3, r1]
 8001d24:	5043      	str	r3, [r0, r1]
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <LoopForever+0xa>)
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopForever+0xe>)
 8001d2c:	1842      	adds	r2, r0, r1
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopForever+0x12>)
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
 8001d36:	2300      	movs	r3, #0
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <LoopForever+0x16>)
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>
 8001d42:	f002 fdc1 	bl	80048c8 <__libc_init_array>
 8001d46:	f7ff fb7d 	bl	8001444 <main>

08001d4a <LoopForever>:
 8001d4a:	e7fe      	b.n	8001d4a <LoopForever>
 8001d4c:	20018000 	.word	0x20018000
 8001d50:	0801048c 	.word	0x0801048c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	200001e8 	.word	0x200001e8
 8001d5c:	200001e8 	.word	0x200001e8
 8001d60:	2000a1d0 	.word	0x2000a1d0

08001d64 <ADC1_2_IRQHandler>:
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>

08001d66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f93d 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f80e 	bl	8001d98 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	e001      	b.n	8001d8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d88:	f7ff fe86 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_InitTick+0x6c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d023      	beq.n	8001df4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_InitTick+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f949 	bl	800205a <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d809      	bhi.n	8001de8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ddc:	f000 f913 	bl	8002006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_InitTick+0x74>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e007      	b.n	8001df8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e004      	b.n	8001df8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e001      	b.n	8001df8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000010 	.word	0x20000010
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010
 8001e34:	2000a1c8 	.word	0x2000a1c8

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2000a1c8 	.word	0x2000a1c8

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <__NVIC_EnableIRQ+0x38>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff29 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff3e 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff31 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa2 	bl	8001fac <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d005      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e029      	b.n	80020ea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 020e 	bic.w	r2, r2, #14
 80020a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f003 021c 	and.w	r2, r3, #28
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
    }
  }
  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e17f      	b.n	8002404 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8171 	beq.w	80023fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d00b      	beq.n	800213c <HAL_GPIO_Init+0x48>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002130:	2b11      	cmp	r3, #17
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d118      	bne.n	80021dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021b0:	2201      	movs	r2, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f003 0201 	and.w	r2, r3, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x128>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80ac 	beq.w	80023fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	4a5d      	ldr	r2, [pc, #372]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6613      	str	r3, [r2, #96]	; 0x60
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022be:	4a59      	ldr	r2, [pc, #356]	; (8002424 <HAL_GPIO_Init+0x330>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x242>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <HAL_GPIO_Init+0x334>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x23e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4d      	ldr	r2, [pc, #308]	; (800242c <HAL_GPIO_Init+0x338>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x23a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <HAL_GPIO_Init+0x33c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x236>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x340>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x232>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x344>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x22e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a49      	ldr	r2, [pc, #292]	; (800243c <HAL_GPIO_Init+0x348>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x22a>
 800231a:	2306      	movs	r3, #6
 800231c:	e00c      	b.n	8002338 <HAL_GPIO_Init+0x244>
 800231e:	2307      	movs	r3, #7
 8002320:	e00a      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002322:	2305      	movs	r3, #5
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002326:	2304      	movs	r3, #4
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x244>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x244>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002336:	2300      	movs	r3, #0
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002348:	4936      	ldr	r1, [pc, #216]	; (8002424 <HAL_GPIO_Init+0x330>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_GPIO_Init+0x34c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800237a:	4a31      	ldr	r2, [pc, #196]	; (8002440 <HAL_GPIO_Init+0x34c>)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x34c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	f47f ae78 	bne.w	8002104 <HAL_GPIO_Init+0x10>
  }
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	48001400 	.word	0x48001400
 800243c:	48001800 	.word	0x48001800
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_PWREx_GetVoltageRange+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40007000 	.word	0x40007000

08002460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246e:	d130      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d038      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2232      	movs	r2, #50	; 0x32
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	e002      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d102      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f2      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024cc:	d110      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e00f      	b.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d007      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000
 8002504:	20000008 	.word	0x20000008
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e3d4      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	4b9e      	ldr	r3, [pc, #632]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80e4 	beq.w	8002708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x4a>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	f040 808b 	bne.w	8002664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b01      	cmp	r3, #1
 8002552:	f040 8087 	bne.w	8002664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002556:	4b93      	ldr	r3, [pc, #588]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x62>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e3ac      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	4b8c      	ldr	r3, [pc, #560]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_RCC_OscConfig+0x7c>
 800257e:	4b89      	ldr	r3, [pc, #548]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002586:	e005      	b.n	8002594 <HAL_RCC_OscConfig+0x88>
 8002588:	4b86      	ldr	r3, [pc, #536]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	4293      	cmp	r3, r2
 8002596:	d223      	bcs.n	80025e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd3f 	bl	8003020 <RCC_SetFlashLatencyFromMSIRange>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e38d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ac:	4b7d      	ldr	r3, [pc, #500]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7c      	ldr	r2, [pc, #496]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b7a      	ldr	r3, [pc, #488]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4977      	ldr	r1, [pc, #476]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	4972      	ldr	r1, [pc, #456]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e025      	b.n	800262c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e0:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6f      	ldr	r2, [pc, #444]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	496a      	ldr	r1, [pc, #424]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fe:	4b69      	ldr	r3, [pc, #420]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	4965      	ldr	r1, [pc, #404]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fcff 	bl	8003020 <RCC_SetFlashLatencyFromMSIRange>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e34d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800262c:	f000 fc36 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002630:	4601      	mov	r1, r0
 8002632:	4b5c      	ldr	r3, [pc, #368]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	4a5a      	ldr	r2, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x29c>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa21 f303 	lsr.w	r3, r1, r3
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800264a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800264c:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fba1 	bl	8001d98 <HAL_InitTick>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d052      	beq.n	8002706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	e331      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d032      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800266c:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002678:	f7ff fbde 	bl	8001e38 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002680:	f7ff fbda 	bl	8001e38 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e31a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	493b      	ldr	r1, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	4936      	ldr	r1, [pc, #216]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
 80026d0:	e01a      	b.n	8002708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026de:	f7ff fbab 	bl	8001e38 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e6:	f7ff fba7 	bl	8001e38 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e2e7      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1da>
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d074      	beq.n	80027fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x21a>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d10e      	bne.n	800273e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d064      	beq.n	80027fc <HAL_RCC_OscConfig+0x2f0>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d160      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e2c4      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x24a>
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e01d      	b.n	8002792 <HAL_RCC_OscConfig+0x286>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x26e>
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x286>
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <HAL_RCC_OscConfig+0x298>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7ff fb4d 	bl	8001e38 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a0:	e011      	b.n	80027c6 <HAL_RCC_OscConfig+0x2ba>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08010178 	.word	0x08010178
 80027ac:	20000008 	.word	0x20000008
 80027b0:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fb40 	bl	8001e38 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e280      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4baf      	ldr	r3, [pc, #700]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2a8>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff fb30 	bl	8001e38 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7ff fb2c 	bl	8001e38 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e26c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ee:	4ba5      	ldr	r3, [pc, #660]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d0>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d060      	beq.n	80028cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x310>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d119      	bne.n	800284a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d116      	bne.n	800284a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	4b99      	ldr	r3, [pc, #612]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x328>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e249      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b93      	ldr	r3, [pc, #588]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4990      	ldr	r1, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002848:	e040      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d023      	beq.n	800289a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002852:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a8b      	ldr	r2, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff faeb 	bl	8001e38 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7ff fae7 	bl	8001e38 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e227      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002878:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	497c      	ldr	r1, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a79      	ldr	r2, [pc, #484]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80028a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff fac7 	bl	8001e38 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fac3 	bl	8001e38 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e203      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c0:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d03c      	beq.n	8002952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01c      	beq.n	800291a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80028e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e6:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7ff faa2 	bl	8001e38 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff fa9e 	bl	8001e38 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1de      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290a:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 800290c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3ec>
 8002918:	e01b      	b.n	8002952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291a:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7ff fa85 	bl	8001e38 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002932:	f7ff fa81 	bl	8001e38 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1c1      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80a6 	beq.w	8002aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002964:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
 800297c:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298c:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCC_OscConfig+0x57c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d118      	bne.n	80029ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002998:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x57c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <HAL_RCC_OscConfig+0x57c>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a4:	f7ff fa48 	bl	8001e38 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7ff fa44 	bl	8001e38 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e184      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_RCC_OscConfig+0x57c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4d8>
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e2:	e024      	b.n	8002a2e <HAL_RCC_OscConfig+0x522>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d110      	bne.n	8002a0e <HAL_RCC_OscConfig+0x502>
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0c:	e00f      	b.n	8002a2e <HAL_RCC_OscConfig+0x522>
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f023 0304 	bic.w	r3, r3, #4
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7ff f9ff 	bl	8001e38 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7ff f9fb 	bl	8001e38 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e139      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x578>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ed      	beq.n	8002a3e <HAL_RCC_OscConfig+0x532>
 8002a62:	e01a      	b.n	8002a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7ff f9e8 	bl	8001e38 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6a:	e00f      	b.n	8002a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7ff f9e4 	bl	8001e38 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d906      	bls.n	8002a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e122      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8c:	4b90      	ldr	r3, [pc, #576]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e8      	bne.n	8002a6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a8a      	ldr	r2, [pc, #552]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8108 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	f040 80d0 	bne.w	8002c60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac0:	4b83      	ldr	r3, [pc, #524]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d130      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d127      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11f      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b00:	2a07      	cmp	r2, #7
 8002b02:	bf14      	ite	ne
 8002b04:	2201      	movne	r2, #1
 8002b06:	2200      	moveq	r2, #0
 8002b08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d113      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d06e      	beq.n	8002c14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d069      	beq.n	8002c10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b3c:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b7      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b58:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5c      	ldr	r2, [pc, #368]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b64:	f7ff f968 	bl	8001e38 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff f964 	bl	8001e38 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0a4      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7e:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b51      	ldr	r3, [pc, #324]	; (8002cd4 <HAL_RCC_OscConfig+0x7c8>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b9a:	3a01      	subs	r2, #1
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba4:	0212      	lsls	r2, r2, #8
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bac:	0852      	lsrs	r2, r2, #1
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	0552      	lsls	r2, r2, #21
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bb8:	0852      	lsrs	r2, r2, #1
 8002bba:	3a01      	subs	r2, #1
 8002bbc:	0652      	lsls	r2, r2, #25
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc4:	0912      	lsrs	r2, r2, #4
 8002bc6:	0452      	lsls	r2, r2, #17
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4941      	ldr	r1, [pc, #260]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a3b      	ldr	r2, [pc, #236]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be8:	f7ff f926 	bl	8001e38 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7ff f922 	bl	8001e38 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e062      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0e:	e05a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e059      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c14:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d152      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c38:	f7ff f8fe 	bl	8001e38 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7ff f8fa 	bl	8001e38 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e03a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x734>
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d02d      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c84:	f023 0303 	bic.w	r3, r3, #3
 8002c88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7ff f8cd 	bl	8001e38 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7ff f8c9 	bl	8001e38 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e009      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCC_OscConfig+0x7c4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x796>
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	f99d808c 	.word	0xf99d808c

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0c8      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4961      	ldr	r1, [pc, #388]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b0      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d04c      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d30:	4b56      	ldr	r3, [pc, #344]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d121      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e09e      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d115      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e092      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d60:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e086      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d70:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e07e      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 0203 	bic.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	493f      	ldr	r1, [pc, #252]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d92:	f7ff f851 	bl	8001e38 <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7ff f84d 	bl	8001e38 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e066      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 020c 	and.w	r2, r3, #12
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1eb      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	492c      	ldr	r1, [pc, #176]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d210      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4924      	ldr	r1, [pc, #144]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_ClockConfig+0x1b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e036      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4918      	ldr	r1, [pc, #96]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4910      	ldr	r1, [pc, #64]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e4e:	f000 f825 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e52:	4601      	mov	r1, r0
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe ff90 	bl	8001d98 <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08010178 	.word	0x08010178
 8002e94:	20000008 	.word	0x20000008
 8002e98:	2000000c 	.word	0x2000000c

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d121      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11e      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ed0:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eec:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e004      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_RCC_GetSysClockFreq+0x110>)
 8002f22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d133      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d002      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa4>
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0xaa>
 8002f3e:	e005      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f42:	617b      	str	r3, [r7, #20]
      break;
 8002f44:	e005      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_RCC_GetSysClockFreq+0x110>)
 8002f48:	617b      	str	r3, [r7, #20]
      break;
 8002f4a:	e002      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	617b      	str	r3, [r7, #20]
      break;
 8002f50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	fb02 f203 	mul.w	r2, r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0e5b      	lsrs	r3, r3, #25
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f92:	69bb      	ldr	r3, [r7, #24]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3724      	adds	r7, #36	; 0x24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08010190 	.word	0x08010190
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000008 	.word	0x20000008

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fcc:	f7ff fff0 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4601      	mov	r1, r0
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08010188 	.word	0x08010188

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ff8:	f7ff ffda 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4601      	mov	r1, r0
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0adb      	lsrs	r3, r3, #11
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_RCC_GetPCLK2Freq+0x28>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	08010188 	.word	0x08010188

08003020 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003038:	f7ff fa04 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 800303c:	6178      	str	r0, [r7, #20]
 800303e:	e014      	b.n	800306a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	6593      	str	r3, [r2, #88]	; 0x58
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003058:	f7ff f9f4 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 800305c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003068:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003070:	d10b      	bne.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d919      	bls.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2ba0      	cmp	r3, #160	; 0xa0
 800307c:	d902      	bls.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800307e:	2302      	movs	r3, #2
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e013      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003084:	2301      	movs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	e010      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b80      	cmp	r3, #128	; 0x80
 800308e:	d902      	bls.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003090:	2303      	movs	r3, #3
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e00a      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	; 0x80
 800309a:	d102      	bne.n	80030a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800309c:	2302      	movs	r3, #2
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	e004      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d101      	bne.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 0207 	bic.w	r2, r3, #7
 80030b4:	4909      	ldr	r1, [pc, #36]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40022000 	.word	0x40022000

080030e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030e8:	2300      	movs	r3, #0
 80030ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ec:	2300      	movs	r3, #0
 80030ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d03f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003104:	d01c      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310a:	d802      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003110:	e01f      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003118:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800311c:	d01c      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800311e:	e018      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003120:	4b85      	ldr	r3, [pc, #532]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a84      	ldr	r2, [pc, #528]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312c:	e015      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fab9 	bl	80036ac <RCCEx_PLLSAI1_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800313e:	e00c      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3320      	adds	r3, #32
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fba0 	bl	800388c <RCCEx_PLLSAI2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003150:	e003      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	74fb      	strb	r3, [r7, #19]
      break;
 8003156:	e000      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003160:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316e:	4972      	ldr	r1, [pc, #456]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003176:	e001      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03f      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003190:	d01c      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003196:	d802      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 800319c:	e01f      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800319e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031a2:	d003      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80031a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031a8:	d01c      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80031aa:	e018      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031ac:	4b62      	ldr	r3, [pc, #392]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a61      	ldr	r2, [pc, #388]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b8:	e015      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fa73 	bl	80036ac <RCCEx_PLLSAI1_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ca:	e00c      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3320      	adds	r3, #32
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fb5a 	bl	800388c <RCCEx_PLLSAI2_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031dc:	e003      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	74fb      	strb	r3, [r7, #19]
      break;
 80031e2:	e000      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ec:	4b52      	ldr	r3, [pc, #328]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fa:	494f      	ldr	r1, [pc, #316]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003202:	e001      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	7cfb      	ldrb	r3, [r7, #19]
 8003206:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a0 	beq.w	8003356 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a40      	ldr	r2, [pc, #256]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
 800323c:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003248:	2301      	movs	r3, #1
 800324a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324c:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3a      	ldr	r2, [pc, #232]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003258:	f7fe fdee 	bl	8001e38 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800325e:	e009      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe fdea 	bl	8001e38 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d902      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	74fb      	strb	r3, [r7, #19]
        break;
 8003272:	e005      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003274:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d15c      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003286:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003290:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d019      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe fda9 	bl	8001e38 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	e00b      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fda5 	bl	8001e38 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d902      	bls.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003300:	e006      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ec      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800332e:	e009      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003344:	7c7b      	ldrb	r3, [r7, #17]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b9e      	ldr	r3, [pc, #632]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	4a9d      	ldr	r2, [pc, #628]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003362:	4b98      	ldr	r3, [pc, #608]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 0203 	bic.w	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	4994      	ldr	r1, [pc, #592]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003384:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 020c 	bic.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	498c      	ldr	r1, [pc, #560]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a6:	4b87      	ldr	r3, [pc, #540]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4983      	ldr	r1, [pc, #524]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	497b      	ldr	r1, [pc, #492]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	4972      	ldr	r1, [pc, #456]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800340c:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	496a      	ldr	r1, [pc, #424]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	4961      	ldr	r1, [pc, #388]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003450:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345e:	4959      	ldr	r1, [pc, #356]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	4950      	ldr	r1, [pc, #320]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003494:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	4948      	ldr	r1, [pc, #288]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	493f      	ldr	r1, [pc, #252]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d028      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d8:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e6:	4937      	ldr	r1, [pc, #220]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f6:	d106      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a31      	ldr	r2, [pc, #196]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003502:	60d3      	str	r3, [r2, #12]
 8003504:	e011      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800350e:	d10c      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	2101      	movs	r1, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f8c8 	bl	80036ac <RCCEx_PLLSAI1_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d028      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	491f      	ldr	r1, [pc, #124]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003554:	d106      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4a1a      	ldr	r2, [pc, #104]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800355c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003560:	60d3      	str	r3, [r2, #12]
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800356c:	d10c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f899 	bl	80036ac <RCCEx_PLLSAI1_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02b      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	4908      	ldr	r1, [pc, #32]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a02      	ldr	r2, [pc, #8]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035be:	60d3      	str	r3, [r2, #12]
 80035c0:	e014      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2101      	movs	r1, #1
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f867 	bl	80036ac <RCCEx_PLLSAI1_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d02f      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003606:	4928      	ldr	r1, [pc, #160]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003616:	d10d      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2102      	movs	r1, #2
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f844 	bl	80036ac <RCCEx_PLLSAI1_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d014      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	74bb      	strb	r3, [r7, #18]
 8003632:	e011      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363c:	d10c      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3320      	adds	r3, #32
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f921 	bl	800388c <RCCEx_PLLSAI2_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003664:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003672:	490d      	ldr	r1, [pc, #52]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003696:	4904      	ldr	r1, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800369e:	7cbb      	ldrb	r3, [r7, #18]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036c6:	4b70      	ldr	r3, [pc, #448]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0203 	and.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d10d      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
       ||
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
       ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d044      	beq.n	800377c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e041      	b.n	800377c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d00c      	beq.n	800371a <RCCEx_PLLSAI1_Config+0x6e>
 8003700:	2b03      	cmp	r3, #3
 8003702:	d013      	beq.n	800372c <RCCEx_PLLSAI1_Config+0x80>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d120      	bne.n	800374a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003708:	4b5f      	ldr	r3, [pc, #380]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11d      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003718:	e01a      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800371a:	4b5b      	ldr	r3, [pc, #364]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372a:	e013      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800372c:	4b56      	ldr	r3, [pc, #344]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003738:	4b53      	ldr	r3, [pc, #332]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003748:	e006      	b.n	8003758 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      break;
 800374e:	e004      	b.n	800375a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003758:	bf00      	nop
    }

    if(status == HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003760:	4b49      	ldr	r3, [pc, #292]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	3b01      	subs	r3, #1
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	430b      	orrs	r3, r1
 8003776:	4944      	ldr	r1, [pc, #272]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d17d      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a40      	ldr	r2, [pc, #256]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800378c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378e:	f7fe fb53 	bl	8001e38 <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003794:	e009      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003796:	f7fe fb4f 	bl	8001e38 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d902      	bls.n	80037aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	73fb      	strb	r3, [r7, #15]
        break;
 80037a8:	e005      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ef      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d160      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d111      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6892      	ldr	r2, [r2, #8]
 80037d2:	0211      	lsls	r1, r2, #8
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68d2      	ldr	r2, [r2, #12]
 80037d8:	0912      	lsrs	r2, r2, #4
 80037da:	0452      	lsls	r2, r2, #17
 80037dc:	430a      	orrs	r2, r1
 80037de:	492a      	ldr	r1, [pc, #168]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	610b      	str	r3, [r1, #16]
 80037e4:	e027      	b.n	8003836 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d112      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ec:	4b26      	ldr	r3, [pc, #152]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6892      	ldr	r2, [r2, #8]
 80037fc:	0211      	lsls	r1, r2, #8
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6912      	ldr	r2, [r2, #16]
 8003802:	0852      	lsrs	r2, r2, #1
 8003804:	3a01      	subs	r2, #1
 8003806:	0552      	lsls	r2, r2, #21
 8003808:	430a      	orrs	r2, r1
 800380a:	491f      	ldr	r1, [pc, #124]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	610b      	str	r3, [r1, #16]
 8003810:	e011      	b.n	8003836 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800381a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	0211      	lsls	r1, r2, #8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6952      	ldr	r2, [r2, #20]
 8003828:	0852      	lsrs	r2, r2, #1
 800382a:	3a01      	subs	r2, #1
 800382c:	0652      	lsls	r2, r2, #25
 800382e:	430a      	orrs	r2, r1
 8003830:	4915      	ldr	r1, [pc, #84]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003840:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe faf9 	bl	8001e38 <HAL_GetTick>
 8003846:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003848:	e009      	b.n	800385e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800384a:	f7fe faf5 	bl	8001e38 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d902      	bls.n	800385e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	73fb      	strb	r3, [r7, #15]
          break;
 800385c:	e005      	b.n	800386a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ef      	beq.n	800384a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4903      	ldr	r1, [pc, #12]	; (8003888 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000

0800388c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800389a:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038a6:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038be:	4b5f      	ldr	r3, [pc, #380]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
       ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d044      	beq.n	800395c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e041      	b.n	800395c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d00c      	beq.n	80038fa <RCCEx_PLLSAI2_Config+0x6e>
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d013      	beq.n	800390c <RCCEx_PLLSAI2_Config+0x80>
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d120      	bne.n	800392a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e8:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11d      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e01a      	b.n	8003930 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038fa:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390a:	e013      	b.n	8003934 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390c:	4b4b      	ldr	r3, [pc, #300]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10f      	bne.n	8003938 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003918:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003928:	e006      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
      break;
 800392e:	e004      	b.n	800393a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003938:	bf00      	nop
    }

    if(status == HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003940:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	3b01      	subs	r3, #1
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	430b      	orrs	r3, r1
 8003956:	4939      	ldr	r1, [pc, #228]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d167      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a35      	ldr	r2, [pc, #212]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396e:	f7fe fa63 	bl	8001e38 <HAL_GetTick>
 8003972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003974:	e009      	b.n	800398a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003976:	f7fe fa5f 	bl	8001e38 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d902      	bls.n	800398a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	73fb      	strb	r3, [r7, #15]
        break;
 8003988:	e005      	b.n	8003996 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1ef      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d14a      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d111      	bne.n	80039c6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	0211      	lsls	r1, r2, #8
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68d2      	ldr	r2, [r2, #12]
 80039b8:	0912      	lsrs	r2, r2, #4
 80039ba:	0452      	lsls	r2, r2, #17
 80039bc:	430a      	orrs	r2, r1
 80039be:	491f      	ldr	r1, [pc, #124]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	614b      	str	r3, [r1, #20]
 80039c4:	e011      	b.n	80039ea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	0211      	lsls	r1, r2, #8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6912      	ldr	r2, [r2, #16]
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0652      	lsls	r2, r2, #25
 80039e2:	430a      	orrs	r2, r1
 80039e4:	4915      	ldr	r1, [pc, #84]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fe fa1f 	bl	8001e38 <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039fc:	e009      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039fe:	f7fe fa1b 	bl	8001e38 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d902      	bls.n	8003a12 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a10:	e005      	b.n	8003a1e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ef      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e040      	b.n	8003ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe f90c 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	; 0x24
 8003a6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa2a 	bl	8003ed8 <UART_SetConfig>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fca8 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fd2f 	bl	8004530 <UART_CheckIdleState>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 808a 	bne.w	8003c08 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Receive_IT+0x24>
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e082      	b.n	8003c0a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Receive_IT+0x36>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e07b      	b.n	8003c0a <HAL_UART_Receive_IT+0x12e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d10e      	bne.n	8003b5e <HAL_UART_Receive_IT+0x82>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_UART_Receive_IT+0x78>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b52:	e02d      	b.n	8003bb0 <HAL_UART_Receive_IT+0xd4>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b5c:	e028      	b.n	8003bb0 <HAL_UART_Receive_IT+0xd4>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <HAL_UART_Receive_IT+0xa6>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <HAL_UART_Receive_IT+0x9c>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b76:	e01b      	b.n	8003bb0 <HAL_UART_Receive_IT+0xd4>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	227f      	movs	r2, #127	; 0x7f
 8003b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b80:	e016      	b.n	8003bb0 <HAL_UART_Receive_IT+0xd4>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_UART_Receive_IT+0xcc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_UART_Receive_IT+0xc2>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	227f      	movs	r2, #127	; 0x7f
 8003b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b9c:	e008      	b.n	8003bb0 <HAL_UART_Receive_IT+0xd4>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	223f      	movs	r2, #63	; 0x3f
 8003ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Receive_IT+0xd4>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2222      	movs	r2, #34	; 0x22
 8003bba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd4:	d107      	bne.n	8003be6 <HAL_UART_Receive_IT+0x10a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <HAL_UART_Receive_IT+0x13c>)
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60
 8003be4:	e002      	b.n	8003bec <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <HAL_UART_Receive_IT+0x140>)
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c02:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	080047f9 	.word	0x080047f9
 8003c1c:	0800474f 	.word	0x0800474f

08003c20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d113      	bne.n	8003c78 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00e      	beq.n	8003c78 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8114 	beq.w	8003e96 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
      }
      return;
 8003c76:	e10e      	b.n	8003e96 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80d6 	beq.w	8003e2c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <HAL_UART_IRQHandler+0x288>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80cb 	beq.w	8003e2c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <HAL_UART_IRQHandler+0x9e>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_UART_IRQHandler+0xc6>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00e      	beq.n	8003d0e <HAL_UART_IRQHandler+0xee>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2204      	movs	r2, #4
 8003d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d06:	f043 0202 	orr.w	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2208      	movs	r2, #8
 8003d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d38:	f043 0208 	orr.w	r2, r3, #8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00f      	beq.n	8003d6a <HAL_UART_IRQHandler+0x14a>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8093 	beq.w	8003e9a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d004      	beq.n	8003db6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d031      	beq.n	8003e1a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fc7a 	bl	80046b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d123      	bne.n	8003e12 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d013      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de6:	4a31      	ldr	r2, [pc, #196]	; (8003eac <HAL_UART_IRQHandler+0x28c>)
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe f93f 	bl	8002072 <HAL_DMA_Abort_IT>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e04:	4610      	mov	r0, r2
 8003e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e00e      	b.n	8003e28 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f85a 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e00a      	b.n	8003e28 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f856 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e006      	b.n	8003e28 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f852 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003e26:	e038      	b.n	8003e9a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	bf00      	nop
    return;
 8003e2a:	e036      	b.n	8003e9a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_UART_IRQHandler+0x232>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fd29 	bl	80048a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e50:	e026      	b.n	8003ea0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d017      	beq.n	8003e9e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
    }
    return;
 8003e76:	e012      	b.n	8003e9e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00e      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x280>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fc45 	bl	800471c <UART_EndTransmit_IT>
    return;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <HAL_UART_IRQHandler+0x280>
      return;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_UART_IRQHandler+0x280>
    return;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_UART_IRQHandler+0x280>
    return;
 8003e9e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	04000120 	.word	0x04000120
 8003eac:	080046f1 	.word	0x080046f1

08003eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003edc:	b088      	sub	sp, #32
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4bac      	ldr	r3, [pc, #688]	; (80041b8 <UART_SetConfig+0x2e0>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4aa2      	ldr	r2, [pc, #648]	; (80041bc <UART_SetConfig+0x2e4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a99      	ldr	r2, [pc, #612]	; (80041c0 <UART_SetConfig+0x2e8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d121      	bne.n	8003fa4 <UART_SetConfig+0xcc>
 8003f60:	4b98      	ldr	r3, [pc, #608]	; (80041c4 <UART_SetConfig+0x2ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d816      	bhi.n	8003f9c <UART_SetConfig+0xc4>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x9c>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003f8b 	.word	0x08003f8b
 8003f80:	08003f97 	.word	0x08003f97
 8003f84:	2301      	movs	r3, #1
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	e0e8      	b.n	800415c <UART_SetConfig+0x284>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	76fb      	strb	r3, [r7, #27]
 8003f8e:	e0e5      	b.n	800415c <UART_SetConfig+0x284>
 8003f90:	2304      	movs	r3, #4
 8003f92:	76fb      	strb	r3, [r7, #27]
 8003f94:	e0e2      	b.n	800415c <UART_SetConfig+0x284>
 8003f96:	2308      	movs	r3, #8
 8003f98:	76fb      	strb	r3, [r7, #27]
 8003f9a:	e0df      	b.n	800415c <UART_SetConfig+0x284>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	76fb      	strb	r3, [r7, #27]
 8003fa0:	bf00      	nop
 8003fa2:	e0db      	b.n	800415c <UART_SetConfig+0x284>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a87      	ldr	r2, [pc, #540]	; (80041c8 <UART_SetConfig+0x2f0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d134      	bne.n	8004018 <UART_SetConfig+0x140>
 8003fae:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <UART_SetConfig+0x2ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d829      	bhi.n	8004010 <UART_SetConfig+0x138>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0xec>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08004011 	.word	0x08004011
 8003fcc:	08004011 	.word	0x08004011
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004005 	.word	0x08004005
 8003fd8:	08004011 	.word	0x08004011
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004011 	.word	0x08004011
 8003fe4:	08003fff 	.word	0x08003fff
 8003fe8:	08004011 	.word	0x08004011
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	08004011 	.word	0x08004011
 8003ff4:	0800400b 	.word	0x0800400b
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	76fb      	strb	r3, [r7, #27]
 8003ffc:	e0ae      	b.n	800415c <UART_SetConfig+0x284>
 8003ffe:	2302      	movs	r3, #2
 8004000:	76fb      	strb	r3, [r7, #27]
 8004002:	e0ab      	b.n	800415c <UART_SetConfig+0x284>
 8004004:	2304      	movs	r3, #4
 8004006:	76fb      	strb	r3, [r7, #27]
 8004008:	e0a8      	b.n	800415c <UART_SetConfig+0x284>
 800400a:	2308      	movs	r3, #8
 800400c:	76fb      	strb	r3, [r7, #27]
 800400e:	e0a5      	b.n	800415c <UART_SetConfig+0x284>
 8004010:	2310      	movs	r3, #16
 8004012:	76fb      	strb	r3, [r7, #27]
 8004014:	bf00      	nop
 8004016:	e0a1      	b.n	800415c <UART_SetConfig+0x284>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6b      	ldr	r2, [pc, #428]	; (80041cc <UART_SetConfig+0x2f4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d120      	bne.n	8004064 <UART_SetConfig+0x18c>
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <UART_SetConfig+0x2ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800402c:	2b10      	cmp	r3, #16
 800402e:	d00f      	beq.n	8004050 <UART_SetConfig+0x178>
 8004030:	2b10      	cmp	r3, #16
 8004032:	d802      	bhi.n	800403a <UART_SetConfig+0x162>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <UART_SetConfig+0x16c>
 8004038:	e010      	b.n	800405c <UART_SetConfig+0x184>
 800403a:	2b20      	cmp	r3, #32
 800403c:	d005      	beq.n	800404a <UART_SetConfig+0x172>
 800403e:	2b30      	cmp	r3, #48	; 0x30
 8004040:	d009      	beq.n	8004056 <UART_SetConfig+0x17e>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x184>
 8004044:	2300      	movs	r3, #0
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	e088      	b.n	800415c <UART_SetConfig+0x284>
 800404a:	2302      	movs	r3, #2
 800404c:	76fb      	strb	r3, [r7, #27]
 800404e:	e085      	b.n	800415c <UART_SetConfig+0x284>
 8004050:	2304      	movs	r3, #4
 8004052:	76fb      	strb	r3, [r7, #27]
 8004054:	e082      	b.n	800415c <UART_SetConfig+0x284>
 8004056:	2308      	movs	r3, #8
 8004058:	76fb      	strb	r3, [r7, #27]
 800405a:	e07f      	b.n	800415c <UART_SetConfig+0x284>
 800405c:	2310      	movs	r3, #16
 800405e:	76fb      	strb	r3, [r7, #27]
 8004060:	bf00      	nop
 8004062:	e07b      	b.n	800415c <UART_SetConfig+0x284>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a59      	ldr	r2, [pc, #356]	; (80041d0 <UART_SetConfig+0x2f8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d120      	bne.n	80040b0 <UART_SetConfig+0x1d8>
 800406e:	4b55      	ldr	r3, [pc, #340]	; (80041c4 <UART_SetConfig+0x2ec>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d00f      	beq.n	800409c <UART_SetConfig+0x1c4>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d802      	bhi.n	8004086 <UART_SetConfig+0x1ae>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0x1b8>
 8004084:	e010      	b.n	80040a8 <UART_SetConfig+0x1d0>
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d005      	beq.n	8004096 <UART_SetConfig+0x1be>
 800408a:	2bc0      	cmp	r3, #192	; 0xc0
 800408c:	d009      	beq.n	80040a2 <UART_SetConfig+0x1ca>
 800408e:	e00b      	b.n	80040a8 <UART_SetConfig+0x1d0>
 8004090:	2300      	movs	r3, #0
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	e062      	b.n	800415c <UART_SetConfig+0x284>
 8004096:	2302      	movs	r3, #2
 8004098:	76fb      	strb	r3, [r7, #27]
 800409a:	e05f      	b.n	800415c <UART_SetConfig+0x284>
 800409c:	2304      	movs	r3, #4
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e05c      	b.n	800415c <UART_SetConfig+0x284>
 80040a2:	2308      	movs	r3, #8
 80040a4:	76fb      	strb	r3, [r7, #27]
 80040a6:	e059      	b.n	800415c <UART_SetConfig+0x284>
 80040a8:	2310      	movs	r3, #16
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	bf00      	nop
 80040ae:	e055      	b.n	800415c <UART_SetConfig+0x284>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <UART_SetConfig+0x2fc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d124      	bne.n	8004104 <UART_SetConfig+0x22c>
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <UART_SetConfig+0x2ec>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	d012      	beq.n	80040f0 <UART_SetConfig+0x218>
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d802      	bhi.n	80040d6 <UART_SetConfig+0x1fe>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <UART_SetConfig+0x20c>
 80040d4:	e012      	b.n	80040fc <UART_SetConfig+0x224>
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040da:	d006      	beq.n	80040ea <UART_SetConfig+0x212>
 80040dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e0:	d009      	beq.n	80040f6 <UART_SetConfig+0x21e>
 80040e2:	e00b      	b.n	80040fc <UART_SetConfig+0x224>
 80040e4:	2300      	movs	r3, #0
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	e038      	b.n	800415c <UART_SetConfig+0x284>
 80040ea:	2302      	movs	r3, #2
 80040ec:	76fb      	strb	r3, [r7, #27]
 80040ee:	e035      	b.n	800415c <UART_SetConfig+0x284>
 80040f0:	2304      	movs	r3, #4
 80040f2:	76fb      	strb	r3, [r7, #27]
 80040f4:	e032      	b.n	800415c <UART_SetConfig+0x284>
 80040f6:	2308      	movs	r3, #8
 80040f8:	76fb      	strb	r3, [r7, #27]
 80040fa:	e02f      	b.n	800415c <UART_SetConfig+0x284>
 80040fc:	2310      	movs	r3, #16
 80040fe:	76fb      	strb	r3, [r7, #27]
 8004100:	bf00      	nop
 8004102:	e02b      	b.n	800415c <UART_SetConfig+0x284>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <UART_SetConfig+0x2e4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d124      	bne.n	8004158 <UART_SetConfig+0x280>
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <UART_SetConfig+0x2ec>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d012      	beq.n	8004144 <UART_SetConfig+0x26c>
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d802      	bhi.n	800412a <UART_SetConfig+0x252>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <UART_SetConfig+0x260>
 8004128:	e012      	b.n	8004150 <UART_SetConfig+0x278>
 800412a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412e:	d006      	beq.n	800413e <UART_SetConfig+0x266>
 8004130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004134:	d009      	beq.n	800414a <UART_SetConfig+0x272>
 8004136:	e00b      	b.n	8004150 <UART_SetConfig+0x278>
 8004138:	2300      	movs	r3, #0
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	e00e      	b.n	800415c <UART_SetConfig+0x284>
 800413e:	2302      	movs	r3, #2
 8004140:	76fb      	strb	r3, [r7, #27]
 8004142:	e00b      	b.n	800415c <UART_SetConfig+0x284>
 8004144:	2304      	movs	r3, #4
 8004146:	76fb      	strb	r3, [r7, #27]
 8004148:	e008      	b.n	800415c <UART_SetConfig+0x284>
 800414a:	2308      	movs	r3, #8
 800414c:	76fb      	strb	r3, [r7, #27]
 800414e:	e005      	b.n	800415c <UART_SetConfig+0x284>
 8004150:	2310      	movs	r3, #16
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	bf00      	nop
 8004156:	e001      	b.n	800415c <UART_SetConfig+0x284>
 8004158:	2310      	movs	r3, #16
 800415a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <UART_SetConfig+0x2e4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	f040 8087 	bne.w	8004276 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004168:	7efb      	ldrb	r3, [r7, #27]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d836      	bhi.n	80041dc <UART_SetConfig+0x304>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x29c>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004199 	.word	0x08004199
 8004178:	080041dd 	.word	0x080041dd
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041dd 	.word	0x080041dd
 8004184:	080041a7 	.word	0x080041a7
 8004188:	080041dd 	.word	0x080041dd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004198:	f7fe ff16 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 800419c:	6178      	str	r0, [r7, #20]
        break;
 800419e:	e022      	b.n	80041e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <UART_SetConfig+0x300>)
 80041a2:	617b      	str	r3, [r7, #20]
        break;
 80041a4:	e01f      	b.n	80041e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe fe79 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 80041aa:	6178      	str	r0, [r7, #20]
        break;
 80041ac:	e01b      	b.n	80041e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b2:	617b      	str	r3, [r7, #20]
        break;
 80041b4:	e017      	b.n	80041e6 <UART_SetConfig+0x30e>
 80041b6:	bf00      	nop
 80041b8:	efff69f3 	.word	0xefff69f3
 80041bc:	40008000 	.word	0x40008000
 80041c0:	40013800 	.word	0x40013800
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40004400 	.word	0x40004400
 80041cc:	40004800 	.word	0x40004800
 80041d0:	40004c00 	.word	0x40004c00
 80041d4:	40005000 	.word	0x40005000
 80041d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	76bb      	strb	r3, [r7, #26]
        break;
 80041e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80f1 	beq.w	80043d0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d305      	bcc.n	800420a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	429a      	cmp	r2, r3
 8004208:	d902      	bls.n	8004210 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	76bb      	strb	r3, [r7, #26]
 800420e:	e0df      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	0214      	lsls	r4, r2, #8
 8004222:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004226:	020b      	lsls	r3, r1, #8
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6852      	ldr	r2, [r2, #4]
 800422c:	0852      	lsrs	r2, r2, #1
 800422e:	4611      	mov	r1, r2
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	eb13 0b01 	adds.w	fp, r3, r1
 8004238:	eb44 0c02 	adc.w	ip, r4, r2
 800423c:	4658      	mov	r0, fp
 800423e:	4661      	mov	r1, ip
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f04f 0400 	mov.w	r4, #0
 8004248:	461a      	mov	r2, r3
 800424a:	4623      	mov	r3, r4
 800424c:	f7fc fd1c 	bl	8000c88 <__aeabi_uldivmod>
 8004250:	4603      	mov	r3, r0
 8004252:	460c      	mov	r4, r1
 8004254:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425c:	d308      	bcc.n	8004270 <UART_SetConfig+0x398>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004264:	d204      	bcs.n	8004270 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	e0af      	b.n	80043d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	76bb      	strb	r3, [r7, #26]
 8004274:	e0ac      	b.n	80043d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427e:	d15b      	bne.n	8004338 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004280:	7efb      	ldrb	r3, [r7, #27]
 8004282:	2b08      	cmp	r3, #8
 8004284:	d827      	bhi.n	80042d6 <UART_SetConfig+0x3fe>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <UART_SetConfig+0x3b4>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042c1 	.word	0x080042c1
 8004298:	080042d7 	.word	0x080042d7
 800429c:	080042c7 	.word	0x080042c7
 80042a0:	080042d7 	.word	0x080042d7
 80042a4:	080042d7 	.word	0x080042d7
 80042a8:	080042d7 	.word	0x080042d7
 80042ac:	080042cf 	.word	0x080042cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b0:	f7fe fe8a 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 80042b4:	6178      	str	r0, [r7, #20]
        break;
 80042b6:	e013      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe fe9c 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 80042bc:	6178      	str	r0, [r7, #20]
        break;
 80042be:	e00f      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c0:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <UART_SetConfig+0x510>)
 80042c2:	617b      	str	r3, [r7, #20]
        break;
 80042c4:	e00c      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c6:	f7fe fde9 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 80042ca:	6178      	str	r0, [r7, #20]
        break;
 80042cc:	e008      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	617b      	str	r3, [r7, #20]
        break;
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	76bb      	strb	r3, [r7, #26]
        break;
 80042de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d074      	beq.n	80043d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005a      	lsls	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	441a      	add	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d916      	bls.n	8004332 <UART_SetConfig+0x45a>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d212      	bcs.n	8004332 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	b29a      	uxth	r2, r3
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	4313      	orrs	r3, r2
 8004326:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	89fa      	ldrh	r2, [r7, #14]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e04e      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	76bb      	strb	r3, [r7, #26]
 8004336:	e04b      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004338:	7efb      	ldrb	r3, [r7, #27]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d827      	bhi.n	800438e <UART_SetConfig+0x4b6>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <UART_SetConfig+0x46c>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004369 	.word	0x08004369
 8004348:	08004371 	.word	0x08004371
 800434c:	08004379 	.word	0x08004379
 8004350:	0800438f 	.word	0x0800438f
 8004354:	0800437f 	.word	0x0800437f
 8004358:	0800438f 	.word	0x0800438f
 800435c:	0800438f 	.word	0x0800438f
 8004360:	0800438f 	.word	0x0800438f
 8004364:	08004387 	.word	0x08004387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fe fe2e 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 800436c:	6178      	str	r0, [r7, #20]
        break;
 800436e:	e013      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7fe fe40 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004374:	6178      	str	r0, [r7, #20]
        break;
 8004376:	e00f      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <UART_SetConfig+0x510>)
 800437a:	617b      	str	r3, [r7, #20]
        break;
 800437c:	e00c      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437e:	f7fe fd8d 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8004382:	6178      	str	r0, [r7, #20]
        break;
 8004384:	e008      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438a:	617b      	str	r3, [r7, #20]
        break;
 800438c:	e004      	b.n	8004398 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	76bb      	strb	r3, [r7, #26]
        break;
 8004396:	bf00      	nop
    }

    if (pclk != 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085a      	lsrs	r2, r3, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	441a      	add	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	d908      	bls.n	80043cc <UART_SetConfig+0x4f4>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d204      	bcs.n	80043cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e001      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80043e8:	00f42400 	.word	0x00f42400

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800453e:	f7fd fc7b 	bl	8001e38 <HAL_GetTick>
 8004542:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d10e      	bne.n	8004570 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f82a 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e020      	b.n	80045b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d10e      	bne.n	800459c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f814 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e00a      	b.n	80045b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ca:	e05d      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d2:	d059      	beq.n	8004688 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fd fc30 	bl	8001e38 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <UART_WaitOnFlagUntilTimeout+0x30>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11b      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e042      	b.n	80046a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02b      	beq.n	8004688 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463e:	d123      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004648:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004658:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e00f      	b.n	80046a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	429a      	cmp	r2, r3
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d092      	beq.n	80045cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff fbd8 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fbb5 	bl	8003eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800475c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004762:	2b22      	cmp	r3, #34	; 0x22
 8004764:	d13a      	bne.n	80047dc <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800476c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800476e:	89bb      	ldrh	r3, [r7, #12]
 8004770:	b2d9      	uxtb	r1, r3
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	400a      	ands	r2, r1
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d123      	bne.n	80047f0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047b6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fc ff0d 	bl	80015f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047da:	e009      	b.n	80047f0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	8b1b      	ldrh	r3, [r3, #24]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0208 	orr.w	r2, r2, #8
 80047ec:	b292      	uxth	r2, r2
 80047ee:	831a      	strh	r2, [r3, #24]
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004806:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480c:	2b22      	cmp	r3, #34	; 0x22
 800480e:	d13a      	bne.n	8004886 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004816:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800481e:	89ba      	ldrh	r2, [r7, #12]
 8004820:	89fb      	ldrh	r3, [r7, #14]
 8004822:	4013      	ands	r3, r2
 8004824:	b29a      	uxth	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	1c9a      	adds	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d123      	bne.n	800489a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004860:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc feb8 	bl	80015f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004884:	e009      	b.n	800489a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	8b1b      	ldrh	r3, [r3, #24]
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0208 	orr.w	r2, r2, #8
 8004896:	b292      	uxth	r2, r2
 8004898:	831a      	strh	r2, [r3, #24]
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <atof>:
 80048b6:	2100      	movs	r1, #0
 80048b8:	f001 bcb6 	b.w	8006228 <strtod>

080048bc <__errno>:
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <__errno+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000014 	.word	0x20000014

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0d      	ldr	r6, [pc, #52]	; (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048ce:	1ba4      	subs	r4, r4, r6
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2500      	movs	r5, #0
 80048d4:	42a5      	cmp	r5, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4e0b      	ldr	r6, [pc, #44]	; (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x44>)
 80048dc:	f003 fdc0 	bl	8008460 <_init>
 80048e0:	1ba4      	subs	r4, r4, r6
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2500      	movs	r5, #0
 80048e6:	42a5      	cmp	r5, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f0:	4798      	blx	r3
 80048f2:	3501      	adds	r5, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048fa:	4798      	blx	r3
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08010484 	.word	0x08010484
 8004904:	08010484 	.word	0x08010484
 8004908:	08010484 	.word	0x08010484
 800490c:	08010488 	.word	0x08010488

08004910 <memset>:
 8004910:	4402      	add	r2, r0
 8004912:	4603      	mov	r3, r0
 8004914:	4293      	cmp	r3, r2
 8004916:	d100      	bne.n	800491a <memset+0xa>
 8004918:	4770      	bx	lr
 800491a:	f803 1b01 	strb.w	r1, [r3], #1
 800491e:	e7f9      	b.n	8004914 <memset+0x4>

08004920 <__cvt>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	ec55 4b10 	vmov	r4, r5, d0
 8004928:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800492a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800492e:	2d00      	cmp	r5, #0
 8004930:	460e      	mov	r6, r1
 8004932:	4691      	mov	r9, r2
 8004934:	4619      	mov	r1, r3
 8004936:	bfb8      	it	lt
 8004938:	4622      	movlt	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	f027 0720 	bic.w	r7, r7, #32
 8004940:	bfbb      	ittet	lt
 8004942:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004946:	461d      	movlt	r5, r3
 8004948:	2300      	movge	r3, #0
 800494a:	232d      	movlt	r3, #45	; 0x2d
 800494c:	bfb8      	it	lt
 800494e:	4614      	movlt	r4, r2
 8004950:	2f46      	cmp	r7, #70	; 0x46
 8004952:	700b      	strb	r3, [r1, #0]
 8004954:	d004      	beq.n	8004960 <__cvt+0x40>
 8004956:	2f45      	cmp	r7, #69	; 0x45
 8004958:	d100      	bne.n	800495c <__cvt+0x3c>
 800495a:	3601      	adds	r6, #1
 800495c:	2102      	movs	r1, #2
 800495e:	e000      	b.n	8004962 <__cvt+0x42>
 8004960:	2103      	movs	r1, #3
 8004962:	ab03      	add	r3, sp, #12
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	ab02      	add	r3, sp, #8
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4632      	mov	r2, r6
 800496c:	4653      	mov	r3, sl
 800496e:	ec45 4b10 	vmov	d0, r4, r5
 8004972:	f001 fd89 	bl	8006488 <_dtoa_r>
 8004976:	2f47      	cmp	r7, #71	; 0x47
 8004978:	4680      	mov	r8, r0
 800497a:	d102      	bne.n	8004982 <__cvt+0x62>
 800497c:	f019 0f01 	tst.w	r9, #1
 8004980:	d026      	beq.n	80049d0 <__cvt+0xb0>
 8004982:	2f46      	cmp	r7, #70	; 0x46
 8004984:	eb08 0906 	add.w	r9, r8, r6
 8004988:	d111      	bne.n	80049ae <__cvt+0x8e>
 800498a:	f898 3000 	ldrb.w	r3, [r8]
 800498e:	2b30      	cmp	r3, #48	; 0x30
 8004990:	d10a      	bne.n	80049a8 <__cvt+0x88>
 8004992:	2200      	movs	r2, #0
 8004994:	2300      	movs	r3, #0
 8004996:	4620      	mov	r0, r4
 8004998:	4629      	mov	r1, r5
 800499a:	f7fc f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800499e:	b918      	cbnz	r0, 80049a8 <__cvt+0x88>
 80049a0:	f1c6 0601 	rsb	r6, r6, #1
 80049a4:	f8ca 6000 	str.w	r6, [sl]
 80049a8:	f8da 3000 	ldr.w	r3, [sl]
 80049ac:	4499      	add	r9, r3
 80049ae:	2200      	movs	r2, #0
 80049b0:	2300      	movs	r3, #0
 80049b2:	4620      	mov	r0, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	f7fc f887 	bl	8000ac8 <__aeabi_dcmpeq>
 80049ba:	b938      	cbnz	r0, 80049cc <__cvt+0xac>
 80049bc:	2230      	movs	r2, #48	; 0x30
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	454b      	cmp	r3, r9
 80049c2:	d205      	bcs.n	80049d0 <__cvt+0xb0>
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	9103      	str	r1, [sp, #12]
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e7f8      	b.n	80049be <__cvt+0x9e>
 80049cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049d4:	eba3 0308 	sub.w	r3, r3, r8
 80049d8:	4640      	mov	r0, r8
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	b004      	add	sp, #16
 80049de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049e2 <__exponent>:
 80049e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e4:	2900      	cmp	r1, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	bfba      	itte	lt
 80049ea:	4249      	neglt	r1, r1
 80049ec:	232d      	movlt	r3, #45	; 0x2d
 80049ee:	232b      	movge	r3, #43	; 0x2b
 80049f0:	2909      	cmp	r1, #9
 80049f2:	f804 2b02 	strb.w	r2, [r4], #2
 80049f6:	7043      	strb	r3, [r0, #1]
 80049f8:	dd20      	ble.n	8004a3c <__exponent+0x5a>
 80049fa:	f10d 0307 	add.w	r3, sp, #7
 80049fe:	461f      	mov	r7, r3
 8004a00:	260a      	movs	r6, #10
 8004a02:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a06:	fb06 1115 	mls	r1, r6, r5, r1
 8004a0a:	3130      	adds	r1, #48	; 0x30
 8004a0c:	2d09      	cmp	r5, #9
 8004a0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a12:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004a16:	4629      	mov	r1, r5
 8004a18:	dc09      	bgt.n	8004a2e <__exponent+0x4c>
 8004a1a:	3130      	adds	r1, #48	; 0x30
 8004a1c:	3b02      	subs	r3, #2
 8004a1e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a22:	42bb      	cmp	r3, r7
 8004a24:	4622      	mov	r2, r4
 8004a26:	d304      	bcc.n	8004a32 <__exponent+0x50>
 8004a28:	1a10      	subs	r0, r2, r0
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2e:	4613      	mov	r3, r2
 8004a30:	e7e7      	b.n	8004a02 <__exponent+0x20>
 8004a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a36:	f804 2b01 	strb.w	r2, [r4], #1
 8004a3a:	e7f2      	b.n	8004a22 <__exponent+0x40>
 8004a3c:	2330      	movs	r3, #48	; 0x30
 8004a3e:	4419      	add	r1, r3
 8004a40:	7083      	strb	r3, [r0, #2]
 8004a42:	1d02      	adds	r2, r0, #4
 8004a44:	70c1      	strb	r1, [r0, #3]
 8004a46:	e7ef      	b.n	8004a28 <__exponent+0x46>

08004a48 <_printf_float>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	b08d      	sub	sp, #52	; 0x34
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004a54:	4616      	mov	r6, r2
 8004a56:	461f      	mov	r7, r3
 8004a58:	4605      	mov	r5, r0
 8004a5a:	f002 fdf9 	bl	8007650 <_localeconv_r>
 8004a5e:	6803      	ldr	r3, [r0, #0]
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fbb4 	bl	80001d0 <strlen>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a70:	9005      	str	r0, [sp, #20]
 8004a72:	3307      	adds	r3, #7
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	f103 0208 	add.w	r2, r3, #8
 8004a7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a80:	f8d4 b000 	ldr.w	fp, [r4]
 8004a84:	f8c8 2000 	str.w	r2, [r8]
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a90:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a94:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa2:	4ba7      	ldr	r3, [pc, #668]	; (8004d40 <_printf_float+0x2f8>)
 8004aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa8:	f7fc f840 	bl	8000b2c <__aeabi_dcmpun>
 8004aac:	bb70      	cbnz	r0, 8004b0c <_printf_float+0xc4>
 8004aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab2:	4ba3      	ldr	r3, [pc, #652]	; (8004d40 <_printf_float+0x2f8>)
 8004ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab8:	f7fc f81a 	bl	8000af0 <__aeabi_dcmple>
 8004abc:	bb30      	cbnz	r0, 8004b0c <_printf_float+0xc4>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fc f809 	bl	8000adc <__aeabi_dcmplt>
 8004aca:	b110      	cbz	r0, 8004ad2 <_printf_float+0x8a>
 8004acc:	232d      	movs	r3, #45	; 0x2d
 8004ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad2:	4a9c      	ldr	r2, [pc, #624]	; (8004d44 <_printf_float+0x2fc>)
 8004ad4:	4b9c      	ldr	r3, [pc, #624]	; (8004d48 <_printf_float+0x300>)
 8004ad6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ada:	bf8c      	ite	hi
 8004adc:	4690      	movhi	r8, r2
 8004ade:	4698      	movls	r8, r3
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	f02b 0204 	bic.w	r2, fp, #4
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	6022      	str	r2, [r4, #0]
 8004aea:	f04f 0900 	mov.w	r9, #0
 8004aee:	9700      	str	r7, [sp, #0]
 8004af0:	4633      	mov	r3, r6
 8004af2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f9e6 	bl	8004ec8 <_printf_common>
 8004afc:	3001      	adds	r0, #1
 8004afe:	f040 808d 	bne.w	8004c1c <_printf_float+0x1d4>
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b06:	b00d      	add	sp, #52	; 0x34
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fc f80a 	bl	8000b2c <__aeabi_dcmpun>
 8004b18:	b110      	cbz	r0, 8004b20 <_printf_float+0xd8>
 8004b1a:	4a8c      	ldr	r2, [pc, #560]	; (8004d4c <_printf_float+0x304>)
 8004b1c:	4b8c      	ldr	r3, [pc, #560]	; (8004d50 <_printf_float+0x308>)
 8004b1e:	e7da      	b.n	8004ad6 <_printf_float+0x8e>
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	1c4b      	adds	r3, r1, #1
 8004b24:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004b28:	a80a      	add	r0, sp, #40	; 0x28
 8004b2a:	d13e      	bne.n	8004baa <_printf_float+0x162>
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	2300      	movs	r3, #0
 8004b32:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b36:	ab09      	add	r3, sp, #36	; 0x24
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	ec49 8b10 	vmov	d0, r8, r9
 8004b3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b42:	6022      	str	r2, [r4, #0]
 8004b44:	f8cd a004 	str.w	sl, [sp, #4]
 8004b48:	6861      	ldr	r1, [r4, #4]
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f7ff fee8 	bl	8004920 <__cvt>
 8004b50:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004b54:	2b47      	cmp	r3, #71	; 0x47
 8004b56:	4680      	mov	r8, r0
 8004b58:	d109      	bne.n	8004b6e <_printf_float+0x126>
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	1cd8      	adds	r0, r3, #3
 8004b5e:	db02      	blt.n	8004b66 <_printf_float+0x11e>
 8004b60:	6862      	ldr	r2, [r4, #4]
 8004b62:	4293      	cmp	r3, r2
 8004b64:	dd47      	ble.n	8004bf6 <_printf_float+0x1ae>
 8004b66:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b6a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b74:	d824      	bhi.n	8004bc0 <_printf_float+0x178>
 8004b76:	3901      	subs	r1, #1
 8004b78:	4652      	mov	r2, sl
 8004b7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b7e:	9109      	str	r1, [sp, #36]	; 0x24
 8004b80:	f7ff ff2f 	bl	80049e2 <__exponent>
 8004b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b86:	1813      	adds	r3, r2, r0
 8004b88:	2a01      	cmp	r2, #1
 8004b8a:	4681      	mov	r9, r0
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	dc02      	bgt.n	8004b96 <_printf_float+0x14e>
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	07d1      	lsls	r1, r2, #31
 8004b94:	d501      	bpl.n	8004b9a <_printf_float+0x152>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0a5      	beq.n	8004aee <_printf_float+0xa6>
 8004ba2:	232d      	movs	r3, #45	; 0x2d
 8004ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba8:	e7a1      	b.n	8004aee <_printf_float+0xa6>
 8004baa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004bae:	f000 8177 	beq.w	8004ea0 <_printf_float+0x458>
 8004bb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004bb6:	d1bb      	bne.n	8004b30 <_printf_float+0xe8>
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d1b9      	bne.n	8004b30 <_printf_float+0xe8>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e7b6      	b.n	8004b2e <_printf_float+0xe6>
 8004bc0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004bc4:	d119      	bne.n	8004bfa <_printf_float+0x1b2>
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	dd0c      	ble.n	8004be6 <_printf_float+0x19e>
 8004bcc:	6121      	str	r1, [r4, #16]
 8004bce:	b913      	cbnz	r3, 8004bd6 <_printf_float+0x18e>
 8004bd0:	6822      	ldr	r2, [r4, #0]
 8004bd2:	07d2      	lsls	r2, r2, #31
 8004bd4:	d502      	bpl.n	8004bdc <_printf_float+0x194>
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	440b      	add	r3, r1
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bde:	65a3      	str	r3, [r4, #88]	; 0x58
 8004be0:	f04f 0900 	mov.w	r9, #0
 8004be4:	e7d9      	b.n	8004b9a <_printf_float+0x152>
 8004be6:	b913      	cbnz	r3, 8004bee <_printf_float+0x1a6>
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	07d0      	lsls	r0, r2, #31
 8004bec:	d501      	bpl.n	8004bf2 <_printf_float+0x1aa>
 8004bee:	3302      	adds	r3, #2
 8004bf0:	e7f3      	b.n	8004bda <_printf_float+0x192>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e7f1      	b.n	8004bda <_printf_float+0x192>
 8004bf6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004bfa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	db05      	blt.n	8004c0e <_printf_float+0x1c6>
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	6123      	str	r3, [r4, #16]
 8004c06:	07d1      	lsls	r1, r2, #31
 8004c08:	d5e8      	bpl.n	8004bdc <_printf_float+0x194>
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	e7e5      	b.n	8004bda <_printf_float+0x192>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bfd4      	ite	le
 8004c12:	f1c3 0302 	rsble	r3, r3, #2
 8004c16:	2301      	movgt	r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	e7de      	b.n	8004bda <_printf_float+0x192>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	055a      	lsls	r2, r3, #21
 8004c20:	d407      	bmi.n	8004c32 <_printf_float+0x1ea>
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	4642      	mov	r2, r8
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d12b      	bne.n	8004c88 <_printf_float+0x240>
 8004c30:	e767      	b.n	8004b02 <_printf_float+0xba>
 8004c32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c36:	f240 80dc 	bls.w	8004df2 <_printf_float+0x3aa>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c42:	f7fb ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d033      	beq.n	8004cb2 <_printf_float+0x26a>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4a41      	ldr	r2, [pc, #260]	; (8004d54 <_printf_float+0x30c>)
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	f43f af54 	beq.w	8004b02 <_printf_float+0xba>
 8004c5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	db02      	blt.n	8004c68 <_printf_float+0x220>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	07d8      	lsls	r0, r3, #31
 8004c66:	d50f      	bpl.n	8004c88 <_printf_float+0x240>
 8004c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4628      	mov	r0, r5
 8004c70:	47b8      	blx	r7
 8004c72:	3001      	adds	r0, #1
 8004c74:	f43f af45 	beq.w	8004b02 <_printf_float+0xba>
 8004c78:	f04f 0800 	mov.w	r8, #0
 8004c7c:	f104 091a 	add.w	r9, r4, #26
 8004c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	4543      	cmp	r3, r8
 8004c86:	dc09      	bgt.n	8004c9c <_printf_float+0x254>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	079b      	lsls	r3, r3, #30
 8004c8c:	f100 8103 	bmi.w	8004e96 <_printf_float+0x44e>
 8004c90:	68e0      	ldr	r0, [r4, #12]
 8004c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c94:	4298      	cmp	r0, r3
 8004c96:	bfb8      	it	lt
 8004c98:	4618      	movlt	r0, r3
 8004c9a:	e734      	b.n	8004b06 <_printf_float+0xbe>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	464a      	mov	r2, r9
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af2b 	beq.w	8004b02 <_printf_float+0xba>
 8004cac:	f108 0801 	add.w	r8, r8, #1
 8004cb0:	e7e6      	b.n	8004c80 <_printf_float+0x238>
 8004cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dc2b      	bgt.n	8004d10 <_printf_float+0x2c8>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <_printf_float+0x30c>)
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f af1d 	beq.w	8004b02 <_printf_float+0xba>
 8004cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cca:	b923      	cbnz	r3, 8004cd6 <_printf_float+0x28e>
 8004ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cce:	b913      	cbnz	r3, 8004cd6 <_printf_float+0x28e>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	07d9      	lsls	r1, r3, #31
 8004cd4:	d5d8      	bpl.n	8004c88 <_printf_float+0x240>
 8004cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	f43f af0e 	beq.w	8004b02 <_printf_float+0xba>
 8004ce6:	f04f 0900 	mov.w	r9, #0
 8004cea:	f104 0a1a 	add.w	sl, r4, #26
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	454b      	cmp	r3, r9
 8004cf4:	dc01      	bgt.n	8004cfa <_printf_float+0x2b2>
 8004cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf8:	e794      	b.n	8004c24 <_printf_float+0x1dc>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f aefc 	beq.w	8004b02 <_printf_float+0xba>
 8004d0a:	f109 0901 	add.w	r9, r9, #1
 8004d0e:	e7ee      	b.n	8004cee <_printf_float+0x2a6>
 8004d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d14:	429a      	cmp	r2, r3
 8004d16:	bfa8      	it	ge
 8004d18:	461a      	movge	r2, r3
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	4691      	mov	r9, r2
 8004d1e:	dd07      	ble.n	8004d30 <_printf_float+0x2e8>
 8004d20:	4613      	mov	r3, r2
 8004d22:	4631      	mov	r1, r6
 8004d24:	4642      	mov	r2, r8
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f aee9 	beq.w	8004b02 <_printf_float+0xba>
 8004d30:	f104 031a 	add.w	r3, r4, #26
 8004d34:	f04f 0b00 	mov.w	fp, #0
 8004d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d3c:	9306      	str	r3, [sp, #24]
 8004d3e:	e015      	b.n	8004d6c <_printf_float+0x324>
 8004d40:	7fefffff 	.word	0x7fefffff
 8004d44:	080101c4 	.word	0x080101c4
 8004d48:	080101c0 	.word	0x080101c0
 8004d4c:	080101cc 	.word	0x080101cc
 8004d50:	080101c8 	.word	0x080101c8
 8004d54:	080101d0 	.word	0x080101d0
 8004d58:	2301      	movs	r3, #1
 8004d5a:	9a06      	ldr	r2, [sp, #24]
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f aecd 	beq.w	8004b02 <_printf_float+0xba>
 8004d68:	f10b 0b01 	add.w	fp, fp, #1
 8004d6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d70:	ebaa 0309 	sub.w	r3, sl, r9
 8004d74:	455b      	cmp	r3, fp
 8004d76:	dcef      	bgt.n	8004d58 <_printf_float+0x310>
 8004d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	44d0      	add	r8, sl
 8004d80:	db15      	blt.n	8004dae <_printf_float+0x366>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	07da      	lsls	r2, r3, #31
 8004d86:	d412      	bmi.n	8004dae <_printf_float+0x366>
 8004d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d8c:	eba3 020a 	sub.w	r2, r3, sl
 8004d90:	eba3 0a01 	sub.w	sl, r3, r1
 8004d94:	4592      	cmp	sl, r2
 8004d96:	bfa8      	it	ge
 8004d98:	4692      	movge	sl, r2
 8004d9a:	f1ba 0f00 	cmp.w	sl, #0
 8004d9e:	dc0e      	bgt.n	8004dbe <_printf_float+0x376>
 8004da0:	f04f 0800 	mov.w	r8, #0
 8004da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004da8:	f104 091a 	add.w	r9, r4, #26
 8004dac:	e019      	b.n	8004de2 <_printf_float+0x39a>
 8004dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	d1e5      	bne.n	8004d88 <_printf_float+0x340>
 8004dbc:	e6a1      	b.n	8004b02 <_printf_float+0xba>
 8004dbe:	4653      	mov	r3, sl
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d1e9      	bne.n	8004da0 <_printf_float+0x358>
 8004dcc:	e699      	b.n	8004b02 <_printf_float+0xba>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	464a      	mov	r2, r9
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f ae92 	beq.w	8004b02 <_printf_float+0xba>
 8004dde:	f108 0801 	add.w	r8, r8, #1
 8004de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	eba3 030a 	sub.w	r3, r3, sl
 8004dec:	4543      	cmp	r3, r8
 8004dee:	dcee      	bgt.n	8004dce <_printf_float+0x386>
 8004df0:	e74a      	b.n	8004c88 <_printf_float+0x240>
 8004df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df4:	2a01      	cmp	r2, #1
 8004df6:	dc01      	bgt.n	8004dfc <_printf_float+0x3b4>
 8004df8:	07db      	lsls	r3, r3, #31
 8004dfa:	d53a      	bpl.n	8004e72 <_printf_float+0x42a>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4642      	mov	r2, r8
 8004e00:	4631      	mov	r1, r6
 8004e02:	4628      	mov	r0, r5
 8004e04:	47b8      	blx	r7
 8004e06:	3001      	adds	r0, #1
 8004e08:	f43f ae7b 	beq.w	8004b02 <_printf_float+0xba>
 8004e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f108 0801 	add.w	r8, r8, #1
 8004e1c:	f43f ae71 	beq.w	8004b02 <_printf_float+0xba>
 8004e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e22:	2200      	movs	r2, #0
 8004e24:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f7fb fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e32:	b9c8      	cbnz	r0, 8004e68 <_printf_float+0x420>
 8004e34:	4653      	mov	r3, sl
 8004e36:	4642      	mov	r2, r8
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d10e      	bne.n	8004e60 <_printf_float+0x418>
 8004e42:	e65e      	b.n	8004b02 <_printf_float+0xba>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4652      	mov	r2, sl
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f ae57 	beq.w	8004b02 <_printf_float+0xba>
 8004e54:	f108 0801 	add.w	r8, r8, #1
 8004e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	4543      	cmp	r3, r8
 8004e5e:	dcf1      	bgt.n	8004e44 <_printf_float+0x3fc>
 8004e60:	464b      	mov	r3, r9
 8004e62:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e66:	e6de      	b.n	8004c26 <_printf_float+0x1de>
 8004e68:	f04f 0800 	mov.w	r8, #0
 8004e6c:	f104 0a1a 	add.w	sl, r4, #26
 8004e70:	e7f2      	b.n	8004e58 <_printf_float+0x410>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7df      	b.n	8004e36 <_printf_float+0x3ee>
 8004e76:	2301      	movs	r3, #1
 8004e78:	464a      	mov	r2, r9
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae3e 	beq.w	8004b02 <_printf_float+0xba>
 8004e86:	f108 0801 	add.w	r8, r8, #1
 8004e8a:	68e3      	ldr	r3, [r4, #12]
 8004e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	4543      	cmp	r3, r8
 8004e92:	dcf0      	bgt.n	8004e76 <_printf_float+0x42e>
 8004e94:	e6fc      	b.n	8004c90 <_printf_float+0x248>
 8004e96:	f04f 0800 	mov.w	r8, #0
 8004e9a:	f104 0919 	add.w	r9, r4, #25
 8004e9e:	e7f4      	b.n	8004e8a <_printf_float+0x442>
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	f43f ae8b 	beq.w	8004bbc <_printf_float+0x174>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004eac:	ab09      	add	r3, sp, #36	; 0x24
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	ec49 8b10 	vmov	d0, r8, r9
 8004eb4:	6022      	str	r2, [r4, #0]
 8004eb6:	f8cd a004 	str.w	sl, [sp, #4]
 8004eba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7ff fd2e 	bl	8004920 <__cvt>
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	e648      	b.n	8004b5a <_printf_float+0x112>

08004ec8 <_printf_common>:
 8004ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	4691      	mov	r9, r2
 8004ece:	461f      	mov	r7, r3
 8004ed0:	688a      	ldr	r2, [r1, #8]
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	bfb8      	it	lt
 8004edc:	4613      	movlt	r3, r2
 8004ede:	f8c9 3000 	str.w	r3, [r9]
 8004ee2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	460c      	mov	r4, r1
 8004eea:	b112      	cbz	r2, 8004ef2 <_printf_common+0x2a>
 8004eec:	3301      	adds	r3, #1
 8004eee:	f8c9 3000 	str.w	r3, [r9]
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	0699      	lsls	r1, r3, #26
 8004ef6:	bf42      	ittt	mi
 8004ef8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004efc:	3302      	addmi	r3, #2
 8004efe:	f8c9 3000 	strmi.w	r3, [r9]
 8004f02:	6825      	ldr	r5, [r4, #0]
 8004f04:	f015 0506 	ands.w	r5, r5, #6
 8004f08:	d107      	bne.n	8004f1a <_printf_common+0x52>
 8004f0a:	f104 0a19 	add.w	sl, r4, #25
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	f8d9 2000 	ldr.w	r2, [r9]
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	42ab      	cmp	r3, r5
 8004f18:	dc28      	bgt.n	8004f6c <_printf_common+0xa4>
 8004f1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	3300      	adds	r3, #0
 8004f22:	bf18      	it	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	0692      	lsls	r2, r2, #26
 8004f28:	d42d      	bmi.n	8004f86 <_printf_common+0xbe>
 8004f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f2e:	4639      	mov	r1, r7
 8004f30:	4630      	mov	r0, r6
 8004f32:	47c0      	blx	r8
 8004f34:	3001      	adds	r0, #1
 8004f36:	d020      	beq.n	8004f7a <_printf_common+0xb2>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	68e5      	ldr	r5, [r4, #12]
 8004f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f40:	f003 0306 	and.w	r3, r3, #6
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	bf08      	it	eq
 8004f48:	1aad      	subeq	r5, r5, r2
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	bf0c      	ite	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	2500      	movne	r5, #0
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bfc4      	itt	gt
 8004f5a:	1a9b      	subgt	r3, r3, r2
 8004f5c:	18ed      	addgt	r5, r5, r3
 8004f5e:	f04f 0900 	mov.w	r9, #0
 8004f62:	341a      	adds	r4, #26
 8004f64:	454d      	cmp	r5, r9
 8004f66:	d11a      	bne.n	8004f9e <_printf_common+0xd6>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e008      	b.n	8004f7e <_printf_common+0xb6>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4652      	mov	r2, sl
 8004f70:	4639      	mov	r1, r7
 8004f72:	4630      	mov	r0, r6
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d103      	bne.n	8004f82 <_printf_common+0xba>
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f82:	3501      	adds	r5, #1
 8004f84:	e7c3      	b.n	8004f0e <_printf_common+0x46>
 8004f86:	18e1      	adds	r1, r4, r3
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	2030      	movs	r0, #48	; 0x30
 8004f8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f90:	4422      	add	r2, r4
 8004f92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	e7c5      	b.n	8004f2a <_printf_common+0x62>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	47c0      	blx	r8
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d0e6      	beq.n	8004f7a <_printf_common+0xb2>
 8004fac:	f109 0901 	add.w	r9, r9, #1
 8004fb0:	e7d8      	b.n	8004f64 <_printf_common+0x9c>
	...

08004fb4 <_printf_i>:
 8004fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	7e09      	ldrb	r1, [r1, #24]
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	296e      	cmp	r1, #110	; 0x6e
 8004fc4:	4617      	mov	r7, r2
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	4698      	mov	r8, r3
 8004fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fcc:	f000 80b3 	beq.w	8005136 <_printf_i+0x182>
 8004fd0:	d822      	bhi.n	8005018 <_printf_i+0x64>
 8004fd2:	2963      	cmp	r1, #99	; 0x63
 8004fd4:	d036      	beq.n	8005044 <_printf_i+0x90>
 8004fd6:	d80a      	bhi.n	8004fee <_printf_i+0x3a>
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	f000 80b9 	beq.w	8005150 <_printf_i+0x19c>
 8004fde:	2958      	cmp	r1, #88	; 0x58
 8004fe0:	f000 8083 	beq.w	80050ea <_printf_i+0x136>
 8004fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fec:	e032      	b.n	8005054 <_printf_i+0xa0>
 8004fee:	2964      	cmp	r1, #100	; 0x64
 8004ff0:	d001      	beq.n	8004ff6 <_printf_i+0x42>
 8004ff2:	2969      	cmp	r1, #105	; 0x69
 8004ff4:	d1f6      	bne.n	8004fe4 <_printf_i+0x30>
 8004ff6:	6820      	ldr	r0, [r4, #0]
 8004ff8:	6813      	ldr	r3, [r2, #0]
 8004ffa:	0605      	lsls	r5, r0, #24
 8004ffc:	f103 0104 	add.w	r1, r3, #4
 8005000:	d52a      	bpl.n	8005058 <_printf_i+0xa4>
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	da03      	bge.n	8005012 <_printf_i+0x5e>
 800500a:	222d      	movs	r2, #45	; 0x2d
 800500c:	425b      	negs	r3, r3
 800500e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005012:	486f      	ldr	r0, [pc, #444]	; (80051d0 <_printf_i+0x21c>)
 8005014:	220a      	movs	r2, #10
 8005016:	e039      	b.n	800508c <_printf_i+0xd8>
 8005018:	2973      	cmp	r1, #115	; 0x73
 800501a:	f000 809d 	beq.w	8005158 <_printf_i+0x1a4>
 800501e:	d808      	bhi.n	8005032 <_printf_i+0x7e>
 8005020:	296f      	cmp	r1, #111	; 0x6f
 8005022:	d020      	beq.n	8005066 <_printf_i+0xb2>
 8005024:	2970      	cmp	r1, #112	; 0x70
 8005026:	d1dd      	bne.n	8004fe4 <_printf_i+0x30>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	e003      	b.n	800503a <_printf_i+0x86>
 8005032:	2975      	cmp	r1, #117	; 0x75
 8005034:	d017      	beq.n	8005066 <_printf_i+0xb2>
 8005036:	2978      	cmp	r1, #120	; 0x78
 8005038:	d1d4      	bne.n	8004fe4 <_printf_i+0x30>
 800503a:	2378      	movs	r3, #120	; 0x78
 800503c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005040:	4864      	ldr	r0, [pc, #400]	; (80051d4 <_printf_i+0x220>)
 8005042:	e055      	b.n	80050f0 <_printf_i+0x13c>
 8005044:	6813      	ldr	r3, [r2, #0]
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6011      	str	r1, [r2, #0]
 800504c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005054:	2301      	movs	r3, #1
 8005056:	e08c      	b.n	8005172 <_printf_i+0x1be>
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6011      	str	r1, [r2, #0]
 800505c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005060:	bf18      	it	ne
 8005062:	b21b      	sxthne	r3, r3
 8005064:	e7cf      	b.n	8005006 <_printf_i+0x52>
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	6825      	ldr	r5, [r4, #0]
 800506a:	1d18      	adds	r0, r3, #4
 800506c:	6010      	str	r0, [r2, #0]
 800506e:	0628      	lsls	r0, r5, #24
 8005070:	d501      	bpl.n	8005076 <_printf_i+0xc2>
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	e002      	b.n	800507c <_printf_i+0xc8>
 8005076:	0668      	lsls	r0, r5, #25
 8005078:	d5fb      	bpl.n	8005072 <_printf_i+0xbe>
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	4854      	ldr	r0, [pc, #336]	; (80051d0 <_printf_i+0x21c>)
 800507e:	296f      	cmp	r1, #111	; 0x6f
 8005080:	bf14      	ite	ne
 8005082:	220a      	movne	r2, #10
 8005084:	2208      	moveq	r2, #8
 8005086:	2100      	movs	r1, #0
 8005088:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800508c:	6865      	ldr	r5, [r4, #4]
 800508e:	60a5      	str	r5, [r4, #8]
 8005090:	2d00      	cmp	r5, #0
 8005092:	f2c0 8095 	blt.w	80051c0 <_printf_i+0x20c>
 8005096:	6821      	ldr	r1, [r4, #0]
 8005098:	f021 0104 	bic.w	r1, r1, #4
 800509c:	6021      	str	r1, [r4, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d13d      	bne.n	800511e <_printf_i+0x16a>
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	f040 808e 	bne.w	80051c4 <_printf_i+0x210>
 80050a8:	4665      	mov	r5, ip
 80050aa:	2a08      	cmp	r2, #8
 80050ac:	d10b      	bne.n	80050c6 <_printf_i+0x112>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	07db      	lsls	r3, r3, #31
 80050b2:	d508      	bpl.n	80050c6 <_printf_i+0x112>
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bfde      	ittt	le
 80050bc:	2330      	movle	r3, #48	; 0x30
 80050be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050c6:	ebac 0305 	sub.w	r3, ip, r5
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	f8cd 8000 	str.w	r8, [sp]
 80050d0:	463b      	mov	r3, r7
 80050d2:	aa03      	add	r2, sp, #12
 80050d4:	4621      	mov	r1, r4
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7ff fef6 	bl	8004ec8 <_printf_common>
 80050dc:	3001      	adds	r0, #1
 80050de:	d14d      	bne.n	800517c <_printf_i+0x1c8>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e4:	b005      	add	sp, #20
 80050e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050ea:	4839      	ldr	r0, [pc, #228]	; (80051d0 <_printf_i+0x21c>)
 80050ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050f0:	6813      	ldr	r3, [r2, #0]
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	1d1d      	adds	r5, r3, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6015      	str	r5, [r2, #0]
 80050fa:	060a      	lsls	r2, r1, #24
 80050fc:	d50b      	bpl.n	8005116 <_printf_i+0x162>
 80050fe:	07ca      	lsls	r2, r1, #31
 8005100:	bf44      	itt	mi
 8005102:	f041 0120 	orrmi.w	r1, r1, #32
 8005106:	6021      	strmi	r1, [r4, #0]
 8005108:	b91b      	cbnz	r3, 8005112 <_printf_i+0x15e>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	f022 0220 	bic.w	r2, r2, #32
 8005110:	6022      	str	r2, [r4, #0]
 8005112:	2210      	movs	r2, #16
 8005114:	e7b7      	b.n	8005086 <_printf_i+0xd2>
 8005116:	064d      	lsls	r5, r1, #25
 8005118:	bf48      	it	mi
 800511a:	b29b      	uxthmi	r3, r3
 800511c:	e7ef      	b.n	80050fe <_printf_i+0x14a>
 800511e:	4665      	mov	r5, ip
 8005120:	fbb3 f1f2 	udiv	r1, r3, r2
 8005124:	fb02 3311 	mls	r3, r2, r1, r3
 8005128:	5cc3      	ldrb	r3, [r0, r3]
 800512a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800512e:	460b      	mov	r3, r1
 8005130:	2900      	cmp	r1, #0
 8005132:	d1f5      	bne.n	8005120 <_printf_i+0x16c>
 8005134:	e7b9      	b.n	80050aa <_printf_i+0xf6>
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	6825      	ldr	r5, [r4, #0]
 800513a:	6961      	ldr	r1, [r4, #20]
 800513c:	1d18      	adds	r0, r3, #4
 800513e:	6010      	str	r0, [r2, #0]
 8005140:	0628      	lsls	r0, r5, #24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	d501      	bpl.n	800514a <_printf_i+0x196>
 8005146:	6019      	str	r1, [r3, #0]
 8005148:	e002      	b.n	8005150 <_printf_i+0x19c>
 800514a:	066a      	lsls	r2, r5, #25
 800514c:	d5fb      	bpl.n	8005146 <_printf_i+0x192>
 800514e:	8019      	strh	r1, [r3, #0]
 8005150:	2300      	movs	r3, #0
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	4665      	mov	r5, ip
 8005156:	e7b9      	b.n	80050cc <_printf_i+0x118>
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	1d19      	adds	r1, r3, #4
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	681d      	ldr	r5, [r3, #0]
 8005160:	6862      	ldr	r2, [r4, #4]
 8005162:	2100      	movs	r1, #0
 8005164:	4628      	mov	r0, r5
 8005166:	f7fb f83b 	bl	80001e0 <memchr>
 800516a:	b108      	cbz	r0, 8005170 <_printf_i+0x1bc>
 800516c:	1b40      	subs	r0, r0, r5
 800516e:	6060      	str	r0, [r4, #4]
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2300      	movs	r3, #0
 8005176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517a:	e7a7      	b.n	80050cc <_printf_i+0x118>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	462a      	mov	r2, r5
 8005180:	4639      	mov	r1, r7
 8005182:	4630      	mov	r0, r6
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d0aa      	beq.n	80050e0 <_printf_i+0x12c>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	079b      	lsls	r3, r3, #30
 800518e:	d413      	bmi.n	80051b8 <_printf_i+0x204>
 8005190:	68e0      	ldr	r0, [r4, #12]
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	4298      	cmp	r0, r3
 8005196:	bfb8      	it	lt
 8005198:	4618      	movlt	r0, r3
 800519a:	e7a3      	b.n	80050e4 <_printf_i+0x130>
 800519c:	2301      	movs	r3, #1
 800519e:	464a      	mov	r2, r9
 80051a0:	4639      	mov	r1, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	47c0      	blx	r8
 80051a6:	3001      	adds	r0, #1
 80051a8:	d09a      	beq.n	80050e0 <_printf_i+0x12c>
 80051aa:	3501      	adds	r5, #1
 80051ac:	68e3      	ldr	r3, [r4, #12]
 80051ae:	9a03      	ldr	r2, [sp, #12]
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	dcf2      	bgt.n	800519c <_printf_i+0x1e8>
 80051b6:	e7eb      	b.n	8005190 <_printf_i+0x1dc>
 80051b8:	2500      	movs	r5, #0
 80051ba:	f104 0919 	add.w	r9, r4, #25
 80051be:	e7f5      	b.n	80051ac <_printf_i+0x1f8>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ac      	bne.n	800511e <_printf_i+0x16a>
 80051c4:	7803      	ldrb	r3, [r0, #0]
 80051c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ce:	e76c      	b.n	80050aa <_printf_i+0xf6>
 80051d0:	080101d2 	.word	0x080101d2
 80051d4:	080101e3 	.word	0x080101e3

080051d8 <_scanf_float>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	469a      	mov	sl, r3
 80051de:	688b      	ldr	r3, [r1, #8]
 80051e0:	4616      	mov	r6, r2
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051e8:	b087      	sub	sp, #28
 80051ea:	bf83      	ittte	hi
 80051ec:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80051f0:	189b      	addhi	r3, r3, r2
 80051f2:	9301      	strhi	r3, [sp, #4]
 80051f4:	2300      	movls	r3, #0
 80051f6:	bf86      	itte	hi
 80051f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051fc:	608b      	strhi	r3, [r1, #8]
 80051fe:	9301      	strls	r3, [sp, #4]
 8005200:	680b      	ldr	r3, [r1, #0]
 8005202:	4688      	mov	r8, r1
 8005204:	f04f 0b00 	mov.w	fp, #0
 8005208:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800520c:	f848 3b1c 	str.w	r3, [r8], #28
 8005210:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005214:	4607      	mov	r7, r0
 8005216:	460c      	mov	r4, r1
 8005218:	4645      	mov	r5, r8
 800521a:	465a      	mov	r2, fp
 800521c:	46d9      	mov	r9, fp
 800521e:	f8cd b008 	str.w	fp, [sp, #8]
 8005222:	68a1      	ldr	r1, [r4, #8]
 8005224:	b181      	cbz	r1, 8005248 <_scanf_float+0x70>
 8005226:	6833      	ldr	r3, [r6, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b49      	cmp	r3, #73	; 0x49
 800522c:	d071      	beq.n	8005312 <_scanf_float+0x13a>
 800522e:	d84d      	bhi.n	80052cc <_scanf_float+0xf4>
 8005230:	2b39      	cmp	r3, #57	; 0x39
 8005232:	d840      	bhi.n	80052b6 <_scanf_float+0xde>
 8005234:	2b31      	cmp	r3, #49	; 0x31
 8005236:	f080 8088 	bcs.w	800534a <_scanf_float+0x172>
 800523a:	2b2d      	cmp	r3, #45	; 0x2d
 800523c:	f000 8090 	beq.w	8005360 <_scanf_float+0x188>
 8005240:	d815      	bhi.n	800526e <_scanf_float+0x96>
 8005242:	2b2b      	cmp	r3, #43	; 0x2b
 8005244:	f000 808c 	beq.w	8005360 <_scanf_float+0x188>
 8005248:	f1b9 0f00 	cmp.w	r9, #0
 800524c:	d003      	beq.n	8005256 <_scanf_float+0x7e>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	3a01      	subs	r2, #1
 8005258:	2a01      	cmp	r2, #1
 800525a:	f200 80ea 	bhi.w	8005432 <_scanf_float+0x25a>
 800525e:	4545      	cmp	r5, r8
 8005260:	f200 80dc 	bhi.w	800541c <_scanf_float+0x244>
 8005264:	2601      	movs	r6, #1
 8005266:	4630      	mov	r0, r6
 8005268:	b007      	add	sp, #28
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	2b2e      	cmp	r3, #46	; 0x2e
 8005270:	f000 809f 	beq.w	80053b2 <_scanf_float+0x1da>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d1e7      	bne.n	8005248 <_scanf_float+0x70>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800527e:	d064      	beq.n	800534a <_scanf_float+0x172>
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005286:	6020      	str	r0, [r4, #0]
 8005288:	f109 0901 	add.w	r9, r9, #1
 800528c:	b11b      	cbz	r3, 8005296 <_scanf_float+0xbe>
 800528e:	3b01      	subs	r3, #1
 8005290:	3101      	adds	r1, #1
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	60a1      	str	r1, [r4, #8]
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	3b01      	subs	r3, #1
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	3301      	adds	r3, #1
 80052a0:	6123      	str	r3, [r4, #16]
 80052a2:	6873      	ldr	r3, [r6, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	6073      	str	r3, [r6, #4]
 80052aa:	f340 80ac 	ble.w	8005406 <_scanf_float+0x22e>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	6033      	str	r3, [r6, #0]
 80052b4:	e7b5      	b.n	8005222 <_scanf_float+0x4a>
 80052b6:	2b45      	cmp	r3, #69	; 0x45
 80052b8:	f000 8085 	beq.w	80053c6 <_scanf_float+0x1ee>
 80052bc:	2b46      	cmp	r3, #70	; 0x46
 80052be:	d06a      	beq.n	8005396 <_scanf_float+0x1be>
 80052c0:	2b41      	cmp	r3, #65	; 0x41
 80052c2:	d1c1      	bne.n	8005248 <_scanf_float+0x70>
 80052c4:	2a01      	cmp	r2, #1
 80052c6:	d1bf      	bne.n	8005248 <_scanf_float+0x70>
 80052c8:	2202      	movs	r2, #2
 80052ca:	e046      	b.n	800535a <_scanf_float+0x182>
 80052cc:	2b65      	cmp	r3, #101	; 0x65
 80052ce:	d07a      	beq.n	80053c6 <_scanf_float+0x1ee>
 80052d0:	d818      	bhi.n	8005304 <_scanf_float+0x12c>
 80052d2:	2b54      	cmp	r3, #84	; 0x54
 80052d4:	d066      	beq.n	80053a4 <_scanf_float+0x1cc>
 80052d6:	d811      	bhi.n	80052fc <_scanf_float+0x124>
 80052d8:	2b4e      	cmp	r3, #78	; 0x4e
 80052da:	d1b5      	bne.n	8005248 <_scanf_float+0x70>
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d146      	bne.n	800536e <_scanf_float+0x196>
 80052e0:	f1b9 0f00 	cmp.w	r9, #0
 80052e4:	d145      	bne.n	8005372 <_scanf_float+0x19a>
 80052e6:	6821      	ldr	r1, [r4, #0]
 80052e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80052ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80052f0:	d13f      	bne.n	8005372 <_scanf_float+0x19a>
 80052f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80052f6:	6021      	str	r1, [r4, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	e02e      	b.n	800535a <_scanf_float+0x182>
 80052fc:	2b59      	cmp	r3, #89	; 0x59
 80052fe:	d01e      	beq.n	800533e <_scanf_float+0x166>
 8005300:	2b61      	cmp	r3, #97	; 0x61
 8005302:	e7de      	b.n	80052c2 <_scanf_float+0xea>
 8005304:	2b6e      	cmp	r3, #110	; 0x6e
 8005306:	d0e9      	beq.n	80052dc <_scanf_float+0x104>
 8005308:	d815      	bhi.n	8005336 <_scanf_float+0x15e>
 800530a:	2b66      	cmp	r3, #102	; 0x66
 800530c:	d043      	beq.n	8005396 <_scanf_float+0x1be>
 800530e:	2b69      	cmp	r3, #105	; 0x69
 8005310:	d19a      	bne.n	8005248 <_scanf_float+0x70>
 8005312:	f1bb 0f00 	cmp.w	fp, #0
 8005316:	d138      	bne.n	800538a <_scanf_float+0x1b2>
 8005318:	f1b9 0f00 	cmp.w	r9, #0
 800531c:	d197      	bne.n	800524e <_scanf_float+0x76>
 800531e:	6821      	ldr	r1, [r4, #0]
 8005320:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005324:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005328:	d195      	bne.n	8005256 <_scanf_float+0x7e>
 800532a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800532e:	6021      	str	r1, [r4, #0]
 8005330:	f04f 0b01 	mov.w	fp, #1
 8005334:	e011      	b.n	800535a <_scanf_float+0x182>
 8005336:	2b74      	cmp	r3, #116	; 0x74
 8005338:	d034      	beq.n	80053a4 <_scanf_float+0x1cc>
 800533a:	2b79      	cmp	r3, #121	; 0x79
 800533c:	d184      	bne.n	8005248 <_scanf_float+0x70>
 800533e:	f1bb 0f07 	cmp.w	fp, #7
 8005342:	d181      	bne.n	8005248 <_scanf_float+0x70>
 8005344:	f04f 0b08 	mov.w	fp, #8
 8005348:	e007      	b.n	800535a <_scanf_float+0x182>
 800534a:	eb12 0f0b 	cmn.w	r2, fp
 800534e:	f47f af7b 	bne.w	8005248 <_scanf_float+0x70>
 8005352:	6821      	ldr	r1, [r4, #0]
 8005354:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005358:	6021      	str	r1, [r4, #0]
 800535a:	702b      	strb	r3, [r5, #0]
 800535c:	3501      	adds	r5, #1
 800535e:	e79a      	b.n	8005296 <_scanf_float+0xbe>
 8005360:	6821      	ldr	r1, [r4, #0]
 8005362:	0608      	lsls	r0, r1, #24
 8005364:	f57f af70 	bpl.w	8005248 <_scanf_float+0x70>
 8005368:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800536c:	e7f4      	b.n	8005358 <_scanf_float+0x180>
 800536e:	2a02      	cmp	r2, #2
 8005370:	d047      	beq.n	8005402 <_scanf_float+0x22a>
 8005372:	f1bb 0f01 	cmp.w	fp, #1
 8005376:	d003      	beq.n	8005380 <_scanf_float+0x1a8>
 8005378:	f1bb 0f04 	cmp.w	fp, #4
 800537c:	f47f af64 	bne.w	8005248 <_scanf_float+0x70>
 8005380:	f10b 0b01 	add.w	fp, fp, #1
 8005384:	fa5f fb8b 	uxtb.w	fp, fp
 8005388:	e7e7      	b.n	800535a <_scanf_float+0x182>
 800538a:	f1bb 0f03 	cmp.w	fp, #3
 800538e:	d0f7      	beq.n	8005380 <_scanf_float+0x1a8>
 8005390:	f1bb 0f05 	cmp.w	fp, #5
 8005394:	e7f2      	b.n	800537c <_scanf_float+0x1a4>
 8005396:	f1bb 0f02 	cmp.w	fp, #2
 800539a:	f47f af55 	bne.w	8005248 <_scanf_float+0x70>
 800539e:	f04f 0b03 	mov.w	fp, #3
 80053a2:	e7da      	b.n	800535a <_scanf_float+0x182>
 80053a4:	f1bb 0f06 	cmp.w	fp, #6
 80053a8:	f47f af4e 	bne.w	8005248 <_scanf_float+0x70>
 80053ac:	f04f 0b07 	mov.w	fp, #7
 80053b0:	e7d3      	b.n	800535a <_scanf_float+0x182>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	0588      	lsls	r0, r1, #22
 80053b6:	f57f af47 	bpl.w	8005248 <_scanf_float+0x70>
 80053ba:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80053be:	6021      	str	r1, [r4, #0]
 80053c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80053c4:	e7c9      	b.n	800535a <_scanf_float+0x182>
 80053c6:	6821      	ldr	r1, [r4, #0]
 80053c8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80053cc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80053d0:	d006      	beq.n	80053e0 <_scanf_float+0x208>
 80053d2:	0548      	lsls	r0, r1, #21
 80053d4:	f57f af38 	bpl.w	8005248 <_scanf_float+0x70>
 80053d8:	f1b9 0f00 	cmp.w	r9, #0
 80053dc:	f43f af3b 	beq.w	8005256 <_scanf_float+0x7e>
 80053e0:	0588      	lsls	r0, r1, #22
 80053e2:	bf58      	it	pl
 80053e4:	9802      	ldrpl	r0, [sp, #8]
 80053e6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80053ea:	bf58      	it	pl
 80053ec:	eba9 0000 	subpl.w	r0, r9, r0
 80053f0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80053f4:	bf58      	it	pl
 80053f6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80053fa:	6021      	str	r1, [r4, #0]
 80053fc:	f04f 0900 	mov.w	r9, #0
 8005400:	e7ab      	b.n	800535a <_scanf_float+0x182>
 8005402:	2203      	movs	r2, #3
 8005404:	e7a9      	b.n	800535a <_scanf_float+0x182>
 8005406:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800540a:	9205      	str	r2, [sp, #20]
 800540c:	4631      	mov	r1, r6
 800540e:	4638      	mov	r0, r7
 8005410:	4798      	blx	r3
 8005412:	9a05      	ldr	r2, [sp, #20]
 8005414:	2800      	cmp	r0, #0
 8005416:	f43f af04 	beq.w	8005222 <_scanf_float+0x4a>
 800541a:	e715      	b.n	8005248 <_scanf_float+0x70>
 800541c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005420:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005424:	4632      	mov	r2, r6
 8005426:	4638      	mov	r0, r7
 8005428:	4798      	blx	r3
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	3b01      	subs	r3, #1
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	e715      	b.n	800525e <_scanf_float+0x86>
 8005432:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005436:	2b06      	cmp	r3, #6
 8005438:	d80a      	bhi.n	8005450 <_scanf_float+0x278>
 800543a:	f1bb 0f02 	cmp.w	fp, #2
 800543e:	d968      	bls.n	8005512 <_scanf_float+0x33a>
 8005440:	f1ab 0b03 	sub.w	fp, fp, #3
 8005444:	fa5f fb8b 	uxtb.w	fp, fp
 8005448:	eba5 0b0b 	sub.w	fp, r5, fp
 800544c:	455d      	cmp	r5, fp
 800544e:	d14b      	bne.n	80054e8 <_scanf_float+0x310>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	05da      	lsls	r2, r3, #23
 8005454:	d51f      	bpl.n	8005496 <_scanf_float+0x2be>
 8005456:	055b      	lsls	r3, r3, #21
 8005458:	d468      	bmi.n	800552c <_scanf_float+0x354>
 800545a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	2965      	cmp	r1, #101	; 0x65
 8005462:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005466:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	d00d      	beq.n	800548a <_scanf_float+0x2b2>
 800546e:	2945      	cmp	r1, #69	; 0x45
 8005470:	d00b      	beq.n	800548a <_scanf_float+0x2b2>
 8005472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005476:	4632      	mov	r2, r6
 8005478:	4638      	mov	r0, r7
 800547a:	4798      	blx	r3
 800547c:	6923      	ldr	r3, [r4, #16]
 800547e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005482:	3b01      	subs	r3, #1
 8005484:	f1a5 0b02 	sub.w	fp, r5, #2
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800548e:	4632      	mov	r2, r6
 8005490:	4638      	mov	r0, r7
 8005492:	4798      	blx	r3
 8005494:	465d      	mov	r5, fp
 8005496:	6826      	ldr	r6, [r4, #0]
 8005498:	f016 0610 	ands.w	r6, r6, #16
 800549c:	d17a      	bne.n	8005594 <_scanf_float+0x3bc>
 800549e:	702e      	strb	r6, [r5, #0]
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054aa:	d142      	bne.n	8005532 <_scanf_float+0x35a>
 80054ac:	9b02      	ldr	r3, [sp, #8]
 80054ae:	eba9 0303 	sub.w	r3, r9, r3
 80054b2:	425a      	negs	r2, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d149      	bne.n	800554c <_scanf_float+0x374>
 80054b8:	2200      	movs	r2, #0
 80054ba:	4641      	mov	r1, r8
 80054bc:	4638      	mov	r0, r7
 80054be:	f000 fea3 	bl	8006208 <_strtod_r>
 80054c2:	6825      	ldr	r5, [r4, #0]
 80054c4:	f8da 3000 	ldr.w	r3, [sl]
 80054c8:	f015 0f02 	tst.w	r5, #2
 80054cc:	f103 0204 	add.w	r2, r3, #4
 80054d0:	ec59 8b10 	vmov	r8, r9, d0
 80054d4:	f8ca 2000 	str.w	r2, [sl]
 80054d8:	d043      	beq.n	8005562 <_scanf_float+0x38a>
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	e9c3 8900 	strd	r8, r9, [r3]
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60e3      	str	r3, [r4, #12]
 80054e6:	e6be      	b.n	8005266 <_scanf_float+0x8e>
 80054e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80054f0:	4632      	mov	r2, r6
 80054f2:	4638      	mov	r0, r7
 80054f4:	4798      	blx	r3
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	e7a6      	b.n	800544c <_scanf_float+0x274>
 80054fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005502:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005506:	4632      	mov	r2, r6
 8005508:	4638      	mov	r0, r7
 800550a:	4798      	blx	r3
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	3b01      	subs	r3, #1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	4545      	cmp	r5, r8
 8005514:	d8f3      	bhi.n	80054fe <_scanf_float+0x326>
 8005516:	e6a5      	b.n	8005264 <_scanf_float+0x8c>
 8005518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800551c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005520:	4632      	mov	r2, r6
 8005522:	4638      	mov	r0, r7
 8005524:	4798      	blx	r3
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	3b01      	subs	r3, #1
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	4545      	cmp	r5, r8
 800552e:	d8f3      	bhi.n	8005518 <_scanf_float+0x340>
 8005530:	e698      	b.n	8005264 <_scanf_float+0x8c>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0bf      	beq.n	80054b8 <_scanf_float+0x2e0>
 8005538:	9904      	ldr	r1, [sp, #16]
 800553a:	230a      	movs	r3, #10
 800553c:	4632      	mov	r2, r6
 800553e:	3101      	adds	r1, #1
 8005540:	4638      	mov	r0, r7
 8005542:	f000 ff01 	bl	8006348 <_strtol_r>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	9d04      	ldr	r5, [sp, #16]
 800554a:	1ac2      	subs	r2, r0, r3
 800554c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005550:	429d      	cmp	r5, r3
 8005552:	bf28      	it	cs
 8005554:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005558:	490f      	ldr	r1, [pc, #60]	; (8005598 <_scanf_float+0x3c0>)
 800555a:	4628      	mov	r0, r5
 800555c:	f000 f824 	bl	80055a8 <siprintf>
 8005560:	e7aa      	b.n	80054b8 <_scanf_float+0x2e0>
 8005562:	f015 0504 	ands.w	r5, r5, #4
 8005566:	d1b8      	bne.n	80054da <_scanf_float+0x302>
 8005568:	681f      	ldr	r7, [r3, #0]
 800556a:	ee10 2a10 	vmov	r2, s0
 800556e:	464b      	mov	r3, r9
 8005570:	ee10 0a10 	vmov	r0, s0
 8005574:	4649      	mov	r1, r9
 8005576:	f7fb fad9 	bl	8000b2c <__aeabi_dcmpun>
 800557a:	b128      	cbz	r0, 8005588 <_scanf_float+0x3b0>
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f80d 	bl	800559c <nanf>
 8005582:	ed87 0a00 	vstr	s0, [r7]
 8005586:	e7ab      	b.n	80054e0 <_scanf_float+0x308>
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fb fb2c 	bl	8000be8 <__aeabi_d2f>
 8005590:	6038      	str	r0, [r7, #0]
 8005592:	e7a5      	b.n	80054e0 <_scanf_float+0x308>
 8005594:	2600      	movs	r6, #0
 8005596:	e666      	b.n	8005266 <_scanf_float+0x8e>
 8005598:	080101f4 	.word	0x080101f4

0800559c <nanf>:
 800559c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055a4 <nanf+0x8>
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	7fc00000 	.word	0x7fc00000

080055a8 <siprintf>:
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	b500      	push	{lr}
 80055ac:	b09c      	sub	sp, #112	; 0x70
 80055ae:	ab1d      	add	r3, sp, #116	; 0x74
 80055b0:	9002      	str	r0, [sp, #8]
 80055b2:	9006      	str	r0, [sp, #24]
 80055b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055b8:	4809      	ldr	r0, [pc, #36]	; (80055e0 <siprintf+0x38>)
 80055ba:	9107      	str	r1, [sp, #28]
 80055bc:	9104      	str	r1, [sp, #16]
 80055be:	4909      	ldr	r1, [pc, #36]	; (80055e4 <siprintf+0x3c>)
 80055c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c4:	9105      	str	r1, [sp, #20]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	a902      	add	r1, sp, #8
 80055cc:	f002 fd82 	bl	80080d4 <_svfiprintf_r>
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	b01c      	add	sp, #112	; 0x70
 80055d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055dc:	b003      	add	sp, #12
 80055de:	4770      	bx	lr
 80055e0:	20000014 	.word	0x20000014
 80055e4:	ffff0208 	.word	0xffff0208

080055e8 <sulp>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4604      	mov	r4, r0
 80055ec:	460d      	mov	r5, r1
 80055ee:	ec45 4b10 	vmov	d0, r4, r5
 80055f2:	4616      	mov	r6, r2
 80055f4:	f002 fb2a 	bl	8007c4c <__ulp>
 80055f8:	ec51 0b10 	vmov	r0, r1, d0
 80055fc:	b17e      	cbz	r6, 800561e <sulp+0x36>
 80055fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005602:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005606:	2b00      	cmp	r3, #0
 8005608:	dd09      	ble.n	800561e <sulp+0x36>
 800560a:	051b      	lsls	r3, r3, #20
 800560c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005610:	2400      	movs	r4, #0
 8005612:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005616:	4622      	mov	r2, r4
 8005618:	462b      	mov	r3, r5
 800561a:	f7fa ffed 	bl	80005f8 <__aeabi_dmul>
 800561e:	bd70      	pop	{r4, r5, r6, pc}

08005620 <_strtod_l>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	461f      	mov	r7, r3
 8005626:	b0a1      	sub	sp, #132	; 0x84
 8005628:	2300      	movs	r3, #0
 800562a:	4681      	mov	r9, r0
 800562c:	4638      	mov	r0, r7
 800562e:	460e      	mov	r6, r1
 8005630:	9217      	str	r2, [sp, #92]	; 0x5c
 8005632:	931c      	str	r3, [sp, #112]	; 0x70
 8005634:	f002 f809 	bl	800764a <__localeconv_l>
 8005638:	4680      	mov	r8, r0
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	f7fa fdc8 	bl	80001d0 <strlen>
 8005640:	f04f 0a00 	mov.w	sl, #0
 8005644:	4604      	mov	r4, r0
 8005646:	f04f 0b00 	mov.w	fp, #0
 800564a:	961b      	str	r6, [sp, #108]	; 0x6c
 800564c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	2a0d      	cmp	r2, #13
 8005652:	d832      	bhi.n	80056ba <_strtod_l+0x9a>
 8005654:	2a09      	cmp	r2, #9
 8005656:	d236      	bcs.n	80056c6 <_strtod_l+0xa6>
 8005658:	2a00      	cmp	r2, #0
 800565a:	d03e      	beq.n	80056da <_strtod_l+0xba>
 800565c:	2300      	movs	r3, #0
 800565e:	930d      	str	r3, [sp, #52]	; 0x34
 8005660:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005662:	782b      	ldrb	r3, [r5, #0]
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	f040 80ac 	bne.w	80057c2 <_strtod_l+0x1a2>
 800566a:	786b      	ldrb	r3, [r5, #1]
 800566c:	2b58      	cmp	r3, #88	; 0x58
 800566e:	d001      	beq.n	8005674 <_strtod_l+0x54>
 8005670:	2b78      	cmp	r3, #120	; 0x78
 8005672:	d167      	bne.n	8005744 <_strtod_l+0x124>
 8005674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	ab1c      	add	r3, sp, #112	; 0x70
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	9702      	str	r7, [sp, #8]
 800567e:	ab1d      	add	r3, sp, #116	; 0x74
 8005680:	4a88      	ldr	r2, [pc, #544]	; (80058a4 <_strtod_l+0x284>)
 8005682:	a91b      	add	r1, sp, #108	; 0x6c
 8005684:	4648      	mov	r0, r9
 8005686:	f001 fd06 	bl	8007096 <__gethex>
 800568a:	f010 0407 	ands.w	r4, r0, #7
 800568e:	4606      	mov	r6, r0
 8005690:	d005      	beq.n	800569e <_strtod_l+0x7e>
 8005692:	2c06      	cmp	r4, #6
 8005694:	d12b      	bne.n	80056ee <_strtod_l+0xce>
 8005696:	3501      	adds	r5, #1
 8005698:	2300      	movs	r3, #0
 800569a:	951b      	str	r5, [sp, #108]	; 0x6c
 800569c:	930d      	str	r3, [sp, #52]	; 0x34
 800569e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 859a 	bne.w	80061da <_strtod_l+0xbba>
 80056a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056a8:	b1e3      	cbz	r3, 80056e4 <_strtod_l+0xc4>
 80056aa:	4652      	mov	r2, sl
 80056ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056b0:	ec43 2b10 	vmov	d0, r2, r3
 80056b4:	b021      	add	sp, #132	; 0x84
 80056b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ba:	2a2b      	cmp	r2, #43	; 0x2b
 80056bc:	d015      	beq.n	80056ea <_strtod_l+0xca>
 80056be:	2a2d      	cmp	r2, #45	; 0x2d
 80056c0:	d004      	beq.n	80056cc <_strtod_l+0xac>
 80056c2:	2a20      	cmp	r2, #32
 80056c4:	d1ca      	bne.n	800565c <_strtod_l+0x3c>
 80056c6:	3301      	adds	r3, #1
 80056c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80056ca:	e7bf      	b.n	800564c <_strtod_l+0x2c>
 80056cc:	2201      	movs	r2, #1
 80056ce:	920d      	str	r2, [sp, #52]	; 0x34
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1c2      	bne.n	8005660 <_strtod_l+0x40>
 80056da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8579 	bne.w	80061d6 <_strtod_l+0xbb6>
 80056e4:	4652      	mov	r2, sl
 80056e6:	465b      	mov	r3, fp
 80056e8:	e7e2      	b.n	80056b0 <_strtod_l+0x90>
 80056ea:	2200      	movs	r2, #0
 80056ec:	e7ef      	b.n	80056ce <_strtod_l+0xae>
 80056ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056f0:	b13a      	cbz	r2, 8005702 <_strtod_l+0xe2>
 80056f2:	2135      	movs	r1, #53	; 0x35
 80056f4:	a81e      	add	r0, sp, #120	; 0x78
 80056f6:	f002 fba1 	bl	8007e3c <__copybits>
 80056fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056fc:	4648      	mov	r0, r9
 80056fe:	f002 f80e 	bl	800771e <_Bfree>
 8005702:	3c01      	subs	r4, #1
 8005704:	2c04      	cmp	r4, #4
 8005706:	d806      	bhi.n	8005716 <_strtod_l+0xf6>
 8005708:	e8df f004 	tbb	[pc, r4]
 800570c:	1714030a 	.word	0x1714030a
 8005710:	0a          	.byte	0x0a
 8005711:	00          	.byte	0x00
 8005712:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005716:	0730      	lsls	r0, r6, #28
 8005718:	d5c1      	bpl.n	800569e <_strtod_l+0x7e>
 800571a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800571e:	e7be      	b.n	800569e <_strtod_l+0x7e>
 8005720:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005724:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005726:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800572a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800572e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005732:	e7f0      	b.n	8005716 <_strtod_l+0xf6>
 8005734:	f8df b170 	ldr.w	fp, [pc, #368]	; 80058a8 <_strtod_l+0x288>
 8005738:	e7ed      	b.n	8005716 <_strtod_l+0xf6>
 800573a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800573e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005742:	e7e8      	b.n	8005716 <_strtod_l+0xf6>
 8005744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	921b      	str	r2, [sp, #108]	; 0x6c
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d0f9      	beq.n	8005744 <_strtod_l+0x124>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0a4      	beq.n	800569e <_strtod_l+0x7e>
 8005754:	2301      	movs	r3, #1
 8005756:	2500      	movs	r5, #0
 8005758:	9306      	str	r3, [sp, #24]
 800575a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800575c:	9308      	str	r3, [sp, #32]
 800575e:	9507      	str	r5, [sp, #28]
 8005760:	9505      	str	r5, [sp, #20]
 8005762:	220a      	movs	r2, #10
 8005764:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005766:	7807      	ldrb	r7, [r0, #0]
 8005768:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800576c:	b2d9      	uxtb	r1, r3
 800576e:	2909      	cmp	r1, #9
 8005770:	d929      	bls.n	80057c6 <_strtod_l+0x1a6>
 8005772:	4622      	mov	r2, r4
 8005774:	f8d8 1000 	ldr.w	r1, [r8]
 8005778:	f002 fdb4 	bl	80082e4 <strncmp>
 800577c:	2800      	cmp	r0, #0
 800577e:	d031      	beq.n	80057e4 <_strtod_l+0x1c4>
 8005780:	2000      	movs	r0, #0
 8005782:	9c05      	ldr	r4, [sp, #20]
 8005784:	9004      	str	r0, [sp, #16]
 8005786:	463b      	mov	r3, r7
 8005788:	4602      	mov	r2, r0
 800578a:	2b65      	cmp	r3, #101	; 0x65
 800578c:	d001      	beq.n	8005792 <_strtod_l+0x172>
 800578e:	2b45      	cmp	r3, #69	; 0x45
 8005790:	d114      	bne.n	80057bc <_strtod_l+0x19c>
 8005792:	b924      	cbnz	r4, 800579e <_strtod_l+0x17e>
 8005794:	b910      	cbnz	r0, 800579c <_strtod_l+0x17c>
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d09e      	beq.n	80056da <_strtod_l+0xba>
 800579c:	2400      	movs	r4, #0
 800579e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80057a0:	1c73      	adds	r3, r6, #1
 80057a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80057a4:	7873      	ldrb	r3, [r6, #1]
 80057a6:	2b2b      	cmp	r3, #43	; 0x2b
 80057a8:	d078      	beq.n	800589c <_strtod_l+0x27c>
 80057aa:	2b2d      	cmp	r3, #45	; 0x2d
 80057ac:	d070      	beq.n	8005890 <_strtod_l+0x270>
 80057ae:	f04f 0c00 	mov.w	ip, #0
 80057b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80057b6:	2f09      	cmp	r7, #9
 80057b8:	d97c      	bls.n	80058b4 <_strtod_l+0x294>
 80057ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80057bc:	f04f 0e00 	mov.w	lr, #0
 80057c0:	e09a      	b.n	80058f8 <_strtod_l+0x2d8>
 80057c2:	2300      	movs	r3, #0
 80057c4:	e7c7      	b.n	8005756 <_strtod_l+0x136>
 80057c6:	9905      	ldr	r1, [sp, #20]
 80057c8:	2908      	cmp	r1, #8
 80057ca:	bfdd      	ittte	le
 80057cc:	9907      	ldrle	r1, [sp, #28]
 80057ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80057d2:	9307      	strle	r3, [sp, #28]
 80057d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	3001      	adds	r0, #1
 80057dc:	3301      	adds	r3, #1
 80057de:	9305      	str	r3, [sp, #20]
 80057e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80057e2:	e7bf      	b.n	8005764 <_strtod_l+0x144>
 80057e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057e6:	191a      	adds	r2, r3, r4
 80057e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80057ea:	9a05      	ldr	r2, [sp, #20]
 80057ec:	5d1b      	ldrb	r3, [r3, r4]
 80057ee:	2a00      	cmp	r2, #0
 80057f0:	d037      	beq.n	8005862 <_strtod_l+0x242>
 80057f2:	9c05      	ldr	r4, [sp, #20]
 80057f4:	4602      	mov	r2, r0
 80057f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80057fa:	2909      	cmp	r1, #9
 80057fc:	d913      	bls.n	8005826 <_strtod_l+0x206>
 80057fe:	2101      	movs	r1, #1
 8005800:	9104      	str	r1, [sp, #16]
 8005802:	e7c2      	b.n	800578a <_strtod_l+0x16a>
 8005804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	921b      	str	r2, [sp, #108]	; 0x6c
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	3001      	adds	r0, #1
 800580e:	2b30      	cmp	r3, #48	; 0x30
 8005810:	d0f8      	beq.n	8005804 <_strtod_l+0x1e4>
 8005812:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005816:	2a08      	cmp	r2, #8
 8005818:	f200 84e4 	bhi.w	80061e4 <_strtod_l+0xbc4>
 800581c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800581e:	9208      	str	r2, [sp, #32]
 8005820:	4602      	mov	r2, r0
 8005822:	2000      	movs	r0, #0
 8005824:	4604      	mov	r4, r0
 8005826:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800582a:	f100 0101 	add.w	r1, r0, #1
 800582e:	d012      	beq.n	8005856 <_strtod_l+0x236>
 8005830:	440a      	add	r2, r1
 8005832:	eb00 0c04 	add.w	ip, r0, r4
 8005836:	4621      	mov	r1, r4
 8005838:	270a      	movs	r7, #10
 800583a:	458c      	cmp	ip, r1
 800583c:	d113      	bne.n	8005866 <_strtod_l+0x246>
 800583e:	1821      	adds	r1, r4, r0
 8005840:	2908      	cmp	r1, #8
 8005842:	f104 0401 	add.w	r4, r4, #1
 8005846:	4404      	add	r4, r0
 8005848:	dc19      	bgt.n	800587e <_strtod_l+0x25e>
 800584a:	9b07      	ldr	r3, [sp, #28]
 800584c:	210a      	movs	r1, #10
 800584e:	fb01 e303 	mla	r3, r1, r3, lr
 8005852:	9307      	str	r3, [sp, #28]
 8005854:	2100      	movs	r1, #0
 8005856:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005858:	1c58      	adds	r0, r3, #1
 800585a:	901b      	str	r0, [sp, #108]	; 0x6c
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	4608      	mov	r0, r1
 8005860:	e7c9      	b.n	80057f6 <_strtod_l+0x1d6>
 8005862:	9805      	ldr	r0, [sp, #20]
 8005864:	e7d3      	b.n	800580e <_strtod_l+0x1ee>
 8005866:	2908      	cmp	r1, #8
 8005868:	f101 0101 	add.w	r1, r1, #1
 800586c:	dc03      	bgt.n	8005876 <_strtod_l+0x256>
 800586e:	9b07      	ldr	r3, [sp, #28]
 8005870:	437b      	muls	r3, r7
 8005872:	9307      	str	r3, [sp, #28]
 8005874:	e7e1      	b.n	800583a <_strtod_l+0x21a>
 8005876:	2910      	cmp	r1, #16
 8005878:	bfd8      	it	le
 800587a:	437d      	mulle	r5, r7
 800587c:	e7dd      	b.n	800583a <_strtod_l+0x21a>
 800587e:	2c10      	cmp	r4, #16
 8005880:	bfdc      	itt	le
 8005882:	210a      	movle	r1, #10
 8005884:	fb01 e505 	mlale	r5, r1, r5, lr
 8005888:	e7e4      	b.n	8005854 <_strtod_l+0x234>
 800588a:	2301      	movs	r3, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	e781      	b.n	8005794 <_strtod_l+0x174>
 8005890:	f04f 0c01 	mov.w	ip, #1
 8005894:	1cb3      	adds	r3, r6, #2
 8005896:	931b      	str	r3, [sp, #108]	; 0x6c
 8005898:	78b3      	ldrb	r3, [r6, #2]
 800589a:	e78a      	b.n	80057b2 <_strtod_l+0x192>
 800589c:	f04f 0c00 	mov.w	ip, #0
 80058a0:	e7f8      	b.n	8005894 <_strtod_l+0x274>
 80058a2:	bf00      	nop
 80058a4:	080101fc 	.word	0x080101fc
 80058a8:	7ff00000 	.word	0x7ff00000
 80058ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058ae:	1c5f      	adds	r7, r3, #1
 80058b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d0f9      	beq.n	80058ac <_strtod_l+0x28c>
 80058b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80058bc:	2f08      	cmp	r7, #8
 80058be:	f63f af7d 	bhi.w	80057bc <_strtod_l+0x19c>
 80058c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80058c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058c8:	930a      	str	r3, [sp, #40]	; 0x28
 80058ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058cc:	1c5f      	adds	r7, r3, #1
 80058ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80058d6:	f1b8 0f09 	cmp.w	r8, #9
 80058da:	d937      	bls.n	800594c <_strtod_l+0x32c>
 80058dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058de:	1a7f      	subs	r7, r7, r1
 80058e0:	2f08      	cmp	r7, #8
 80058e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80058e6:	dc37      	bgt.n	8005958 <_strtod_l+0x338>
 80058e8:	45be      	cmp	lr, r7
 80058ea:	bfa8      	it	ge
 80058ec:	46be      	movge	lr, r7
 80058ee:	f1bc 0f00 	cmp.w	ip, #0
 80058f2:	d001      	beq.n	80058f8 <_strtod_l+0x2d8>
 80058f4:	f1ce 0e00 	rsb	lr, lr, #0
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	d151      	bne.n	80059a0 <_strtod_l+0x380>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f47f aece 	bne.w	800569e <_strtod_l+0x7e>
 8005902:	9a06      	ldr	r2, [sp, #24]
 8005904:	2a00      	cmp	r2, #0
 8005906:	f47f aeca 	bne.w	800569e <_strtod_l+0x7e>
 800590a:	9a04      	ldr	r2, [sp, #16]
 800590c:	2a00      	cmp	r2, #0
 800590e:	f47f aee4 	bne.w	80056da <_strtod_l+0xba>
 8005912:	2b4e      	cmp	r3, #78	; 0x4e
 8005914:	d027      	beq.n	8005966 <_strtod_l+0x346>
 8005916:	dc21      	bgt.n	800595c <_strtod_l+0x33c>
 8005918:	2b49      	cmp	r3, #73	; 0x49
 800591a:	f47f aede 	bne.w	80056da <_strtod_l+0xba>
 800591e:	49a0      	ldr	r1, [pc, #640]	; (8005ba0 <_strtod_l+0x580>)
 8005920:	a81b      	add	r0, sp, #108	; 0x6c
 8005922:	f001 fdeb 	bl	80074fc <__match>
 8005926:	2800      	cmp	r0, #0
 8005928:	f43f aed7 	beq.w	80056da <_strtod_l+0xba>
 800592c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800592e:	499d      	ldr	r1, [pc, #628]	; (8005ba4 <_strtod_l+0x584>)
 8005930:	3b01      	subs	r3, #1
 8005932:	a81b      	add	r0, sp, #108	; 0x6c
 8005934:	931b      	str	r3, [sp, #108]	; 0x6c
 8005936:	f001 fde1 	bl	80074fc <__match>
 800593a:	b910      	cbnz	r0, 8005942 <_strtod_l+0x322>
 800593c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800593e:	3301      	adds	r3, #1
 8005940:	931b      	str	r3, [sp, #108]	; 0x6c
 8005942:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005bb8 <_strtod_l+0x598>
 8005946:	f04f 0a00 	mov.w	sl, #0
 800594a:	e6a8      	b.n	800569e <_strtod_l+0x7e>
 800594c:	210a      	movs	r1, #10
 800594e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005952:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005956:	e7b8      	b.n	80058ca <_strtod_l+0x2aa>
 8005958:	46be      	mov	lr, r7
 800595a:	e7c8      	b.n	80058ee <_strtod_l+0x2ce>
 800595c:	2b69      	cmp	r3, #105	; 0x69
 800595e:	d0de      	beq.n	800591e <_strtod_l+0x2fe>
 8005960:	2b6e      	cmp	r3, #110	; 0x6e
 8005962:	f47f aeba 	bne.w	80056da <_strtod_l+0xba>
 8005966:	4990      	ldr	r1, [pc, #576]	; (8005ba8 <_strtod_l+0x588>)
 8005968:	a81b      	add	r0, sp, #108	; 0x6c
 800596a:	f001 fdc7 	bl	80074fc <__match>
 800596e:	2800      	cmp	r0, #0
 8005970:	f43f aeb3 	beq.w	80056da <_strtod_l+0xba>
 8005974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b28      	cmp	r3, #40	; 0x28
 800597a:	d10e      	bne.n	800599a <_strtod_l+0x37a>
 800597c:	aa1e      	add	r2, sp, #120	; 0x78
 800597e:	498b      	ldr	r1, [pc, #556]	; (8005bac <_strtod_l+0x58c>)
 8005980:	a81b      	add	r0, sp, #108	; 0x6c
 8005982:	f001 fdcf 	bl	8007524 <__hexnan>
 8005986:	2805      	cmp	r0, #5
 8005988:	d107      	bne.n	800599a <_strtod_l+0x37a>
 800598a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800598c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005990:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005994:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005998:	e681      	b.n	800569e <_strtod_l+0x7e>
 800599a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005bc0 <_strtod_l+0x5a0>
 800599e:	e7d2      	b.n	8005946 <_strtod_l+0x326>
 80059a0:	ebae 0302 	sub.w	r3, lr, r2
 80059a4:	9306      	str	r3, [sp, #24]
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	9807      	ldr	r0, [sp, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bf08      	it	eq
 80059ae:	4623      	moveq	r3, r4
 80059b0:	2c10      	cmp	r4, #16
 80059b2:	9305      	str	r3, [sp, #20]
 80059b4:	46a0      	mov	r8, r4
 80059b6:	bfa8      	it	ge
 80059b8:	f04f 0810 	movge.w	r8, #16
 80059bc:	f7fa fda2 	bl	8000504 <__aeabi_ui2d>
 80059c0:	2c09      	cmp	r4, #9
 80059c2:	4682      	mov	sl, r0
 80059c4:	468b      	mov	fp, r1
 80059c6:	dc13      	bgt.n	80059f0 <_strtod_l+0x3d0>
 80059c8:	9b06      	ldr	r3, [sp, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f43f ae67 	beq.w	800569e <_strtod_l+0x7e>
 80059d0:	9b06      	ldr	r3, [sp, #24]
 80059d2:	dd7a      	ble.n	8005aca <_strtod_l+0x4aa>
 80059d4:	2b16      	cmp	r3, #22
 80059d6:	dc61      	bgt.n	8005a9c <_strtod_l+0x47c>
 80059d8:	4a75      	ldr	r2, [pc, #468]	; (8005bb0 <_strtod_l+0x590>)
 80059da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80059de:	e9de 0100 	ldrd	r0, r1, [lr]
 80059e2:	4652      	mov	r2, sl
 80059e4:	465b      	mov	r3, fp
 80059e6:	f7fa fe07 	bl	80005f8 <__aeabi_dmul>
 80059ea:	4682      	mov	sl, r0
 80059ec:	468b      	mov	fp, r1
 80059ee:	e656      	b.n	800569e <_strtod_l+0x7e>
 80059f0:	4b6f      	ldr	r3, [pc, #444]	; (8005bb0 <_strtod_l+0x590>)
 80059f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059fa:	f7fa fdfd 	bl	80005f8 <__aeabi_dmul>
 80059fe:	4606      	mov	r6, r0
 8005a00:	4628      	mov	r0, r5
 8005a02:	460f      	mov	r7, r1
 8005a04:	f7fa fd7e 	bl	8000504 <__aeabi_ui2d>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fc3c 	bl	800028c <__adddf3>
 8005a14:	2c0f      	cmp	r4, #15
 8005a16:	4682      	mov	sl, r0
 8005a18:	468b      	mov	fp, r1
 8005a1a:	ddd5      	ble.n	80059c8 <_strtod_l+0x3a8>
 8005a1c:	9b06      	ldr	r3, [sp, #24]
 8005a1e:	eba4 0808 	sub.w	r8, r4, r8
 8005a22:	4498      	add	r8, r3
 8005a24:	f1b8 0f00 	cmp.w	r8, #0
 8005a28:	f340 8096 	ble.w	8005b58 <_strtod_l+0x538>
 8005a2c:	f018 030f 	ands.w	r3, r8, #15
 8005a30:	d00a      	beq.n	8005a48 <_strtod_l+0x428>
 8005a32:	495f      	ldr	r1, [pc, #380]	; (8005bb0 <_strtod_l+0x590>)
 8005a34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a38:	4652      	mov	r2, sl
 8005a3a:	465b      	mov	r3, fp
 8005a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a40:	f7fa fdda 	bl	80005f8 <__aeabi_dmul>
 8005a44:	4682      	mov	sl, r0
 8005a46:	468b      	mov	fp, r1
 8005a48:	f038 080f 	bics.w	r8, r8, #15
 8005a4c:	d073      	beq.n	8005b36 <_strtod_l+0x516>
 8005a4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005a52:	dd47      	ble.n	8005ae4 <_strtod_l+0x4c4>
 8005a54:	2400      	movs	r4, #0
 8005a56:	46a0      	mov	r8, r4
 8005a58:	9407      	str	r4, [sp, #28]
 8005a5a:	9405      	str	r4, [sp, #20]
 8005a5c:	2322      	movs	r3, #34	; 0x22
 8005a5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005bb8 <_strtod_l+0x598>
 8005a62:	f8c9 3000 	str.w	r3, [r9]
 8005a66:	f04f 0a00 	mov.w	sl, #0
 8005a6a:	9b07      	ldr	r3, [sp, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f43f ae16 	beq.w	800569e <_strtod_l+0x7e>
 8005a72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a74:	4648      	mov	r0, r9
 8005a76:	f001 fe52 	bl	800771e <_Bfree>
 8005a7a:	9905      	ldr	r1, [sp, #20]
 8005a7c:	4648      	mov	r0, r9
 8005a7e:	f001 fe4e 	bl	800771e <_Bfree>
 8005a82:	4641      	mov	r1, r8
 8005a84:	4648      	mov	r0, r9
 8005a86:	f001 fe4a 	bl	800771e <_Bfree>
 8005a8a:	9907      	ldr	r1, [sp, #28]
 8005a8c:	4648      	mov	r0, r9
 8005a8e:	f001 fe46 	bl	800771e <_Bfree>
 8005a92:	4621      	mov	r1, r4
 8005a94:	4648      	mov	r0, r9
 8005a96:	f001 fe42 	bl	800771e <_Bfree>
 8005a9a:	e600      	b.n	800569e <_strtod_l+0x7e>
 8005a9c:	9a06      	ldr	r2, [sp, #24]
 8005a9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	dbba      	blt.n	8005a1c <_strtod_l+0x3fc>
 8005aa6:	4d42      	ldr	r5, [pc, #264]	; (8005bb0 <_strtod_l+0x590>)
 8005aa8:	f1c4 040f 	rsb	r4, r4, #15
 8005aac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005ab0:	4652      	mov	r2, sl
 8005ab2:	465b      	mov	r3, fp
 8005ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab8:	f7fa fd9e 	bl	80005f8 <__aeabi_dmul>
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	1b1c      	subs	r4, r3, r4
 8005ac0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005ac4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ac8:	e78d      	b.n	80059e6 <_strtod_l+0x3c6>
 8005aca:	f113 0f16 	cmn.w	r3, #22
 8005ace:	dba5      	blt.n	8005a1c <_strtod_l+0x3fc>
 8005ad0:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <_strtod_l+0x590>)
 8005ad2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005ad6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005ada:	4650      	mov	r0, sl
 8005adc:	4659      	mov	r1, fp
 8005ade:	f7fa feb5 	bl	800084c <__aeabi_ddiv>
 8005ae2:	e782      	b.n	80059ea <_strtod_l+0x3ca>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4e33      	ldr	r6, [pc, #204]	; (8005bb4 <_strtod_l+0x594>)
 8005ae8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005aec:	4650      	mov	r0, sl
 8005aee:	4659      	mov	r1, fp
 8005af0:	461d      	mov	r5, r3
 8005af2:	f1b8 0f01 	cmp.w	r8, #1
 8005af6:	dc21      	bgt.n	8005b3c <_strtod_l+0x51c>
 8005af8:	b10b      	cbz	r3, 8005afe <_strtod_l+0x4de>
 8005afa:	4682      	mov	sl, r0
 8005afc:	468b      	mov	fp, r1
 8005afe:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <_strtod_l+0x594>)
 8005b00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005b08:	4652      	mov	r2, sl
 8005b0a:	465b      	mov	r3, fp
 8005b0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005b10:	f7fa fd72 	bl	80005f8 <__aeabi_dmul>
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <_strtod_l+0x598>)
 8005b16:	460a      	mov	r2, r1
 8005b18:	400b      	ands	r3, r1
 8005b1a:	4928      	ldr	r1, [pc, #160]	; (8005bbc <_strtod_l+0x59c>)
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	4682      	mov	sl, r0
 8005b20:	d898      	bhi.n	8005a54 <_strtod_l+0x434>
 8005b22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b26:	428b      	cmp	r3, r1
 8005b28:	bf86      	itte	hi
 8005b2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005bc4 <_strtod_l+0x5a4>
 8005b2e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005b32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005b36:	2300      	movs	r3, #0
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	e077      	b.n	8005c2c <_strtod_l+0x60c>
 8005b3c:	f018 0f01 	tst.w	r8, #1
 8005b40:	d006      	beq.n	8005b50 <_strtod_l+0x530>
 8005b42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fd55 	bl	80005f8 <__aeabi_dmul>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	3501      	adds	r5, #1
 8005b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b56:	e7cc      	b.n	8005af2 <_strtod_l+0x4d2>
 8005b58:	d0ed      	beq.n	8005b36 <_strtod_l+0x516>
 8005b5a:	f1c8 0800 	rsb	r8, r8, #0
 8005b5e:	f018 020f 	ands.w	r2, r8, #15
 8005b62:	d00a      	beq.n	8005b7a <_strtod_l+0x55a>
 8005b64:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <_strtod_l+0x590>)
 8005b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	4659      	mov	r1, fp
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f7fa fe6b 	bl	800084c <__aeabi_ddiv>
 8005b76:	4682      	mov	sl, r0
 8005b78:	468b      	mov	fp, r1
 8005b7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b7e:	d0da      	beq.n	8005b36 <_strtod_l+0x516>
 8005b80:	f1b8 0f1f 	cmp.w	r8, #31
 8005b84:	dd20      	ble.n	8005bc8 <_strtod_l+0x5a8>
 8005b86:	2400      	movs	r4, #0
 8005b88:	46a0      	mov	r8, r4
 8005b8a:	9407      	str	r4, [sp, #28]
 8005b8c:	9405      	str	r4, [sp, #20]
 8005b8e:	2322      	movs	r3, #34	; 0x22
 8005b90:	f04f 0a00 	mov.w	sl, #0
 8005b94:	f04f 0b00 	mov.w	fp, #0
 8005b98:	f8c9 3000 	str.w	r3, [r9]
 8005b9c:	e765      	b.n	8005a6a <_strtod_l+0x44a>
 8005b9e:	bf00      	nop
 8005ba0:	080101c5 	.word	0x080101c5
 8005ba4:	08010253 	.word	0x08010253
 8005ba8:	080101cd 	.word	0x080101cd
 8005bac:	08010210 	.word	0x08010210
 8005bb0:	08010290 	.word	0x08010290
 8005bb4:	08010268 	.word	0x08010268
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	7ca00000 	.word	0x7ca00000
 8005bc0:	fff80000 	.word	0xfff80000
 8005bc4:	7fefffff 	.word	0x7fefffff
 8005bc8:	f018 0310 	ands.w	r3, r8, #16
 8005bcc:	bf18      	it	ne
 8005bce:	236a      	movne	r3, #106	; 0x6a
 8005bd0:	4da0      	ldr	r5, [pc, #640]	; (8005e54 <_strtod_l+0x834>)
 8005bd2:	9304      	str	r3, [sp, #16]
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f1b8 0f00 	cmp.w	r8, #0
 8005bde:	f300 810a 	bgt.w	8005df6 <_strtod_l+0x7d6>
 8005be2:	b10b      	cbz	r3, 8005be8 <_strtod_l+0x5c8>
 8005be4:	4682      	mov	sl, r0
 8005be6:	468b      	mov	fp, r1
 8005be8:	9b04      	ldr	r3, [sp, #16]
 8005bea:	b1bb      	cbz	r3, 8005c1c <_strtod_l+0x5fc>
 8005bec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005bf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	4659      	mov	r1, fp
 8005bf8:	dd10      	ble.n	8005c1c <_strtod_l+0x5fc>
 8005bfa:	2b1f      	cmp	r3, #31
 8005bfc:	f340 8107 	ble.w	8005e0e <_strtod_l+0x7ee>
 8005c00:	2b34      	cmp	r3, #52	; 0x34
 8005c02:	bfde      	ittt	le
 8005c04:	3b20      	suble	r3, #32
 8005c06:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005c0a:	fa02 f303 	lslle.w	r3, r2, r3
 8005c0e:	f04f 0a00 	mov.w	sl, #0
 8005c12:	bfcc      	ite	gt
 8005c14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005c18:	ea03 0b01 	andle.w	fp, r3, r1
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4650      	mov	r0, sl
 8005c22:	4659      	mov	r1, fp
 8005c24:	f7fa ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d1ac      	bne.n	8005b86 <_strtod_l+0x566>
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	9a05      	ldr	r2, [sp, #20]
 8005c32:	9908      	ldr	r1, [sp, #32]
 8005c34:	4623      	mov	r3, r4
 8005c36:	4648      	mov	r0, r9
 8005c38:	f001 fdc3 	bl	80077c2 <__s2b>
 8005c3c:	9007      	str	r0, [sp, #28]
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	f43f af08 	beq.w	8005a54 <_strtod_l+0x434>
 8005c44:	9a06      	ldr	r2, [sp, #24]
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	2a00      	cmp	r2, #0
 8005c4a:	f1c3 0300 	rsb	r3, r3, #0
 8005c4e:	bfa8      	it	ge
 8005c50:	2300      	movge	r3, #0
 8005c52:	930e      	str	r3, [sp, #56]	; 0x38
 8005c54:	2400      	movs	r4, #0
 8005c56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005c5a:	9316      	str	r3, [sp, #88]	; 0x58
 8005c5c:	46a0      	mov	r8, r4
 8005c5e:	9b07      	ldr	r3, [sp, #28]
 8005c60:	4648      	mov	r0, r9
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	f001 fd27 	bl	80076b6 <_Balloc>
 8005c68:	9005      	str	r0, [sp, #20]
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f43f aef6 	beq.w	8005a5c <_strtod_l+0x43c>
 8005c70:	9b07      	ldr	r3, [sp, #28]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	3202      	adds	r2, #2
 8005c76:	f103 010c 	add.w	r1, r3, #12
 8005c7a:	0092      	lsls	r2, r2, #2
 8005c7c:	300c      	adds	r0, #12
 8005c7e:	f001 fd0f 	bl	80076a0 <memcpy>
 8005c82:	aa1e      	add	r2, sp, #120	; 0x78
 8005c84:	a91d      	add	r1, sp, #116	; 0x74
 8005c86:	ec4b ab10 	vmov	d0, sl, fp
 8005c8a:	4648      	mov	r0, r9
 8005c8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005c90:	f002 f852 	bl	8007d38 <__d2b>
 8005c94:	901c      	str	r0, [sp, #112]	; 0x70
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f43f aee0 	beq.w	8005a5c <_strtod_l+0x43c>
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	4648      	mov	r0, r9
 8005ca0:	f001 fe1b 	bl	80078da <__i2b>
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f43f aed8 	beq.w	8005a5c <_strtod_l+0x43c>
 8005cac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005cae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	bfab      	itete	ge
 8005cb4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005cb6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005cb8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005cba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005cbc:	bfac      	ite	ge
 8005cbe:	18f7      	addge	r7, r6, r3
 8005cc0:	1b9d      	sublt	r5, r3, r6
 8005cc2:	9b04      	ldr	r3, [sp, #16]
 8005cc4:	1af6      	subs	r6, r6, r3
 8005cc6:	4416      	add	r6, r2
 8005cc8:	4b63      	ldr	r3, [pc, #396]	; (8005e58 <_strtod_l+0x838>)
 8005cca:	3e01      	subs	r6, #1
 8005ccc:	429e      	cmp	r6, r3
 8005cce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005cd2:	f280 80af 	bge.w	8005e34 <_strtod_l+0x814>
 8005cd6:	1b9b      	subs	r3, r3, r6
 8005cd8:	2b1f      	cmp	r3, #31
 8005cda:	eba2 0203 	sub.w	r2, r2, r3
 8005cde:	f04f 0101 	mov.w	r1, #1
 8005ce2:	f300 809b 	bgt.w	8005e1c <_strtod_l+0x7fc>
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cec:	2300      	movs	r3, #0
 8005cee:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf0:	18be      	adds	r6, r7, r2
 8005cf2:	9b04      	ldr	r3, [sp, #16]
 8005cf4:	42b7      	cmp	r7, r6
 8005cf6:	4415      	add	r5, r2
 8005cf8:	441d      	add	r5, r3
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	bfa8      	it	ge
 8005cfe:	4633      	movge	r3, r6
 8005d00:	42ab      	cmp	r3, r5
 8005d02:	bfa8      	it	ge
 8005d04:	462b      	movge	r3, r5
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bfc2      	ittt	gt
 8005d0a:	1af6      	subgt	r6, r6, r3
 8005d0c:	1aed      	subgt	r5, r5, r3
 8005d0e:	1aff      	subgt	r7, r7, r3
 8005d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d12:	b1bb      	cbz	r3, 8005d44 <_strtod_l+0x724>
 8005d14:	4641      	mov	r1, r8
 8005d16:	461a      	mov	r2, r3
 8005d18:	4648      	mov	r0, r9
 8005d1a:	f001 fe7d 	bl	8007a18 <__pow5mult>
 8005d1e:	4680      	mov	r8, r0
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f43f ae9b 	beq.w	8005a5c <_strtod_l+0x43c>
 8005d26:	4601      	mov	r1, r0
 8005d28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d2a:	4648      	mov	r0, r9
 8005d2c:	f001 fdde 	bl	80078ec <__multiply>
 8005d30:	900c      	str	r0, [sp, #48]	; 0x30
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f43f ae92 	beq.w	8005a5c <_strtod_l+0x43c>
 8005d38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	f001 fcef 	bl	800771e <_Bfree>
 8005d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d42:	931c      	str	r3, [sp, #112]	; 0x70
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	dc7a      	bgt.n	8005e3e <_strtod_l+0x81e>
 8005d48:	9b06      	ldr	r3, [sp, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd08      	ble.n	8005d60 <_strtod_l+0x740>
 8005d4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d50:	9905      	ldr	r1, [sp, #20]
 8005d52:	4648      	mov	r0, r9
 8005d54:	f001 fe60 	bl	8007a18 <__pow5mult>
 8005d58:	9005      	str	r0, [sp, #20]
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f43f ae7e 	beq.w	8005a5c <_strtod_l+0x43c>
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	dd08      	ble.n	8005d76 <_strtod_l+0x756>
 8005d64:	462a      	mov	r2, r5
 8005d66:	9905      	ldr	r1, [sp, #20]
 8005d68:	4648      	mov	r0, r9
 8005d6a:	f001 fea3 	bl	8007ab4 <__lshift>
 8005d6e:	9005      	str	r0, [sp, #20]
 8005d70:	2800      	cmp	r0, #0
 8005d72:	f43f ae73 	beq.w	8005a5c <_strtod_l+0x43c>
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	dd08      	ble.n	8005d8c <_strtod_l+0x76c>
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	463a      	mov	r2, r7
 8005d7e:	4648      	mov	r0, r9
 8005d80:	f001 fe98 	bl	8007ab4 <__lshift>
 8005d84:	4680      	mov	r8, r0
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f43f ae68 	beq.w	8005a5c <_strtod_l+0x43c>
 8005d8c:	9a05      	ldr	r2, [sp, #20]
 8005d8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d90:	4648      	mov	r0, r9
 8005d92:	f001 fefd 	bl	8007b90 <__mdiff>
 8005d96:	4604      	mov	r4, r0
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f43f ae5f 	beq.w	8005a5c <_strtod_l+0x43c>
 8005d9e:	68c3      	ldr	r3, [r0, #12]
 8005da0:	930c      	str	r3, [sp, #48]	; 0x30
 8005da2:	2300      	movs	r3, #0
 8005da4:	60c3      	str	r3, [r0, #12]
 8005da6:	4641      	mov	r1, r8
 8005da8:	f001 fed8 	bl	8007b5c <__mcmp>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	da55      	bge.n	8005e5c <_strtod_l+0x83c>
 8005db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005db2:	b9e3      	cbnz	r3, 8005dee <_strtod_l+0x7ce>
 8005db4:	f1ba 0f00 	cmp.w	sl, #0
 8005db8:	d119      	bne.n	8005dee <_strtod_l+0x7ce>
 8005dba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dbe:	b9b3      	cbnz	r3, 8005dee <_strtod_l+0x7ce>
 8005dc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005dc4:	0d1b      	lsrs	r3, r3, #20
 8005dc6:	051b      	lsls	r3, r3, #20
 8005dc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005dcc:	d90f      	bls.n	8005dee <_strtod_l+0x7ce>
 8005dce:	6963      	ldr	r3, [r4, #20]
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_strtod_l+0x7b8>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	dd0a      	ble.n	8005dee <_strtod_l+0x7ce>
 8005dd8:	4621      	mov	r1, r4
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4648      	mov	r0, r9
 8005dde:	f001 fe69 	bl	8007ab4 <__lshift>
 8005de2:	4641      	mov	r1, r8
 8005de4:	4604      	mov	r4, r0
 8005de6:	f001 feb9 	bl	8007b5c <__mcmp>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	dc67      	bgt.n	8005ebe <_strtod_l+0x89e>
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d171      	bne.n	8005ed8 <_strtod_l+0x8b8>
 8005df4:	e63d      	b.n	8005a72 <_strtod_l+0x452>
 8005df6:	f018 0f01 	tst.w	r8, #1
 8005dfa:	d004      	beq.n	8005e06 <_strtod_l+0x7e6>
 8005dfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e00:	f7fa fbfa 	bl	80005f8 <__aeabi_dmul>
 8005e04:	2301      	movs	r3, #1
 8005e06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e0a:	3508      	adds	r5, #8
 8005e0c:	e6e5      	b.n	8005bda <_strtod_l+0x5ba>
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	ea03 0a0a 	and.w	sl, r3, sl
 8005e1a:	e6ff      	b.n	8005c1c <_strtod_l+0x5fc>
 8005e1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005e20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005e24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005e28:	36e2      	adds	r6, #226	; 0xe2
 8005e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8005e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e30:	910f      	str	r1, [sp, #60]	; 0x3c
 8005e32:	e75d      	b.n	8005cf0 <_strtod_l+0x6d0>
 8005e34:	2300      	movs	r3, #0
 8005e36:	930a      	str	r3, [sp, #40]	; 0x28
 8005e38:	2301      	movs	r3, #1
 8005e3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e3c:	e758      	b.n	8005cf0 <_strtod_l+0x6d0>
 8005e3e:	4632      	mov	r2, r6
 8005e40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e42:	4648      	mov	r0, r9
 8005e44:	f001 fe36 	bl	8007ab4 <__lshift>
 8005e48:	901c      	str	r0, [sp, #112]	; 0x70
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	f47f af7c 	bne.w	8005d48 <_strtod_l+0x728>
 8005e50:	e604      	b.n	8005a5c <_strtod_l+0x43c>
 8005e52:	bf00      	nop
 8005e54:	08010228 	.word	0x08010228
 8005e58:	fffffc02 	.word	0xfffffc02
 8005e5c:	465d      	mov	r5, fp
 8005e5e:	f040 8086 	bne.w	8005f6e <_strtod_l+0x94e>
 8005e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e68:	b32a      	cbz	r2, 8005eb6 <_strtod_l+0x896>
 8005e6a:	4aaf      	ldr	r2, [pc, #700]	; (8006128 <_strtod_l+0xb08>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d153      	bne.n	8005f18 <_strtod_l+0x8f8>
 8005e70:	9b04      	ldr	r3, [sp, #16]
 8005e72:	4650      	mov	r0, sl
 8005e74:	b1d3      	cbz	r3, 8005eac <_strtod_l+0x88c>
 8005e76:	4aad      	ldr	r2, [pc, #692]	; (800612c <_strtod_l+0xb0c>)
 8005e78:	402a      	ands	r2, r5
 8005e7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005e7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e82:	d816      	bhi.n	8005eb2 <_strtod_l+0x892>
 8005e84:	0d12      	lsrs	r2, r2, #20
 8005e86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	d142      	bne.n	8005f18 <_strtod_l+0x8f8>
 8005e92:	4ba7      	ldr	r3, [pc, #668]	; (8006130 <_strtod_l+0xb10>)
 8005e94:	429d      	cmp	r5, r3
 8005e96:	d102      	bne.n	8005e9e <_strtod_l+0x87e>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f addf 	beq.w	8005a5c <_strtod_l+0x43c>
 8005e9e:	4ba3      	ldr	r3, [pc, #652]	; (800612c <_strtod_l+0xb0c>)
 8005ea0:	402b      	ands	r3, r5
 8005ea2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005ea6:	f04f 0a00 	mov.w	sl, #0
 8005eaa:	e7a0      	b.n	8005dee <_strtod_l+0x7ce>
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb0:	e7ed      	b.n	8005e8e <_strtod_l+0x86e>
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	e7eb      	b.n	8005e8e <_strtod_l+0x86e>
 8005eb6:	bb7b      	cbnz	r3, 8005f18 <_strtod_l+0x8f8>
 8005eb8:	f1ba 0f00 	cmp.w	sl, #0
 8005ebc:	d12c      	bne.n	8005f18 <_strtod_l+0x8f8>
 8005ebe:	9904      	ldr	r1, [sp, #16]
 8005ec0:	4a9a      	ldr	r2, [pc, #616]	; (800612c <_strtod_l+0xb0c>)
 8005ec2:	465b      	mov	r3, fp
 8005ec4:	b1f1      	cbz	r1, 8005f04 <_strtod_l+0x8e4>
 8005ec6:	ea02 010b 	and.w	r1, r2, fp
 8005eca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ece:	dc19      	bgt.n	8005f04 <_strtod_l+0x8e4>
 8005ed0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ed4:	f77f ae5b 	ble.w	8005b8e <_strtod_l+0x56e>
 8005ed8:	4a96      	ldr	r2, [pc, #600]	; (8006134 <_strtod_l+0xb14>)
 8005eda:	2300      	movs	r3, #0
 8005edc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	4682      	mov	sl, r0
 8005eee:	468b      	mov	fp, r1
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	f47f adbe 	bne.w	8005a72 <_strtod_l+0x452>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f47f adbb 	bne.w	8005a72 <_strtod_l+0x452>
 8005efc:	2322      	movs	r3, #34	; 0x22
 8005efe:	f8c9 3000 	str.w	r3, [r9]
 8005f02:	e5b6      	b.n	8005a72 <_strtod_l+0x452>
 8005f04:	4013      	ands	r3, r2
 8005f06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005f0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005f12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005f16:	e76a      	b.n	8005dee <_strtod_l+0x7ce>
 8005f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1a:	b193      	cbz	r3, 8005f42 <_strtod_l+0x922>
 8005f1c:	422b      	tst	r3, r5
 8005f1e:	f43f af66 	beq.w	8005dee <_strtod_l+0x7ce>
 8005f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f24:	9a04      	ldr	r2, [sp, #16]
 8005f26:	4650      	mov	r0, sl
 8005f28:	4659      	mov	r1, fp
 8005f2a:	b173      	cbz	r3, 8005f4a <_strtod_l+0x92a>
 8005f2c:	f7ff fb5c 	bl	80055e8 <sulp>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f38:	f7fa f9a8 	bl	800028c <__adddf3>
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	468b      	mov	fp, r1
 8005f40:	e755      	b.n	8005dee <_strtod_l+0x7ce>
 8005f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f44:	ea13 0f0a 	tst.w	r3, sl
 8005f48:	e7e9      	b.n	8005f1e <_strtod_l+0x8fe>
 8005f4a:	f7ff fb4d 	bl	80055e8 <sulp>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f56:	f7fa f997 	bl	8000288 <__aeabi_dsub>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4682      	mov	sl, r0
 8005f60:	468b      	mov	fp, r1
 8005f62:	f7fa fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f47f ae11 	bne.w	8005b8e <_strtod_l+0x56e>
 8005f6c:	e73f      	b.n	8005dee <_strtod_l+0x7ce>
 8005f6e:	4641      	mov	r1, r8
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 ff30 	bl	8007dd6 <__ratio>
 8005f76:	ec57 6b10 	vmov	r6, r7, d0
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f80:	ee10 0a10 	vmov	r0, s0
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa fdb3 	bl	8000af0 <__aeabi_dcmple>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d077      	beq.n	800607e <_strtod_l+0xa5e>
 8005f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d04a      	beq.n	800602a <_strtod_l+0xa0a>
 8005f94:	4b68      	ldr	r3, [pc, #416]	; (8006138 <_strtod_l+0xb18>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f9c:	4f66      	ldr	r7, [pc, #408]	; (8006138 <_strtod_l+0xb18>)
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	4b62      	ldr	r3, [pc, #392]	; (800612c <_strtod_l+0xb0c>)
 8005fa2:	402b      	ands	r3, r5
 8005fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fa8:	4b64      	ldr	r3, [pc, #400]	; (800613c <_strtod_l+0xb1c>)
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f040 80ce 	bne.w	800614c <_strtod_l+0xb2c>
 8005fb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fb8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005fbc:	ec4b ab10 	vmov	d0, sl, fp
 8005fc0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fc8:	f001 fe40 	bl	8007c4c <__ulp>
 8005fcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fd0:	ec53 2b10 	vmov	r2, r3, d0
 8005fd4:	f7fa fb10 	bl	80005f8 <__aeabi_dmul>
 8005fd8:	4652      	mov	r2, sl
 8005fda:	465b      	mov	r3, fp
 8005fdc:	f7fa f956 	bl	800028c <__adddf3>
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4952      	ldr	r1, [pc, #328]	; (800612c <_strtod_l+0xb0c>)
 8005fe4:	4a56      	ldr	r2, [pc, #344]	; (8006140 <_strtod_l+0xb20>)
 8005fe6:	4019      	ands	r1, r3
 8005fe8:	4291      	cmp	r1, r2
 8005fea:	4682      	mov	sl, r0
 8005fec:	d95b      	bls.n	80060a6 <_strtod_l+0xa86>
 8005fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d103      	bne.n	8006000 <_strtod_l+0x9e0>
 8005ff8:	9b08      	ldr	r3, [sp, #32]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	f43f ad2e 	beq.w	8005a5c <_strtod_l+0x43c>
 8006000:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006130 <_strtod_l+0xb10>
 8006004:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006008:	991c      	ldr	r1, [sp, #112]	; 0x70
 800600a:	4648      	mov	r0, r9
 800600c:	f001 fb87 	bl	800771e <_Bfree>
 8006010:	9905      	ldr	r1, [sp, #20]
 8006012:	4648      	mov	r0, r9
 8006014:	f001 fb83 	bl	800771e <_Bfree>
 8006018:	4641      	mov	r1, r8
 800601a:	4648      	mov	r0, r9
 800601c:	f001 fb7f 	bl	800771e <_Bfree>
 8006020:	4621      	mov	r1, r4
 8006022:	4648      	mov	r0, r9
 8006024:	f001 fb7b 	bl	800771e <_Bfree>
 8006028:	e619      	b.n	8005c5e <_strtod_l+0x63e>
 800602a:	f1ba 0f00 	cmp.w	sl, #0
 800602e:	d11a      	bne.n	8006066 <_strtod_l+0xa46>
 8006030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006034:	b9eb      	cbnz	r3, 8006072 <_strtod_l+0xa52>
 8006036:	2200      	movs	r2, #0
 8006038:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <_strtod_l+0xb18>)
 800603a:	4630      	mov	r0, r6
 800603c:	4639      	mov	r1, r7
 800603e:	f7fa fd4d 	bl	8000adc <__aeabi_dcmplt>
 8006042:	b9c8      	cbnz	r0, 8006078 <_strtod_l+0xa58>
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	2200      	movs	r2, #0
 800604a:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <_strtod_l+0xb24>)
 800604c:	f7fa fad4 	bl	80005f8 <__aeabi_dmul>
 8006050:	4606      	mov	r6, r0
 8006052:	460f      	mov	r7, r1
 8006054:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006058:	9618      	str	r6, [sp, #96]	; 0x60
 800605a:	9319      	str	r3, [sp, #100]	; 0x64
 800605c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006060:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006064:	e79c      	b.n	8005fa0 <_strtod_l+0x980>
 8006066:	f1ba 0f01 	cmp.w	sl, #1
 800606a:	d102      	bne.n	8006072 <_strtod_l+0xa52>
 800606c:	2d00      	cmp	r5, #0
 800606e:	f43f ad8e 	beq.w	8005b8e <_strtod_l+0x56e>
 8006072:	2200      	movs	r2, #0
 8006074:	4b34      	ldr	r3, [pc, #208]	; (8006148 <_strtod_l+0xb28>)
 8006076:	e78f      	b.n	8005f98 <_strtod_l+0x978>
 8006078:	2600      	movs	r6, #0
 800607a:	4f32      	ldr	r7, [pc, #200]	; (8006144 <_strtod_l+0xb24>)
 800607c:	e7ea      	b.n	8006054 <_strtod_l+0xa34>
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <_strtod_l+0xb24>)
 8006080:	4630      	mov	r0, r6
 8006082:	4639      	mov	r1, r7
 8006084:	2200      	movs	r2, #0
 8006086:	f7fa fab7 	bl	80005f8 <__aeabi_dmul>
 800608a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	b933      	cbnz	r3, 80060a0 <_strtod_l+0xa80>
 8006092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006096:	9010      	str	r0, [sp, #64]	; 0x40
 8006098:	9311      	str	r3, [sp, #68]	; 0x44
 800609a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800609e:	e7df      	b.n	8006060 <_strtod_l+0xa40>
 80060a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80060a4:	e7f9      	b.n	800609a <_strtod_l+0xa7a>
 80060a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ab      	bne.n	8006008 <_strtod_l+0x9e8>
 80060b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060b8:	051b      	lsls	r3, r3, #20
 80060ba:	429a      	cmp	r2, r3
 80060bc:	465d      	mov	r5, fp
 80060be:	d1a3      	bne.n	8006008 <_strtod_l+0x9e8>
 80060c0:	4639      	mov	r1, r7
 80060c2:	4630      	mov	r0, r6
 80060c4:	f7fa fd48 	bl	8000b58 <__aeabi_d2iz>
 80060c8:	f7fa fa2c 	bl	8000524 <__aeabi_i2d>
 80060cc:	460b      	mov	r3, r1
 80060ce:	4602      	mov	r2, r0
 80060d0:	4639      	mov	r1, r7
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7fa f8d8 	bl	8000288 <__aeabi_dsub>
 80060d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060da:	4606      	mov	r6, r0
 80060dc:	460f      	mov	r7, r1
 80060de:	b933      	cbnz	r3, 80060ee <_strtod_l+0xace>
 80060e0:	f1ba 0f00 	cmp.w	sl, #0
 80060e4:	d103      	bne.n	80060ee <_strtod_l+0xace>
 80060e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	d06d      	beq.n	80061ca <_strtod_l+0xbaa>
 80060ee:	a30a      	add	r3, pc, #40	; (adr r3, 8006118 <_strtod_l+0xaf8>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fcf0 	bl	8000adc <__aeabi_dcmplt>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f47f acb8 	bne.w	8005a72 <_strtod_l+0x452>
 8006102:	a307      	add	r3, pc, #28	; (adr r3, 8006120 <_strtod_l+0xb00>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	f7fa fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8006110:	2800      	cmp	r0, #0
 8006112:	f43f af79 	beq.w	8006008 <_strtod_l+0x9e8>
 8006116:	e4ac      	b.n	8005a72 <_strtod_l+0x452>
 8006118:	94a03595 	.word	0x94a03595
 800611c:	3fdfffff 	.word	0x3fdfffff
 8006120:	35afe535 	.word	0x35afe535
 8006124:	3fe00000 	.word	0x3fe00000
 8006128:	000fffff 	.word	0x000fffff
 800612c:	7ff00000 	.word	0x7ff00000
 8006130:	7fefffff 	.word	0x7fefffff
 8006134:	39500000 	.word	0x39500000
 8006138:	3ff00000 	.word	0x3ff00000
 800613c:	7fe00000 	.word	0x7fe00000
 8006140:	7c9fffff 	.word	0x7c9fffff
 8006144:	3fe00000 	.word	0x3fe00000
 8006148:	bff00000 	.word	0xbff00000
 800614c:	9b04      	ldr	r3, [sp, #16]
 800614e:	b333      	cbz	r3, 800619e <_strtod_l+0xb7e>
 8006150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006152:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006156:	d822      	bhi.n	800619e <_strtod_l+0xb7e>
 8006158:	a327      	add	r3, pc, #156	; (adr r3, 80061f8 <_strtod_l+0xbd8>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	4630      	mov	r0, r6
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa fcc5 	bl	8000af0 <__aeabi_dcmple>
 8006166:	b1a0      	cbz	r0, 8006192 <_strtod_l+0xb72>
 8006168:	4639      	mov	r1, r7
 800616a:	4630      	mov	r0, r6
 800616c:	f7fa fd1c 	bl	8000ba8 <__aeabi_d2uiz>
 8006170:	2800      	cmp	r0, #0
 8006172:	bf08      	it	eq
 8006174:	2001      	moveq	r0, #1
 8006176:	f7fa f9c5 	bl	8000504 <__aeabi_ui2d>
 800617a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
 8006180:	bb03      	cbnz	r3, 80061c4 <_strtod_l+0xba4>
 8006182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006186:	9012      	str	r0, [sp, #72]	; 0x48
 8006188:	9313      	str	r3, [sp, #76]	; 0x4c
 800618a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800618e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006196:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	930b      	str	r3, [sp, #44]	; 0x2c
 800619e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80061a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80061a6:	f001 fd51 	bl	8007c4c <__ulp>
 80061aa:	4650      	mov	r0, sl
 80061ac:	ec53 2b10 	vmov	r2, r3, d0
 80061b0:	4659      	mov	r1, fp
 80061b2:	f7fa fa21 	bl	80005f8 <__aeabi_dmul>
 80061b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061ba:	f7fa f867 	bl	800028c <__adddf3>
 80061be:	4682      	mov	sl, r0
 80061c0:	468b      	mov	fp, r1
 80061c2:	e772      	b.n	80060aa <_strtod_l+0xa8a>
 80061c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80061c8:	e7df      	b.n	800618a <_strtod_l+0xb6a>
 80061ca:	a30d      	add	r3, pc, #52	; (adr r3, 8006200 <_strtod_l+0xbe0>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa fc84 	bl	8000adc <__aeabi_dcmplt>
 80061d4:	e79c      	b.n	8006110 <_strtod_l+0xaf0>
 80061d6:	2300      	movs	r3, #0
 80061d8:	930d      	str	r3, [sp, #52]	; 0x34
 80061da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	f7ff ba61 	b.w	80056a6 <_strtod_l+0x86>
 80061e4:	2b65      	cmp	r3, #101	; 0x65
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f43f ab4e 	beq.w	800588a <_strtod_l+0x26a>
 80061ee:	2101      	movs	r1, #1
 80061f0:	4614      	mov	r4, r2
 80061f2:	9104      	str	r1, [sp, #16]
 80061f4:	f7ff bacb 	b.w	800578e <_strtod_l+0x16e>
 80061f8:	ffc00000 	.word	0xffc00000
 80061fc:	41dfffff 	.word	0x41dfffff
 8006200:	94a03595 	.word	0x94a03595
 8006204:	3fcfffff 	.word	0x3fcfffff

08006208 <_strtod_r>:
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <_strtod_r+0x18>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	b410      	push	{r4}
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	4c04      	ldr	r4, [pc, #16]	; (8006224 <_strtod_r+0x1c>)
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf08      	it	eq
 8006216:	4623      	moveq	r3, r4
 8006218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800621c:	f7ff ba00 	b.w	8005620 <_strtod_l>
 8006220:	20000014 	.word	0x20000014
 8006224:	20000078 	.word	0x20000078

08006228 <strtod>:
 8006228:	4b07      	ldr	r3, [pc, #28]	; (8006248 <strtod+0x20>)
 800622a:	4a08      	ldr	r2, [pc, #32]	; (800624c <strtod+0x24>)
 800622c:	b410      	push	{r4}
 800622e:	681c      	ldr	r4, [r3, #0]
 8006230:	6a23      	ldr	r3, [r4, #32]
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf08      	it	eq
 8006236:	4613      	moveq	r3, r2
 8006238:	460a      	mov	r2, r1
 800623a:	4601      	mov	r1, r0
 800623c:	4620      	mov	r0, r4
 800623e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006242:	f7ff b9ed 	b.w	8005620 <_strtod_l>
 8006246:	bf00      	nop
 8006248:	20000014 	.word	0x20000014
 800624c:	20000078 	.word	0x20000078

08006250 <_strtol_l.isra.0>:
 8006250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	4692      	mov	sl, r2
 800625a:	461e      	mov	r6, r3
 800625c:	460f      	mov	r7, r1
 800625e:	463d      	mov	r5, r7
 8006260:	9808      	ldr	r0, [sp, #32]
 8006262:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006266:	f001 f9ed 	bl	8007644 <__locale_ctype_ptr_l>
 800626a:	4420      	add	r0, r4
 800626c:	7843      	ldrb	r3, [r0, #1]
 800626e:	f013 0308 	ands.w	r3, r3, #8
 8006272:	d132      	bne.n	80062da <_strtol_l.isra.0+0x8a>
 8006274:	2c2d      	cmp	r4, #45	; 0x2d
 8006276:	d132      	bne.n	80062de <_strtol_l.isra.0+0x8e>
 8006278:	787c      	ldrb	r4, [r7, #1]
 800627a:	1cbd      	adds	r5, r7, #2
 800627c:	2201      	movs	r2, #1
 800627e:	2e00      	cmp	r6, #0
 8006280:	d05d      	beq.n	800633e <_strtol_l.isra.0+0xee>
 8006282:	2e10      	cmp	r6, #16
 8006284:	d109      	bne.n	800629a <_strtol_l.isra.0+0x4a>
 8006286:	2c30      	cmp	r4, #48	; 0x30
 8006288:	d107      	bne.n	800629a <_strtol_l.isra.0+0x4a>
 800628a:	782b      	ldrb	r3, [r5, #0]
 800628c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006290:	2b58      	cmp	r3, #88	; 0x58
 8006292:	d14f      	bne.n	8006334 <_strtol_l.isra.0+0xe4>
 8006294:	786c      	ldrb	r4, [r5, #1]
 8006296:	2610      	movs	r6, #16
 8006298:	3502      	adds	r5, #2
 800629a:	2a00      	cmp	r2, #0
 800629c:	bf14      	ite	ne
 800629e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80062a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80062a6:	2700      	movs	r7, #0
 80062a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80062ac:	4638      	mov	r0, r7
 80062ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80062b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d817      	bhi.n	80062ea <_strtol_l.isra.0+0x9a>
 80062ba:	461c      	mov	r4, r3
 80062bc:	42a6      	cmp	r6, r4
 80062be:	dd23      	ble.n	8006308 <_strtol_l.isra.0+0xb8>
 80062c0:	1c7b      	adds	r3, r7, #1
 80062c2:	d007      	beq.n	80062d4 <_strtol_l.isra.0+0x84>
 80062c4:	4584      	cmp	ip, r0
 80062c6:	d31c      	bcc.n	8006302 <_strtol_l.isra.0+0xb2>
 80062c8:	d101      	bne.n	80062ce <_strtol_l.isra.0+0x7e>
 80062ca:	45a6      	cmp	lr, r4
 80062cc:	db19      	blt.n	8006302 <_strtol_l.isra.0+0xb2>
 80062ce:	fb00 4006 	mla	r0, r0, r6, r4
 80062d2:	2701      	movs	r7, #1
 80062d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062d8:	e7eb      	b.n	80062b2 <_strtol_l.isra.0+0x62>
 80062da:	462f      	mov	r7, r5
 80062dc:	e7bf      	b.n	800625e <_strtol_l.isra.0+0xe>
 80062de:	2c2b      	cmp	r4, #43	; 0x2b
 80062e0:	bf04      	itt	eq
 80062e2:	1cbd      	addeq	r5, r7, #2
 80062e4:	787c      	ldrbeq	r4, [r7, #1]
 80062e6:	461a      	mov	r2, r3
 80062e8:	e7c9      	b.n	800627e <_strtol_l.isra.0+0x2e>
 80062ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80062ee:	2b19      	cmp	r3, #25
 80062f0:	d801      	bhi.n	80062f6 <_strtol_l.isra.0+0xa6>
 80062f2:	3c37      	subs	r4, #55	; 0x37
 80062f4:	e7e2      	b.n	80062bc <_strtol_l.isra.0+0x6c>
 80062f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80062fa:	2b19      	cmp	r3, #25
 80062fc:	d804      	bhi.n	8006308 <_strtol_l.isra.0+0xb8>
 80062fe:	3c57      	subs	r4, #87	; 0x57
 8006300:	e7dc      	b.n	80062bc <_strtol_l.isra.0+0x6c>
 8006302:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006306:	e7e5      	b.n	80062d4 <_strtol_l.isra.0+0x84>
 8006308:	1c7b      	adds	r3, r7, #1
 800630a:	d108      	bne.n	800631e <_strtol_l.isra.0+0xce>
 800630c:	2322      	movs	r3, #34	; 0x22
 800630e:	f8c8 3000 	str.w	r3, [r8]
 8006312:	4608      	mov	r0, r1
 8006314:	f1ba 0f00 	cmp.w	sl, #0
 8006318:	d107      	bne.n	800632a <_strtol_l.isra.0+0xda>
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	b102      	cbz	r2, 8006322 <_strtol_l.isra.0+0xd2>
 8006320:	4240      	negs	r0, r0
 8006322:	f1ba 0f00 	cmp.w	sl, #0
 8006326:	d0f8      	beq.n	800631a <_strtol_l.isra.0+0xca>
 8006328:	b10f      	cbz	r7, 800632e <_strtol_l.isra.0+0xde>
 800632a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800632e:	f8ca 9000 	str.w	r9, [sl]
 8006332:	e7f2      	b.n	800631a <_strtol_l.isra.0+0xca>
 8006334:	2430      	movs	r4, #48	; 0x30
 8006336:	2e00      	cmp	r6, #0
 8006338:	d1af      	bne.n	800629a <_strtol_l.isra.0+0x4a>
 800633a:	2608      	movs	r6, #8
 800633c:	e7ad      	b.n	800629a <_strtol_l.isra.0+0x4a>
 800633e:	2c30      	cmp	r4, #48	; 0x30
 8006340:	d0a3      	beq.n	800628a <_strtol_l.isra.0+0x3a>
 8006342:	260a      	movs	r6, #10
 8006344:	e7a9      	b.n	800629a <_strtol_l.isra.0+0x4a>
	...

08006348 <_strtol_r>:
 8006348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800634a:	4c06      	ldr	r4, [pc, #24]	; (8006364 <_strtol_r+0x1c>)
 800634c:	4d06      	ldr	r5, [pc, #24]	; (8006368 <_strtol_r+0x20>)
 800634e:	6824      	ldr	r4, [r4, #0]
 8006350:	6a24      	ldr	r4, [r4, #32]
 8006352:	2c00      	cmp	r4, #0
 8006354:	bf08      	it	eq
 8006356:	462c      	moveq	r4, r5
 8006358:	9400      	str	r4, [sp, #0]
 800635a:	f7ff ff79 	bl	8006250 <_strtol_l.isra.0>
 800635e:	b003      	add	sp, #12
 8006360:	bd30      	pop	{r4, r5, pc}
 8006362:	bf00      	nop
 8006364:	20000014 	.word	0x20000014
 8006368:	20000078 	.word	0x20000078

0800636c <quorem>:
 800636c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	6903      	ldr	r3, [r0, #16]
 8006372:	690c      	ldr	r4, [r1, #16]
 8006374:	42a3      	cmp	r3, r4
 8006376:	4680      	mov	r8, r0
 8006378:	f2c0 8082 	blt.w	8006480 <quorem+0x114>
 800637c:	3c01      	subs	r4, #1
 800637e:	f101 0714 	add.w	r7, r1, #20
 8006382:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006386:	f100 0614 	add.w	r6, r0, #20
 800638a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800638e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006392:	eb06 030c 	add.w	r3, r6, ip
 8006396:	3501      	adds	r5, #1
 8006398:	eb07 090c 	add.w	r9, r7, ip
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	fbb0 f5f5 	udiv	r5, r0, r5
 80063a2:	b395      	cbz	r5, 800640a <quorem+0x9e>
 80063a4:	f04f 0a00 	mov.w	sl, #0
 80063a8:	4638      	mov	r0, r7
 80063aa:	46b6      	mov	lr, r6
 80063ac:	46d3      	mov	fp, sl
 80063ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80063b2:	b293      	uxth	r3, r2
 80063b4:	fb05 a303 	mla	r3, r5, r3, sl
 80063b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063bc:	b29b      	uxth	r3, r3
 80063be:	ebab 0303 	sub.w	r3, fp, r3
 80063c2:	0c12      	lsrs	r2, r2, #16
 80063c4:	f8de b000 	ldr.w	fp, [lr]
 80063c8:	fb05 a202 	mla	r2, r5, r2, sl
 80063cc:	fa13 f38b 	uxtah	r3, r3, fp
 80063d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80063d4:	fa1f fb82 	uxth.w	fp, r2
 80063d8:	f8de 2000 	ldr.w	r2, [lr]
 80063dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80063e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ea:	4581      	cmp	r9, r0
 80063ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80063f0:	f84e 3b04 	str.w	r3, [lr], #4
 80063f4:	d2db      	bcs.n	80063ae <quorem+0x42>
 80063f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80063fa:	b933      	cbnz	r3, 800640a <quorem+0x9e>
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	3b04      	subs	r3, #4
 8006400:	429e      	cmp	r6, r3
 8006402:	461a      	mov	r2, r3
 8006404:	d330      	bcc.n	8006468 <quorem+0xfc>
 8006406:	f8c8 4010 	str.w	r4, [r8, #16]
 800640a:	4640      	mov	r0, r8
 800640c:	f001 fba6 	bl	8007b5c <__mcmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	db25      	blt.n	8006460 <quorem+0xf4>
 8006414:	3501      	adds	r5, #1
 8006416:	4630      	mov	r0, r6
 8006418:	f04f 0c00 	mov.w	ip, #0
 800641c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006420:	f8d0 e000 	ldr.w	lr, [r0]
 8006424:	b293      	uxth	r3, r2
 8006426:	ebac 0303 	sub.w	r3, ip, r3
 800642a:	0c12      	lsrs	r2, r2, #16
 800642c:	fa13 f38e 	uxtah	r3, r3, lr
 8006430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643e:	45b9      	cmp	r9, r7
 8006440:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006444:	f840 3b04 	str.w	r3, [r0], #4
 8006448:	d2e8      	bcs.n	800641c <quorem+0xb0>
 800644a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800644e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006452:	b92a      	cbnz	r2, 8006460 <quorem+0xf4>
 8006454:	3b04      	subs	r3, #4
 8006456:	429e      	cmp	r6, r3
 8006458:	461a      	mov	r2, r3
 800645a:	d30b      	bcc.n	8006474 <quorem+0x108>
 800645c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006460:	4628      	mov	r0, r5
 8006462:	b003      	add	sp, #12
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	3b04      	subs	r3, #4
 800646c:	2a00      	cmp	r2, #0
 800646e:	d1ca      	bne.n	8006406 <quorem+0x9a>
 8006470:	3c01      	subs	r4, #1
 8006472:	e7c5      	b.n	8006400 <quorem+0x94>
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	3b04      	subs	r3, #4
 8006478:	2a00      	cmp	r2, #0
 800647a:	d1ef      	bne.n	800645c <quorem+0xf0>
 800647c:	3c01      	subs	r4, #1
 800647e:	e7ea      	b.n	8006456 <quorem+0xea>
 8006480:	2000      	movs	r0, #0
 8006482:	e7ee      	b.n	8006462 <quorem+0xf6>
 8006484:	0000      	movs	r0, r0
	...

08006488 <_dtoa_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	ec57 6b10 	vmov	r6, r7, d0
 8006490:	b097      	sub	sp, #92	; 0x5c
 8006492:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006494:	9106      	str	r1, [sp, #24]
 8006496:	4604      	mov	r4, r0
 8006498:	920b      	str	r2, [sp, #44]	; 0x2c
 800649a:	9312      	str	r3, [sp, #72]	; 0x48
 800649c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064a0:	e9cd 6700 	strd	r6, r7, [sp]
 80064a4:	b93d      	cbnz	r5, 80064b6 <_dtoa_r+0x2e>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f001 f8e0 	bl	800766c <malloc>
 80064ac:	6260      	str	r0, [r4, #36]	; 0x24
 80064ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064b2:	6005      	str	r5, [r0, #0]
 80064b4:	60c5      	str	r5, [r0, #12]
 80064b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b8:	6819      	ldr	r1, [r3, #0]
 80064ba:	b151      	cbz	r1, 80064d2 <_dtoa_r+0x4a>
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	604a      	str	r2, [r1, #4]
 80064c0:	2301      	movs	r3, #1
 80064c2:	4093      	lsls	r3, r2
 80064c4:	608b      	str	r3, [r1, #8]
 80064c6:	4620      	mov	r0, r4
 80064c8:	f001 f929 	bl	800771e <_Bfree>
 80064cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	1e3b      	subs	r3, r7, #0
 80064d4:	bfbb      	ittet	lt
 80064d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064da:	9301      	strlt	r3, [sp, #4]
 80064dc:	2300      	movge	r3, #0
 80064de:	2201      	movlt	r2, #1
 80064e0:	bfac      	ite	ge
 80064e2:	f8c8 3000 	strge.w	r3, [r8]
 80064e6:	f8c8 2000 	strlt.w	r2, [r8]
 80064ea:	4baf      	ldr	r3, [pc, #700]	; (80067a8 <_dtoa_r+0x320>)
 80064ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064f0:	ea33 0308 	bics.w	r3, r3, r8
 80064f4:	d114      	bne.n	8006520 <_dtoa_r+0x98>
 80064f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	9b00      	ldr	r3, [sp, #0]
 8006500:	b923      	cbnz	r3, 800650c <_dtoa_r+0x84>
 8006502:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006506:	2800      	cmp	r0, #0
 8006508:	f000 8542 	beq.w	8006f90 <_dtoa_r+0xb08>
 800650c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800650e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80067bc <_dtoa_r+0x334>
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8544 	beq.w	8006fa0 <_dtoa_r+0xb18>
 8006518:	f10b 0303 	add.w	r3, fp, #3
 800651c:	f000 bd3e 	b.w	8006f9c <_dtoa_r+0xb14>
 8006520:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7fa facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006530:	4681      	mov	r9, r0
 8006532:	b168      	cbz	r0, 8006550 <_dtoa_r+0xc8>
 8006534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006536:	2301      	movs	r3, #1
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8524 	beq.w	8006f8a <_dtoa_r+0xb02>
 8006542:	4b9a      	ldr	r3, [pc, #616]	; (80067ac <_dtoa_r+0x324>)
 8006544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006546:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	f000 bd28 	b.w	8006fa0 <_dtoa_r+0xb18>
 8006550:	aa14      	add	r2, sp, #80	; 0x50
 8006552:	a915      	add	r1, sp, #84	; 0x54
 8006554:	ec47 6b10 	vmov	d0, r6, r7
 8006558:	4620      	mov	r0, r4
 800655a:	f001 fbed 	bl	8007d38 <__d2b>
 800655e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006562:	9004      	str	r0, [sp, #16]
 8006564:	2d00      	cmp	r5, #0
 8006566:	d07c      	beq.n	8006662 <_dtoa_r+0x1da>
 8006568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800656c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006570:	46b2      	mov	sl, r6
 8006572:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006576:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800657a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800657e:	2200      	movs	r2, #0
 8006580:	4b8b      	ldr	r3, [pc, #556]	; (80067b0 <_dtoa_r+0x328>)
 8006582:	4650      	mov	r0, sl
 8006584:	4659      	mov	r1, fp
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	a381      	add	r3, pc, #516	; (adr r3, 8006790 <_dtoa_r+0x308>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7fa f832 	bl	80005f8 <__aeabi_dmul>
 8006594:	a380      	add	r3, pc, #512	; (adr r3, 8006798 <_dtoa_r+0x310>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7f9 fe77 	bl	800028c <__adddf3>
 800659e:	4606      	mov	r6, r0
 80065a0:	4628      	mov	r0, r5
 80065a2:	460f      	mov	r7, r1
 80065a4:	f7f9 ffbe 	bl	8000524 <__aeabi_i2d>
 80065a8:	a37d      	add	r3, pc, #500	; (adr r3, 80067a0 <_dtoa_r+0x318>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4630      	mov	r0, r6
 80065b8:	4639      	mov	r1, r7
 80065ba:	f7f9 fe67 	bl	800028c <__adddf3>
 80065be:	4606      	mov	r6, r0
 80065c0:	460f      	mov	r7, r1
 80065c2:	f7fa fac9 	bl	8000b58 <__aeabi_d2iz>
 80065c6:	2200      	movs	r2, #0
 80065c8:	4682      	mov	sl, r0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa fa84 	bl	8000adc <__aeabi_dcmplt>
 80065d4:	b148      	cbz	r0, 80065ea <_dtoa_r+0x162>
 80065d6:	4650      	mov	r0, sl
 80065d8:	f7f9 ffa4 	bl	8000524 <__aeabi_i2d>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7fa fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 80065e4:	b908      	cbnz	r0, 80065ea <_dtoa_r+0x162>
 80065e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065ea:	f1ba 0f16 	cmp.w	sl, #22
 80065ee:	d859      	bhi.n	80066a4 <_dtoa_r+0x21c>
 80065f0:	4970      	ldr	r1, [pc, #448]	; (80067b4 <_dtoa_r+0x32c>)
 80065f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80065f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065fe:	f7fa fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8006602:	2800      	cmp	r0, #0
 8006604:	d050      	beq.n	80066a8 <_dtoa_r+0x220>
 8006606:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800660a:	2300      	movs	r3, #0
 800660c:	930f      	str	r3, [sp, #60]	; 0x3c
 800660e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006610:	1b5d      	subs	r5, r3, r5
 8006612:	f1b5 0801 	subs.w	r8, r5, #1
 8006616:	bf49      	itett	mi
 8006618:	f1c5 0301 	rsbmi	r3, r5, #1
 800661c:	2300      	movpl	r3, #0
 800661e:	9305      	strmi	r3, [sp, #20]
 8006620:	f04f 0800 	movmi.w	r8, #0
 8006624:	bf58      	it	pl
 8006626:	9305      	strpl	r3, [sp, #20]
 8006628:	f1ba 0f00 	cmp.w	sl, #0
 800662c:	db3e      	blt.n	80066ac <_dtoa_r+0x224>
 800662e:	2300      	movs	r3, #0
 8006630:	44d0      	add	r8, sl
 8006632:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	9b06      	ldr	r3, [sp, #24]
 800663a:	2b09      	cmp	r3, #9
 800663c:	f200 8090 	bhi.w	8006760 <_dtoa_r+0x2d8>
 8006640:	2b05      	cmp	r3, #5
 8006642:	bfc4      	itt	gt
 8006644:	3b04      	subgt	r3, #4
 8006646:	9306      	strgt	r3, [sp, #24]
 8006648:	9b06      	ldr	r3, [sp, #24]
 800664a:	f1a3 0302 	sub.w	r3, r3, #2
 800664e:	bfcc      	ite	gt
 8006650:	2500      	movgt	r5, #0
 8006652:	2501      	movle	r5, #1
 8006654:	2b03      	cmp	r3, #3
 8006656:	f200 808f 	bhi.w	8006778 <_dtoa_r+0x2f0>
 800665a:	e8df f003 	tbb	[pc, r3]
 800665e:	7f7d      	.short	0x7f7d
 8006660:	7131      	.short	0x7131
 8006662:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006666:	441d      	add	r5, r3
 8006668:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800666c:	2820      	cmp	r0, #32
 800666e:	dd13      	ble.n	8006698 <_dtoa_r+0x210>
 8006670:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006674:	9b00      	ldr	r3, [sp, #0]
 8006676:	fa08 f800 	lsl.w	r8, r8, r0
 800667a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800667e:	fa23 f000 	lsr.w	r0, r3, r0
 8006682:	ea48 0000 	orr.w	r0, r8, r0
 8006686:	f7f9 ff3d 	bl	8000504 <__aeabi_ui2d>
 800668a:	2301      	movs	r3, #1
 800668c:	4682      	mov	sl, r0
 800668e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006692:	3d01      	subs	r5, #1
 8006694:	9313      	str	r3, [sp, #76]	; 0x4c
 8006696:	e772      	b.n	800657e <_dtoa_r+0xf6>
 8006698:	9b00      	ldr	r3, [sp, #0]
 800669a:	f1c0 0020 	rsb	r0, r0, #32
 800669e:	fa03 f000 	lsl.w	r0, r3, r0
 80066a2:	e7f0      	b.n	8006686 <_dtoa_r+0x1fe>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e7b1      	b.n	800660c <_dtoa_r+0x184>
 80066a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80066aa:	e7b0      	b.n	800660e <_dtoa_r+0x186>
 80066ac:	9b05      	ldr	r3, [sp, #20]
 80066ae:	eba3 030a 	sub.w	r3, r3, sl
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	f1ca 0300 	rsb	r3, sl, #0
 80066b8:	9307      	str	r3, [sp, #28]
 80066ba:	2300      	movs	r3, #0
 80066bc:	930e      	str	r3, [sp, #56]	; 0x38
 80066be:	e7bb      	b.n	8006638 <_dtoa_r+0x1b0>
 80066c0:	2301      	movs	r3, #1
 80066c2:	930a      	str	r3, [sp, #40]	; 0x28
 80066c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd59      	ble.n	800677e <_dtoa_r+0x2f6>
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	4699      	mov	r9, r3
 80066ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066d0:	2200      	movs	r2, #0
 80066d2:	6072      	str	r2, [r6, #4]
 80066d4:	2204      	movs	r2, #4
 80066d6:	f102 0014 	add.w	r0, r2, #20
 80066da:	4298      	cmp	r0, r3
 80066dc:	6871      	ldr	r1, [r6, #4]
 80066de:	d953      	bls.n	8006788 <_dtoa_r+0x300>
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 ffe8 	bl	80076b6 <_Balloc>
 80066e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e8:	6030      	str	r0, [r6, #0]
 80066ea:	f1b9 0f0e 	cmp.w	r9, #14
 80066ee:	f8d3 b000 	ldr.w	fp, [r3]
 80066f2:	f200 80e6 	bhi.w	80068c2 <_dtoa_r+0x43a>
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	f000 80e3 	beq.w	80068c2 <_dtoa_r+0x43a>
 80066fc:	ed9d 7b00 	vldr	d7, [sp]
 8006700:	f1ba 0f00 	cmp.w	sl, #0
 8006704:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006708:	dd74      	ble.n	80067f4 <_dtoa_r+0x36c>
 800670a:	4a2a      	ldr	r2, [pc, #168]	; (80067b4 <_dtoa_r+0x32c>)
 800670c:	f00a 030f 	and.w	r3, sl, #15
 8006710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006714:	ed93 7b00 	vldr	d7, [r3]
 8006718:	ea4f 162a 	mov.w	r6, sl, asr #4
 800671c:	06f0      	lsls	r0, r6, #27
 800671e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006722:	d565      	bpl.n	80067f0 <_dtoa_r+0x368>
 8006724:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <_dtoa_r+0x330>)
 8006726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800672a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800672e:	f7fa f88d 	bl	800084c <__aeabi_ddiv>
 8006732:	e9cd 0100 	strd	r0, r1, [sp]
 8006736:	f006 060f 	and.w	r6, r6, #15
 800673a:	2503      	movs	r5, #3
 800673c:	4f1e      	ldr	r7, [pc, #120]	; (80067b8 <_dtoa_r+0x330>)
 800673e:	e04c      	b.n	80067da <_dtoa_r+0x352>
 8006740:	2301      	movs	r3, #1
 8006742:	930a      	str	r3, [sp, #40]	; 0x28
 8006744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006746:	4453      	add	r3, sl
 8006748:	f103 0901 	add.w	r9, r3, #1
 800674c:	9302      	str	r3, [sp, #8]
 800674e:	464b      	mov	r3, r9
 8006750:	2b01      	cmp	r3, #1
 8006752:	bfb8      	it	lt
 8006754:	2301      	movlt	r3, #1
 8006756:	e7ba      	b.n	80066ce <_dtoa_r+0x246>
 8006758:	2300      	movs	r3, #0
 800675a:	e7b2      	b.n	80066c2 <_dtoa_r+0x23a>
 800675c:	2300      	movs	r3, #0
 800675e:	e7f0      	b.n	8006742 <_dtoa_r+0x2ba>
 8006760:	2501      	movs	r5, #1
 8006762:	2300      	movs	r3, #0
 8006764:	9306      	str	r3, [sp, #24]
 8006766:	950a      	str	r5, [sp, #40]	; 0x28
 8006768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	4699      	mov	r9, r3
 8006770:	2200      	movs	r2, #0
 8006772:	2312      	movs	r3, #18
 8006774:	920b      	str	r2, [sp, #44]	; 0x2c
 8006776:	e7aa      	b.n	80066ce <_dtoa_r+0x246>
 8006778:	2301      	movs	r3, #1
 800677a:	930a      	str	r3, [sp, #40]	; 0x28
 800677c:	e7f4      	b.n	8006768 <_dtoa_r+0x2e0>
 800677e:	2301      	movs	r3, #1
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	4699      	mov	r9, r3
 8006784:	461a      	mov	r2, r3
 8006786:	e7f5      	b.n	8006774 <_dtoa_r+0x2ec>
 8006788:	3101      	adds	r1, #1
 800678a:	6071      	str	r1, [r6, #4]
 800678c:	0052      	lsls	r2, r2, #1
 800678e:	e7a2      	b.n	80066d6 <_dtoa_r+0x24e>
 8006790:	636f4361 	.word	0x636f4361
 8006794:	3fd287a7 	.word	0x3fd287a7
 8006798:	8b60c8b3 	.word	0x8b60c8b3
 800679c:	3fc68a28 	.word	0x3fc68a28
 80067a0:	509f79fb 	.word	0x509f79fb
 80067a4:	3fd34413 	.word	0x3fd34413
 80067a8:	7ff00000 	.word	0x7ff00000
 80067ac:	080101d1 	.word	0x080101d1
 80067b0:	3ff80000 	.word	0x3ff80000
 80067b4:	08010290 	.word	0x08010290
 80067b8:	08010268 	.word	0x08010268
 80067bc:	08010259 	.word	0x08010259
 80067c0:	07f1      	lsls	r1, r6, #31
 80067c2:	d508      	bpl.n	80067d6 <_dtoa_r+0x34e>
 80067c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067cc:	f7f9 ff14 	bl	80005f8 <__aeabi_dmul>
 80067d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067d4:	3501      	adds	r5, #1
 80067d6:	1076      	asrs	r6, r6, #1
 80067d8:	3708      	adds	r7, #8
 80067da:	2e00      	cmp	r6, #0
 80067dc:	d1f0      	bne.n	80067c0 <_dtoa_r+0x338>
 80067de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e6:	f7fa f831 	bl	800084c <__aeabi_ddiv>
 80067ea:	e9cd 0100 	strd	r0, r1, [sp]
 80067ee:	e01a      	b.n	8006826 <_dtoa_r+0x39e>
 80067f0:	2502      	movs	r5, #2
 80067f2:	e7a3      	b.n	800673c <_dtoa_r+0x2b4>
 80067f4:	f000 80a0 	beq.w	8006938 <_dtoa_r+0x4b0>
 80067f8:	f1ca 0600 	rsb	r6, sl, #0
 80067fc:	4b9f      	ldr	r3, [pc, #636]	; (8006a7c <_dtoa_r+0x5f4>)
 80067fe:	4fa0      	ldr	r7, [pc, #640]	; (8006a80 <_dtoa_r+0x5f8>)
 8006800:	f006 020f 	and.w	r2, r6, #15
 8006804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006810:	f7f9 fef2 	bl	80005f8 <__aeabi_dmul>
 8006814:	e9cd 0100 	strd	r0, r1, [sp]
 8006818:	1136      	asrs	r6, r6, #4
 800681a:	2300      	movs	r3, #0
 800681c:	2502      	movs	r5, #2
 800681e:	2e00      	cmp	r6, #0
 8006820:	d17f      	bne.n	8006922 <_dtoa_r+0x49a>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e1      	bne.n	80067ea <_dtoa_r+0x362>
 8006826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8087 	beq.w	800693c <_dtoa_r+0x4b4>
 800682e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006832:	2200      	movs	r2, #0
 8006834:	4b93      	ldr	r3, [pc, #588]	; (8006a84 <_dtoa_r+0x5fc>)
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7fa f94f 	bl	8000adc <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	d07c      	beq.n	800693c <_dtoa_r+0x4b4>
 8006842:	f1b9 0f00 	cmp.w	r9, #0
 8006846:	d079      	beq.n	800693c <_dtoa_r+0x4b4>
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	dd35      	ble.n	80068ba <_dtoa_r+0x432>
 800684e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006852:	9308      	str	r3, [sp, #32]
 8006854:	4639      	mov	r1, r7
 8006856:	2200      	movs	r2, #0
 8006858:	4b8b      	ldr	r3, [pc, #556]	; (8006a88 <_dtoa_r+0x600>)
 800685a:	4630      	mov	r0, r6
 800685c:	f7f9 fecc 	bl	80005f8 <__aeabi_dmul>
 8006860:	e9cd 0100 	strd	r0, r1, [sp]
 8006864:	9f02      	ldr	r7, [sp, #8]
 8006866:	3501      	adds	r5, #1
 8006868:	4628      	mov	r0, r5
 800686a:	f7f9 fe5b 	bl	8000524 <__aeabi_i2d>
 800686e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006872:	f7f9 fec1 	bl	80005f8 <__aeabi_dmul>
 8006876:	2200      	movs	r2, #0
 8006878:	4b84      	ldr	r3, [pc, #528]	; (8006a8c <_dtoa_r+0x604>)
 800687a:	f7f9 fd07 	bl	800028c <__adddf3>
 800687e:	4605      	mov	r5, r0
 8006880:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006884:	2f00      	cmp	r7, #0
 8006886:	d15d      	bne.n	8006944 <_dtoa_r+0x4bc>
 8006888:	2200      	movs	r2, #0
 800688a:	4b81      	ldr	r3, [pc, #516]	; (8006a90 <_dtoa_r+0x608>)
 800688c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006890:	f7f9 fcfa 	bl	8000288 <__aeabi_dsub>
 8006894:	462a      	mov	r2, r5
 8006896:	4633      	mov	r3, r6
 8006898:	e9cd 0100 	strd	r0, r1, [sp]
 800689c:	f7fa f93c 	bl	8000b18 <__aeabi_dcmpgt>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f040 8288 	bne.w	8006db6 <_dtoa_r+0x92e>
 80068a6:	462a      	mov	r2, r5
 80068a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068b0:	f7fa f914 	bl	8000adc <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 827c 	bne.w	8006db2 <_dtoa_r+0x92a>
 80068ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068be:	e9cd 2300 	strd	r2, r3, [sp]
 80068c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f2c0 8150 	blt.w	8006b6a <_dtoa_r+0x6e2>
 80068ca:	f1ba 0f0e 	cmp.w	sl, #14
 80068ce:	f300 814c 	bgt.w	8006b6a <_dtoa_r+0x6e2>
 80068d2:	4b6a      	ldr	r3, [pc, #424]	; (8006a7c <_dtoa_r+0x5f4>)
 80068d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068d8:	ed93 7b00 	vldr	d7, [r3]
 80068dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068e4:	f280 80d8 	bge.w	8006a98 <_dtoa_r+0x610>
 80068e8:	f1b9 0f00 	cmp.w	r9, #0
 80068ec:	f300 80d4 	bgt.w	8006a98 <_dtoa_r+0x610>
 80068f0:	f040 825e 	bne.w	8006db0 <_dtoa_r+0x928>
 80068f4:	2200      	movs	r2, #0
 80068f6:	4b66      	ldr	r3, [pc, #408]	; (8006a90 <_dtoa_r+0x608>)
 80068f8:	ec51 0b17 	vmov	r0, r1, d7
 80068fc:	f7f9 fe7c 	bl	80005f8 <__aeabi_dmul>
 8006900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006904:	f7fa f8fe 	bl	8000b04 <__aeabi_dcmpge>
 8006908:	464f      	mov	r7, r9
 800690a:	464e      	mov	r6, r9
 800690c:	2800      	cmp	r0, #0
 800690e:	f040 8234 	bne.w	8006d7a <_dtoa_r+0x8f2>
 8006912:	2331      	movs	r3, #49	; 0x31
 8006914:	f10b 0501 	add.w	r5, fp, #1
 8006918:	f88b 3000 	strb.w	r3, [fp]
 800691c:	f10a 0a01 	add.w	sl, sl, #1
 8006920:	e22f      	b.n	8006d82 <_dtoa_r+0x8fa>
 8006922:	07f2      	lsls	r2, r6, #31
 8006924:	d505      	bpl.n	8006932 <_dtoa_r+0x4aa>
 8006926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692a:	f7f9 fe65 	bl	80005f8 <__aeabi_dmul>
 800692e:	3501      	adds	r5, #1
 8006930:	2301      	movs	r3, #1
 8006932:	1076      	asrs	r6, r6, #1
 8006934:	3708      	adds	r7, #8
 8006936:	e772      	b.n	800681e <_dtoa_r+0x396>
 8006938:	2502      	movs	r5, #2
 800693a:	e774      	b.n	8006826 <_dtoa_r+0x39e>
 800693c:	f8cd a020 	str.w	sl, [sp, #32]
 8006940:	464f      	mov	r7, r9
 8006942:	e791      	b.n	8006868 <_dtoa_r+0x3e0>
 8006944:	4b4d      	ldr	r3, [pc, #308]	; (8006a7c <_dtoa_r+0x5f4>)
 8006946:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800694a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	d047      	beq.n	80069e4 <_dtoa_r+0x55c>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	2000      	movs	r0, #0
 800695a:	494e      	ldr	r1, [pc, #312]	; (8006a94 <_dtoa_r+0x60c>)
 800695c:	f7f9 ff76 	bl	800084c <__aeabi_ddiv>
 8006960:	462a      	mov	r2, r5
 8006962:	4633      	mov	r3, r6
 8006964:	f7f9 fc90 	bl	8000288 <__aeabi_dsub>
 8006968:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800696c:	465d      	mov	r5, fp
 800696e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006972:	f7fa f8f1 	bl	8000b58 <__aeabi_d2iz>
 8006976:	4606      	mov	r6, r0
 8006978:	f7f9 fdd4 	bl	8000524 <__aeabi_i2d>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006984:	f7f9 fc80 	bl	8000288 <__aeabi_dsub>
 8006988:	3630      	adds	r6, #48	; 0x30
 800698a:	f805 6b01 	strb.w	r6, [r5], #1
 800698e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006992:	e9cd 0100 	strd	r0, r1, [sp]
 8006996:	f7fa f8a1 	bl	8000adc <__aeabi_dcmplt>
 800699a:	2800      	cmp	r0, #0
 800699c:	d163      	bne.n	8006a66 <_dtoa_r+0x5de>
 800699e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a2:	2000      	movs	r0, #0
 80069a4:	4937      	ldr	r1, [pc, #220]	; (8006a84 <_dtoa_r+0x5fc>)
 80069a6:	f7f9 fc6f 	bl	8000288 <__aeabi_dsub>
 80069aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069ae:	f7fa f895 	bl	8000adc <__aeabi_dcmplt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f040 80b7 	bne.w	8006b26 <_dtoa_r+0x69e>
 80069b8:	eba5 030b 	sub.w	r3, r5, fp
 80069bc:	429f      	cmp	r7, r3
 80069be:	f77f af7c 	ble.w	80068ba <_dtoa_r+0x432>
 80069c2:	2200      	movs	r2, #0
 80069c4:	4b30      	ldr	r3, [pc, #192]	; (8006a88 <_dtoa_r+0x600>)
 80069c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069ca:	f7f9 fe15 	bl	80005f8 <__aeabi_dmul>
 80069ce:	2200      	movs	r2, #0
 80069d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069d4:	4b2c      	ldr	r3, [pc, #176]	; (8006a88 <_dtoa_r+0x600>)
 80069d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069da:	f7f9 fe0d 	bl	80005f8 <__aeabi_dmul>
 80069de:	e9cd 0100 	strd	r0, r1, [sp]
 80069e2:	e7c4      	b.n	800696e <_dtoa_r+0x4e6>
 80069e4:	462a      	mov	r2, r5
 80069e6:	4633      	mov	r3, r6
 80069e8:	f7f9 fe06 	bl	80005f8 <__aeabi_dmul>
 80069ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069f0:	eb0b 0507 	add.w	r5, fp, r7
 80069f4:	465e      	mov	r6, fp
 80069f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069fa:	f7fa f8ad 	bl	8000b58 <__aeabi_d2iz>
 80069fe:	4607      	mov	r7, r0
 8006a00:	f7f9 fd90 	bl	8000524 <__aeabi_i2d>
 8006a04:	3730      	adds	r7, #48	; 0x30
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a0e:	f7f9 fc3b 	bl	8000288 <__aeabi_dsub>
 8006a12:	f806 7b01 	strb.w	r7, [r6], #1
 8006a16:	42ae      	cmp	r6, r5
 8006a18:	e9cd 0100 	strd	r0, r1, [sp]
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	d126      	bne.n	8006a70 <_dtoa_r+0x5e8>
 8006a22:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <_dtoa_r+0x60c>)
 8006a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a28:	f7f9 fc30 	bl	800028c <__adddf3>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a34:	f7fa f870 	bl	8000b18 <__aeabi_dcmpgt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d174      	bne.n	8006b26 <_dtoa_r+0x69e>
 8006a3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a40:	2000      	movs	r0, #0
 8006a42:	4914      	ldr	r1, [pc, #80]	; (8006a94 <_dtoa_r+0x60c>)
 8006a44:	f7f9 fc20 	bl	8000288 <__aeabi_dsub>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a50:	f7fa f844 	bl	8000adc <__aeabi_dcmplt>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f43f af30 	beq.w	80068ba <_dtoa_r+0x432>
 8006a5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a5e:	2b30      	cmp	r3, #48	; 0x30
 8006a60:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006a64:	d002      	beq.n	8006a6c <_dtoa_r+0x5e4>
 8006a66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a6a:	e04a      	b.n	8006b02 <_dtoa_r+0x67a>
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	e7f4      	b.n	8006a5a <_dtoa_r+0x5d2>
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <_dtoa_r+0x600>)
 8006a72:	f7f9 fdc1 	bl	80005f8 <__aeabi_dmul>
 8006a76:	e9cd 0100 	strd	r0, r1, [sp]
 8006a7a:	e7bc      	b.n	80069f6 <_dtoa_r+0x56e>
 8006a7c:	08010290 	.word	0x08010290
 8006a80:	08010268 	.word	0x08010268
 8006a84:	3ff00000 	.word	0x3ff00000
 8006a88:	40240000 	.word	0x40240000
 8006a8c:	401c0000 	.word	0x401c0000
 8006a90:	40140000 	.word	0x40140000
 8006a94:	3fe00000 	.word	0x3fe00000
 8006a98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a9c:	465d      	mov	r5, fp
 8006a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	f7f9 fed1 	bl	800084c <__aeabi_ddiv>
 8006aaa:	f7fa f855 	bl	8000b58 <__aeabi_d2iz>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	f7f9 fd38 	bl	8000524 <__aeabi_i2d>
 8006ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006ac8:	f7f9 fbde 	bl	8000288 <__aeabi_dsub>
 8006acc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ad0:	eba5 060b 	sub.w	r6, r5, fp
 8006ad4:	45b1      	cmp	r9, r6
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	d139      	bne.n	8006b50 <_dtoa_r+0x6c8>
 8006adc:	f7f9 fbd6 	bl	800028c <__adddf3>
 8006ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	f7fa f816 	bl	8000b18 <__aeabi_dcmpgt>
 8006aec:	b9c8      	cbnz	r0, 8006b22 <_dtoa_r+0x69a>
 8006aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006afa:	b110      	cbz	r0, 8006b02 <_dtoa_r+0x67a>
 8006afc:	f018 0f01 	tst.w	r8, #1
 8006b00:	d10f      	bne.n	8006b22 <_dtoa_r+0x69a>
 8006b02:	9904      	ldr	r1, [sp, #16]
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fe0a 	bl	800771e <_Bfree>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b0e:	702b      	strb	r3, [r5, #0]
 8006b10:	f10a 0301 	add.w	r3, sl, #1
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8241 	beq.w	8006fa0 <_dtoa_r+0xb18>
 8006b1e:	601d      	str	r5, [r3, #0]
 8006b20:	e23e      	b.n	8006fa0 <_dtoa_r+0xb18>
 8006b22:	f8cd a020 	str.w	sl, [sp, #32]
 8006b26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b2a:	2a39      	cmp	r2, #57	; 0x39
 8006b2c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006b30:	d108      	bne.n	8006b44 <_dtoa_r+0x6bc>
 8006b32:	459b      	cmp	fp, r3
 8006b34:	d10a      	bne.n	8006b4c <_dtoa_r+0x6c4>
 8006b36:	9b08      	ldr	r3, [sp, #32]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	9308      	str	r3, [sp, #32]
 8006b3c:	2330      	movs	r3, #48	; 0x30
 8006b3e:	f88b 3000 	strb.w	r3, [fp]
 8006b42:	465b      	mov	r3, fp
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	3201      	adds	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e78c      	b.n	8006a66 <_dtoa_r+0x5de>
 8006b4c:	461d      	mov	r5, r3
 8006b4e:	e7ea      	b.n	8006b26 <_dtoa_r+0x69e>
 8006b50:	2200      	movs	r2, #0
 8006b52:	4b9b      	ldr	r3, [pc, #620]	; (8006dc0 <_dtoa_r+0x938>)
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	f7f9 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d09a      	beq.n	8006a9e <_dtoa_r+0x616>
 8006b68:	e7cb      	b.n	8006b02 <_dtoa_r+0x67a>
 8006b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	f000 808b 	beq.w	8006c88 <_dtoa_r+0x800>
 8006b72:	9a06      	ldr	r2, [sp, #24]
 8006b74:	2a01      	cmp	r2, #1
 8006b76:	dc6e      	bgt.n	8006c56 <_dtoa_r+0x7ce>
 8006b78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	d067      	beq.n	8006c4e <_dtoa_r+0x7c6>
 8006b7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b82:	9f07      	ldr	r7, [sp, #28]
 8006b84:	9d05      	ldr	r5, [sp, #20]
 8006b86:	9a05      	ldr	r2, [sp, #20]
 8006b88:	2101      	movs	r1, #1
 8006b8a:	441a      	add	r2, r3
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	9205      	str	r2, [sp, #20]
 8006b90:	4498      	add	r8, r3
 8006b92:	f000 fea2 	bl	80078da <__i2b>
 8006b96:	4606      	mov	r6, r0
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	dd0c      	ble.n	8006bb6 <_dtoa_r+0x72e>
 8006b9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ba0:	dd09      	ble.n	8006bb6 <_dtoa_r+0x72e>
 8006ba2:	4545      	cmp	r5, r8
 8006ba4:	9a05      	ldr	r2, [sp, #20]
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	bfa8      	it	ge
 8006baa:	4643      	movge	r3, r8
 8006bac:	1ad2      	subs	r2, r2, r3
 8006bae:	9205      	str	r2, [sp, #20]
 8006bb0:	1aed      	subs	r5, r5, r3
 8006bb2:	eba8 0803 	sub.w	r8, r8, r3
 8006bb6:	9b07      	ldr	r3, [sp, #28]
 8006bb8:	b1eb      	cbz	r3, 8006bf6 <_dtoa_r+0x76e>
 8006bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d067      	beq.n	8006c90 <_dtoa_r+0x808>
 8006bc0:	b18f      	cbz	r7, 8006be6 <_dtoa_r+0x75e>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 ff26 	bl	8007a18 <__pow5mult>
 8006bcc:	9a04      	ldr	r2, [sp, #16]
 8006bce:	4601      	mov	r1, r0
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fe8a 	bl	80078ec <__multiply>
 8006bd8:	9904      	ldr	r1, [sp, #16]
 8006bda:	9008      	str	r0, [sp, #32]
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fd9e 	bl	800771e <_Bfree>
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	9b07      	ldr	r3, [sp, #28]
 8006be8:	1bda      	subs	r2, r3, r7
 8006bea:	d004      	beq.n	8006bf6 <_dtoa_r+0x76e>
 8006bec:	9904      	ldr	r1, [sp, #16]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 ff12 	bl	8007a18 <__pow5mult>
 8006bf4:	9004      	str	r0, [sp, #16]
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fe6e 	bl	80078da <__i2b>
 8006bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c00:	4607      	mov	r7, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 81d0 	beq.w	8006fa8 <_dtoa_r+0xb20>
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 ff03 	bl	8007a18 <__pow5mult>
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	4607      	mov	r7, r0
 8006c18:	dc40      	bgt.n	8006c9c <_dtoa_r+0x814>
 8006c1a:	9b00      	ldr	r3, [sp, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d139      	bne.n	8006c94 <_dtoa_r+0x80c>
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d136      	bne.n	8006c98 <_dtoa_r+0x810>
 8006c2a:	9b01      	ldr	r3, [sp, #4]
 8006c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	0d1b      	lsrs	r3, r3, #20
 8006c32:	051b      	lsls	r3, r3, #20
 8006c34:	b12b      	cbz	r3, 8006c42 <_dtoa_r+0x7ba>
 8006c36:	9b05      	ldr	r3, [sp, #20]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	9305      	str	r3, [sp, #20]
 8006c3c:	f108 0801 	add.w	r8, r8, #1
 8006c40:	2301      	movs	r3, #1
 8006c42:	9307      	str	r3, [sp, #28]
 8006c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d12a      	bne.n	8006ca0 <_dtoa_r+0x818>
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	e030      	b.n	8006cb0 <_dtoa_r+0x828>
 8006c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c54:	e795      	b.n	8006b82 <_dtoa_r+0x6fa>
 8006c56:	9b07      	ldr	r3, [sp, #28]
 8006c58:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006c5c:	42bb      	cmp	r3, r7
 8006c5e:	bfbf      	itttt	lt
 8006c60:	9b07      	ldrlt	r3, [sp, #28]
 8006c62:	9707      	strlt	r7, [sp, #28]
 8006c64:	1afa      	sublt	r2, r7, r3
 8006c66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c68:	bfbb      	ittet	lt
 8006c6a:	189b      	addlt	r3, r3, r2
 8006c6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c6e:	1bdf      	subge	r7, r3, r7
 8006c70:	2700      	movlt	r7, #0
 8006c72:	f1b9 0f00 	cmp.w	r9, #0
 8006c76:	bfb5      	itete	lt
 8006c78:	9b05      	ldrlt	r3, [sp, #20]
 8006c7a:	9d05      	ldrge	r5, [sp, #20]
 8006c7c:	eba3 0509 	sublt.w	r5, r3, r9
 8006c80:	464b      	movge	r3, r9
 8006c82:	bfb8      	it	lt
 8006c84:	2300      	movlt	r3, #0
 8006c86:	e77e      	b.n	8006b86 <_dtoa_r+0x6fe>
 8006c88:	9f07      	ldr	r7, [sp, #28]
 8006c8a:	9d05      	ldr	r5, [sp, #20]
 8006c8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006c8e:	e783      	b.n	8006b98 <_dtoa_r+0x710>
 8006c90:	9a07      	ldr	r2, [sp, #28]
 8006c92:	e7ab      	b.n	8006bec <_dtoa_r+0x764>
 8006c94:	2300      	movs	r3, #0
 8006c96:	e7d4      	b.n	8006c42 <_dtoa_r+0x7ba>
 8006c98:	9b00      	ldr	r3, [sp, #0]
 8006c9a:	e7d2      	b.n	8006c42 <_dtoa_r+0x7ba>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006ca6:	6918      	ldr	r0, [r3, #16]
 8006ca8:	f000 fdc9 	bl	800783e <__hi0bits>
 8006cac:	f1c0 0020 	rsb	r0, r0, #32
 8006cb0:	4440      	add	r0, r8
 8006cb2:	f010 001f 	ands.w	r0, r0, #31
 8006cb6:	d047      	beq.n	8006d48 <_dtoa_r+0x8c0>
 8006cb8:	f1c0 0320 	rsb	r3, r0, #32
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	dd3b      	ble.n	8006d38 <_dtoa_r+0x8b0>
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	f1c0 001c 	rsb	r0, r0, #28
 8006cc6:	4403      	add	r3, r0
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	4405      	add	r5, r0
 8006ccc:	4480      	add	r8, r0
 8006cce:	9b05      	ldr	r3, [sp, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dd05      	ble.n	8006ce0 <_dtoa_r+0x858>
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	9904      	ldr	r1, [sp, #16]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 feeb 	bl	8007ab4 <__lshift>
 8006cde:	9004      	str	r0, [sp, #16]
 8006ce0:	f1b8 0f00 	cmp.w	r8, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x86a>
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	4642      	mov	r2, r8
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 fee2 	bl	8007ab4 <__lshift>
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf4:	b353      	cbz	r3, 8006d4c <_dtoa_r+0x8c4>
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	9804      	ldr	r0, [sp, #16]
 8006cfa:	f000 ff2f 	bl	8007b5c <__mcmp>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	da24      	bge.n	8006d4c <_dtoa_r+0x8c4>
 8006d02:	2300      	movs	r3, #0
 8006d04:	220a      	movs	r2, #10
 8006d06:	9904      	ldr	r1, [sp, #16]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fd1f 	bl	800774c <__multadd>
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d10:	9004      	str	r0, [sp, #16]
 8006d12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 814d 	beq.w	8006fb6 <_dtoa_r+0xb2e>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4631      	mov	r1, r6
 8006d20:	220a      	movs	r2, #10
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fd12 	bl	800774c <__multadd>
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	dc4f      	bgt.n	8006dd0 <_dtoa_r+0x948>
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	dd4c      	ble.n	8006dd0 <_dtoa_r+0x948>
 8006d36:	e011      	b.n	8006d5c <_dtoa_r+0x8d4>
 8006d38:	d0c9      	beq.n	8006cce <_dtoa_r+0x846>
 8006d3a:	9a05      	ldr	r2, [sp, #20]
 8006d3c:	331c      	adds	r3, #28
 8006d3e:	441a      	add	r2, r3
 8006d40:	9205      	str	r2, [sp, #20]
 8006d42:	441d      	add	r5, r3
 8006d44:	4498      	add	r8, r3
 8006d46:	e7c2      	b.n	8006cce <_dtoa_r+0x846>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	e7f6      	b.n	8006d3a <_dtoa_r+0x8b2>
 8006d4c:	f1b9 0f00 	cmp.w	r9, #0
 8006d50:	dc38      	bgt.n	8006dc4 <_dtoa_r+0x93c>
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	dd35      	ble.n	8006dc4 <_dtoa_r+0x93c>
 8006d58:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	b963      	cbnz	r3, 8006d7a <_dtoa_r+0x8f2>
 8006d60:	4639      	mov	r1, r7
 8006d62:	2205      	movs	r2, #5
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 fcf1 	bl	800774c <__multadd>
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	9804      	ldr	r0, [sp, #16]
 8006d70:	f000 fef4 	bl	8007b5c <__mcmp>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f73f adcc 	bgt.w	8006912 <_dtoa_r+0x48a>
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d7c:	465d      	mov	r5, fp
 8006d7e:	ea6f 0a03 	mvn.w	sl, r3
 8006d82:	f04f 0900 	mov.w	r9, #0
 8006d86:	4639      	mov	r1, r7
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fcc8 	bl	800771e <_Bfree>
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	f43f aeb7 	beq.w	8006b02 <_dtoa_r+0x67a>
 8006d94:	f1b9 0f00 	cmp.w	r9, #0
 8006d98:	d005      	beq.n	8006da6 <_dtoa_r+0x91e>
 8006d9a:	45b1      	cmp	r9, r6
 8006d9c:	d003      	beq.n	8006da6 <_dtoa_r+0x91e>
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fcbc 	bl	800771e <_Bfree>
 8006da6:	4631      	mov	r1, r6
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fcb8 	bl	800771e <_Bfree>
 8006dae:	e6a8      	b.n	8006b02 <_dtoa_r+0x67a>
 8006db0:	2700      	movs	r7, #0
 8006db2:	463e      	mov	r6, r7
 8006db4:	e7e1      	b.n	8006d7a <_dtoa_r+0x8f2>
 8006db6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006dba:	463e      	mov	r6, r7
 8006dbc:	e5a9      	b.n	8006912 <_dtoa_r+0x48a>
 8006dbe:	bf00      	nop
 8006dc0:	40240000 	.word	0x40240000
 8006dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 80fa 	beq.w	8006fc4 <_dtoa_r+0xb3c>
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	dd05      	ble.n	8006de0 <_dtoa_r+0x958>
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	462a      	mov	r2, r5
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fe6b 	bl	8007ab4 <__lshift>
 8006dde:	4606      	mov	r6, r0
 8006de0:	9b07      	ldr	r3, [sp, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d04c      	beq.n	8006e80 <_dtoa_r+0x9f8>
 8006de6:	6871      	ldr	r1, [r6, #4]
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fc64 	bl	80076b6 <_Balloc>
 8006dee:	6932      	ldr	r2, [r6, #16]
 8006df0:	3202      	adds	r2, #2
 8006df2:	4605      	mov	r5, r0
 8006df4:	0092      	lsls	r2, r2, #2
 8006df6:	f106 010c 	add.w	r1, r6, #12
 8006dfa:	300c      	adds	r0, #12
 8006dfc:	f000 fc50 	bl	80076a0 <memcpy>
 8006e00:	2201      	movs	r2, #1
 8006e02:	4629      	mov	r1, r5
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fe55 	bl	8007ab4 <__lshift>
 8006e0a:	9b00      	ldr	r3, [sp, #0]
 8006e0c:	f8cd b014 	str.w	fp, [sp, #20]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	46b1      	mov	r9, r6
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	4606      	mov	r6, r0
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	9804      	ldr	r0, [sp, #16]
 8006e1e:	f7ff faa5 	bl	800636c <quorem>
 8006e22:	4649      	mov	r1, r9
 8006e24:	4605      	mov	r5, r0
 8006e26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e2a:	9804      	ldr	r0, [sp, #16]
 8006e2c:	f000 fe96 	bl	8007b5c <__mcmp>
 8006e30:	4632      	mov	r2, r6
 8006e32:	9000      	str	r0, [sp, #0]
 8006e34:	4639      	mov	r1, r7
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 feaa 	bl	8007b90 <__mdiff>
 8006e3c:	68c3      	ldr	r3, [r0, #12]
 8006e3e:	4602      	mov	r2, r0
 8006e40:	bb03      	cbnz	r3, 8006e84 <_dtoa_r+0x9fc>
 8006e42:	4601      	mov	r1, r0
 8006e44:	9008      	str	r0, [sp, #32]
 8006e46:	9804      	ldr	r0, [sp, #16]
 8006e48:	f000 fe88 	bl	8007b5c <__mcmp>
 8006e4c:	9a08      	ldr	r2, [sp, #32]
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4611      	mov	r1, r2
 8006e52:	4620      	mov	r0, r4
 8006e54:	9308      	str	r3, [sp, #32]
 8006e56:	f000 fc62 	bl	800771e <_Bfree>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	b9a3      	cbnz	r3, 8006e88 <_dtoa_r+0xa00>
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	b992      	cbnz	r2, 8006e88 <_dtoa_r+0xa00>
 8006e62:	9a07      	ldr	r2, [sp, #28]
 8006e64:	b982      	cbnz	r2, 8006e88 <_dtoa_r+0xa00>
 8006e66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e6a:	d029      	beq.n	8006ec0 <_dtoa_r+0xa38>
 8006e6c:	9b00      	ldr	r3, [sp, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dd01      	ble.n	8006e76 <_dtoa_r+0x9ee>
 8006e72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	1c5d      	adds	r5, r3, #1
 8006e7a:	f883 8000 	strb.w	r8, [r3]
 8006e7e:	e782      	b.n	8006d86 <_dtoa_r+0x8fe>
 8006e80:	4630      	mov	r0, r6
 8006e82:	e7c2      	b.n	8006e0a <_dtoa_r+0x982>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e7e3      	b.n	8006e50 <_dtoa_r+0x9c8>
 8006e88:	9a00      	ldr	r2, [sp, #0]
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	db04      	blt.n	8006e98 <_dtoa_r+0xa10>
 8006e8e:	d125      	bne.n	8006edc <_dtoa_r+0xa54>
 8006e90:	9a06      	ldr	r2, [sp, #24]
 8006e92:	bb1a      	cbnz	r2, 8006edc <_dtoa_r+0xa54>
 8006e94:	9a07      	ldr	r2, [sp, #28]
 8006e96:	bb0a      	cbnz	r2, 8006edc <_dtoa_r+0xa54>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	ddec      	ble.n	8006e76 <_dtoa_r+0x9ee>
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	9904      	ldr	r1, [sp, #16]
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fe07 	bl	8007ab4 <__lshift>
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	9004      	str	r0, [sp, #16]
 8006eaa:	f000 fe57 	bl	8007b5c <__mcmp>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dc03      	bgt.n	8006eba <_dtoa_r+0xa32>
 8006eb2:	d1e0      	bne.n	8006e76 <_dtoa_r+0x9ee>
 8006eb4:	f018 0f01 	tst.w	r8, #1
 8006eb8:	d0dd      	beq.n	8006e76 <_dtoa_r+0x9ee>
 8006eba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ebe:	d1d8      	bne.n	8006e72 <_dtoa_r+0x9ea>
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	9a05      	ldr	r2, [sp, #20]
 8006ec4:	1c5d      	adds	r5, r3, #1
 8006ec6:	2339      	movs	r3, #57	; 0x39
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ece:	2b39      	cmp	r3, #57	; 0x39
 8006ed0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006ed4:	d04f      	beq.n	8006f76 <_dtoa_r+0xaee>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	7013      	strb	r3, [r2, #0]
 8006eda:	e754      	b.n	8006d86 <_dtoa_r+0x8fe>
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f102 0501 	add.w	r5, r2, #1
 8006ee4:	dd06      	ble.n	8006ef4 <_dtoa_r+0xa6c>
 8006ee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006eea:	d0e9      	beq.n	8006ec0 <_dtoa_r+0xa38>
 8006eec:	f108 0801 	add.w	r8, r8, #1
 8006ef0:	9b05      	ldr	r3, [sp, #20]
 8006ef2:	e7c2      	b.n	8006e7a <_dtoa_r+0x9f2>
 8006ef4:	9a02      	ldr	r2, [sp, #8]
 8006ef6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006efa:	eba5 030b 	sub.w	r3, r5, fp
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d021      	beq.n	8006f46 <_dtoa_r+0xabe>
 8006f02:	2300      	movs	r3, #0
 8006f04:	220a      	movs	r2, #10
 8006f06:	9904      	ldr	r1, [sp, #16]
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fc1f 	bl	800774c <__multadd>
 8006f0e:	45b1      	cmp	r9, r6
 8006f10:	9004      	str	r0, [sp, #16]
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	f04f 020a 	mov.w	r2, #10
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	d105      	bne.n	8006f2c <_dtoa_r+0xaa4>
 8006f20:	f000 fc14 	bl	800774c <__multadd>
 8006f24:	4681      	mov	r9, r0
 8006f26:	4606      	mov	r6, r0
 8006f28:	9505      	str	r5, [sp, #20]
 8006f2a:	e776      	b.n	8006e1a <_dtoa_r+0x992>
 8006f2c:	f000 fc0e 	bl	800774c <__multadd>
 8006f30:	4631      	mov	r1, r6
 8006f32:	4681      	mov	r9, r0
 8006f34:	2300      	movs	r3, #0
 8006f36:	220a      	movs	r2, #10
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fc07 	bl	800774c <__multadd>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	e7f2      	b.n	8006f28 <_dtoa_r+0xaa0>
 8006f42:	f04f 0900 	mov.w	r9, #0
 8006f46:	2201      	movs	r2, #1
 8006f48:	9904      	ldr	r1, [sp, #16]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fdb2 	bl	8007ab4 <__lshift>
 8006f50:	4639      	mov	r1, r7
 8006f52:	9004      	str	r0, [sp, #16]
 8006f54:	f000 fe02 	bl	8007b5c <__mcmp>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	dcb6      	bgt.n	8006eca <_dtoa_r+0xa42>
 8006f5c:	d102      	bne.n	8006f64 <_dtoa_r+0xadc>
 8006f5e:	f018 0f01 	tst.w	r8, #1
 8006f62:	d1b2      	bne.n	8006eca <_dtoa_r+0xa42>
 8006f64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006f6e:	f47f af0a 	bne.w	8006d86 <_dtoa_r+0x8fe>
 8006f72:	4615      	mov	r5, r2
 8006f74:	e7f6      	b.n	8006f64 <_dtoa_r+0xadc>
 8006f76:	4593      	cmp	fp, r2
 8006f78:	d105      	bne.n	8006f86 <_dtoa_r+0xafe>
 8006f7a:	2331      	movs	r3, #49	; 0x31
 8006f7c:	f10a 0a01 	add.w	sl, sl, #1
 8006f80:	f88b 3000 	strb.w	r3, [fp]
 8006f84:	e6ff      	b.n	8006d86 <_dtoa_r+0x8fe>
 8006f86:	4615      	mov	r5, r2
 8006f88:	e79f      	b.n	8006eca <_dtoa_r+0xa42>
 8006f8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ff0 <_dtoa_r+0xb68>
 8006f8e:	e007      	b.n	8006fa0 <_dtoa_r+0xb18>
 8006f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006ff4 <_dtoa_r+0xb6c>
 8006f96:	b11b      	cbz	r3, 8006fa0 <_dtoa_r+0xb18>
 8006f98:	f10b 0308 	add.w	r3, fp, #8
 8006f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	b017      	add	sp, #92	; 0x5c
 8006fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa8:	9b06      	ldr	r3, [sp, #24]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	f77f ae35 	ble.w	8006c1a <_dtoa_r+0x792>
 8006fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb2:	9307      	str	r3, [sp, #28]
 8006fb4:	e649      	b.n	8006c4a <_dtoa_r+0x7c2>
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dc03      	bgt.n	8006fc4 <_dtoa_r+0xb3c>
 8006fbc:	9b06      	ldr	r3, [sp, #24]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	f73f aecc 	bgt.w	8006d5c <_dtoa_r+0x8d4>
 8006fc4:	465d      	mov	r5, fp
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	9804      	ldr	r0, [sp, #16]
 8006fca:	f7ff f9cf 	bl	800636c <quorem>
 8006fce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006fd2:	f805 8b01 	strb.w	r8, [r5], #1
 8006fd6:	9a02      	ldr	r2, [sp, #8]
 8006fd8:	eba5 030b 	sub.w	r3, r5, fp
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	ddb0      	ble.n	8006f42 <_dtoa_r+0xaba>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	220a      	movs	r2, #10
 8006fe4:	9904      	ldr	r1, [sp, #16]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 fbb0 	bl	800774c <__multadd>
 8006fec:	9004      	str	r0, [sp, #16]
 8006fee:	e7ea      	b.n	8006fc6 <_dtoa_r+0xb3e>
 8006ff0:	080101d0 	.word	0x080101d0
 8006ff4:	08010250 	.word	0x08010250

08006ff8 <rshift>:
 8006ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffa:	6906      	ldr	r6, [r0, #16]
 8006ffc:	114b      	asrs	r3, r1, #5
 8006ffe:	429e      	cmp	r6, r3
 8007000:	f100 0414 	add.w	r4, r0, #20
 8007004:	dd30      	ble.n	8007068 <rshift+0x70>
 8007006:	f011 011f 	ands.w	r1, r1, #31
 800700a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800700e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007012:	d108      	bne.n	8007026 <rshift+0x2e>
 8007014:	4621      	mov	r1, r4
 8007016:	42b2      	cmp	r2, r6
 8007018:	460b      	mov	r3, r1
 800701a:	d211      	bcs.n	8007040 <rshift+0x48>
 800701c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007020:	f841 3b04 	str.w	r3, [r1], #4
 8007024:	e7f7      	b.n	8007016 <rshift+0x1e>
 8007026:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800702a:	f1c1 0c20 	rsb	ip, r1, #32
 800702e:	40cd      	lsrs	r5, r1
 8007030:	3204      	adds	r2, #4
 8007032:	4623      	mov	r3, r4
 8007034:	42b2      	cmp	r2, r6
 8007036:	4617      	mov	r7, r2
 8007038:	d30c      	bcc.n	8007054 <rshift+0x5c>
 800703a:	601d      	str	r5, [r3, #0]
 800703c:	b105      	cbz	r5, 8007040 <rshift+0x48>
 800703e:	3304      	adds	r3, #4
 8007040:	1b1a      	subs	r2, r3, r4
 8007042:	42a3      	cmp	r3, r4
 8007044:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007048:	bf08      	it	eq
 800704a:	2300      	moveq	r3, #0
 800704c:	6102      	str	r2, [r0, #16]
 800704e:	bf08      	it	eq
 8007050:	6143      	streq	r3, [r0, #20]
 8007052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007054:	683f      	ldr	r7, [r7, #0]
 8007056:	fa07 f70c 	lsl.w	r7, r7, ip
 800705a:	433d      	orrs	r5, r7
 800705c:	f843 5b04 	str.w	r5, [r3], #4
 8007060:	f852 5b04 	ldr.w	r5, [r2], #4
 8007064:	40cd      	lsrs	r5, r1
 8007066:	e7e5      	b.n	8007034 <rshift+0x3c>
 8007068:	4623      	mov	r3, r4
 800706a:	e7e9      	b.n	8007040 <rshift+0x48>

0800706c <__hexdig_fun>:
 800706c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007070:	2b09      	cmp	r3, #9
 8007072:	d802      	bhi.n	800707a <__hexdig_fun+0xe>
 8007074:	3820      	subs	r0, #32
 8007076:	b2c0      	uxtb	r0, r0
 8007078:	4770      	bx	lr
 800707a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800707e:	2b05      	cmp	r3, #5
 8007080:	d801      	bhi.n	8007086 <__hexdig_fun+0x1a>
 8007082:	3847      	subs	r0, #71	; 0x47
 8007084:	e7f7      	b.n	8007076 <__hexdig_fun+0xa>
 8007086:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800708a:	2b05      	cmp	r3, #5
 800708c:	d801      	bhi.n	8007092 <__hexdig_fun+0x26>
 800708e:	3827      	subs	r0, #39	; 0x27
 8007090:	e7f1      	b.n	8007076 <__hexdig_fun+0xa>
 8007092:	2000      	movs	r0, #0
 8007094:	4770      	bx	lr

08007096 <__gethex>:
 8007096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	b08b      	sub	sp, #44	; 0x2c
 800709c:	468a      	mov	sl, r1
 800709e:	9002      	str	r0, [sp, #8]
 80070a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80070a2:	9306      	str	r3, [sp, #24]
 80070a4:	4690      	mov	r8, r2
 80070a6:	f000 fad0 	bl	800764a <__localeconv_l>
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	9303      	str	r3, [sp, #12]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 f88e 	bl	80001d0 <strlen>
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	9001      	str	r0, [sp, #4]
 80070b8:	4403      	add	r3, r0
 80070ba:	f04f 0b00 	mov.w	fp, #0
 80070be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80070c2:	9307      	str	r3, [sp, #28]
 80070c4:	f8da 3000 	ldr.w	r3, [sl]
 80070c8:	3302      	adds	r3, #2
 80070ca:	461f      	mov	r7, r3
 80070cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80070d0:	2830      	cmp	r0, #48	; 0x30
 80070d2:	d06c      	beq.n	80071ae <__gethex+0x118>
 80070d4:	f7ff ffca 	bl	800706c <__hexdig_fun>
 80070d8:	4604      	mov	r4, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	d16a      	bne.n	80071b4 <__gethex+0x11e>
 80070de:	9a01      	ldr	r2, [sp, #4]
 80070e0:	9903      	ldr	r1, [sp, #12]
 80070e2:	4638      	mov	r0, r7
 80070e4:	f001 f8fe 	bl	80082e4 <strncmp>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d166      	bne.n	80071ba <__gethex+0x124>
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	5cf8      	ldrb	r0, [r7, r3]
 80070f0:	18fe      	adds	r6, r7, r3
 80070f2:	f7ff ffbb 	bl	800706c <__hexdig_fun>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d062      	beq.n	80071c0 <__gethex+0x12a>
 80070fa:	4633      	mov	r3, r6
 80070fc:	7818      	ldrb	r0, [r3, #0]
 80070fe:	2830      	cmp	r0, #48	; 0x30
 8007100:	461f      	mov	r7, r3
 8007102:	f103 0301 	add.w	r3, r3, #1
 8007106:	d0f9      	beq.n	80070fc <__gethex+0x66>
 8007108:	f7ff ffb0 	bl	800706c <__hexdig_fun>
 800710c:	fab0 f580 	clz	r5, r0
 8007110:	096d      	lsrs	r5, r5, #5
 8007112:	4634      	mov	r4, r6
 8007114:	f04f 0b01 	mov.w	fp, #1
 8007118:	463a      	mov	r2, r7
 800711a:	4616      	mov	r6, r2
 800711c:	3201      	adds	r2, #1
 800711e:	7830      	ldrb	r0, [r6, #0]
 8007120:	f7ff ffa4 	bl	800706c <__hexdig_fun>
 8007124:	2800      	cmp	r0, #0
 8007126:	d1f8      	bne.n	800711a <__gethex+0x84>
 8007128:	9a01      	ldr	r2, [sp, #4]
 800712a:	9903      	ldr	r1, [sp, #12]
 800712c:	4630      	mov	r0, r6
 800712e:	f001 f8d9 	bl	80082e4 <strncmp>
 8007132:	b950      	cbnz	r0, 800714a <__gethex+0xb4>
 8007134:	b954      	cbnz	r4, 800714c <__gethex+0xb6>
 8007136:	9b01      	ldr	r3, [sp, #4]
 8007138:	18f4      	adds	r4, r6, r3
 800713a:	4622      	mov	r2, r4
 800713c:	4616      	mov	r6, r2
 800713e:	3201      	adds	r2, #1
 8007140:	7830      	ldrb	r0, [r6, #0]
 8007142:	f7ff ff93 	bl	800706c <__hexdig_fun>
 8007146:	2800      	cmp	r0, #0
 8007148:	d1f8      	bne.n	800713c <__gethex+0xa6>
 800714a:	b10c      	cbz	r4, 8007150 <__gethex+0xba>
 800714c:	1ba4      	subs	r4, r4, r6
 800714e:	00a4      	lsls	r4, r4, #2
 8007150:	7833      	ldrb	r3, [r6, #0]
 8007152:	2b50      	cmp	r3, #80	; 0x50
 8007154:	d001      	beq.n	800715a <__gethex+0xc4>
 8007156:	2b70      	cmp	r3, #112	; 0x70
 8007158:	d140      	bne.n	80071dc <__gethex+0x146>
 800715a:	7873      	ldrb	r3, [r6, #1]
 800715c:	2b2b      	cmp	r3, #43	; 0x2b
 800715e:	d031      	beq.n	80071c4 <__gethex+0x12e>
 8007160:	2b2d      	cmp	r3, #45	; 0x2d
 8007162:	d033      	beq.n	80071cc <__gethex+0x136>
 8007164:	1c71      	adds	r1, r6, #1
 8007166:	f04f 0900 	mov.w	r9, #0
 800716a:	7808      	ldrb	r0, [r1, #0]
 800716c:	f7ff ff7e 	bl	800706c <__hexdig_fun>
 8007170:	1e43      	subs	r3, r0, #1
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b18      	cmp	r3, #24
 8007176:	d831      	bhi.n	80071dc <__gethex+0x146>
 8007178:	f1a0 0210 	sub.w	r2, r0, #16
 800717c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007180:	f7ff ff74 	bl	800706c <__hexdig_fun>
 8007184:	1e43      	subs	r3, r0, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b18      	cmp	r3, #24
 800718a:	d922      	bls.n	80071d2 <__gethex+0x13c>
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	d000      	beq.n	8007194 <__gethex+0xfe>
 8007192:	4252      	negs	r2, r2
 8007194:	4414      	add	r4, r2
 8007196:	f8ca 1000 	str.w	r1, [sl]
 800719a:	b30d      	cbz	r5, 80071e0 <__gethex+0x14a>
 800719c:	f1bb 0f00 	cmp.w	fp, #0
 80071a0:	bf0c      	ite	eq
 80071a2:	2706      	moveq	r7, #6
 80071a4:	2700      	movne	r7, #0
 80071a6:	4638      	mov	r0, r7
 80071a8:	b00b      	add	sp, #44	; 0x2c
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	f10b 0b01 	add.w	fp, fp, #1
 80071b2:	e78a      	b.n	80070ca <__gethex+0x34>
 80071b4:	2500      	movs	r5, #0
 80071b6:	462c      	mov	r4, r5
 80071b8:	e7ae      	b.n	8007118 <__gethex+0x82>
 80071ba:	463e      	mov	r6, r7
 80071bc:	2501      	movs	r5, #1
 80071be:	e7c7      	b.n	8007150 <__gethex+0xba>
 80071c0:	4604      	mov	r4, r0
 80071c2:	e7fb      	b.n	80071bc <__gethex+0x126>
 80071c4:	f04f 0900 	mov.w	r9, #0
 80071c8:	1cb1      	adds	r1, r6, #2
 80071ca:	e7ce      	b.n	800716a <__gethex+0xd4>
 80071cc:	f04f 0901 	mov.w	r9, #1
 80071d0:	e7fa      	b.n	80071c8 <__gethex+0x132>
 80071d2:	230a      	movs	r3, #10
 80071d4:	fb03 0202 	mla	r2, r3, r2, r0
 80071d8:	3a10      	subs	r2, #16
 80071da:	e7cf      	b.n	800717c <__gethex+0xe6>
 80071dc:	4631      	mov	r1, r6
 80071de:	e7da      	b.n	8007196 <__gethex+0x100>
 80071e0:	1bf3      	subs	r3, r6, r7
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4629      	mov	r1, r5
 80071e6:	2b07      	cmp	r3, #7
 80071e8:	dc49      	bgt.n	800727e <__gethex+0x1e8>
 80071ea:	9802      	ldr	r0, [sp, #8]
 80071ec:	f000 fa63 	bl	80076b6 <_Balloc>
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	f100 0914 	add.w	r9, r0, #20
 80071f6:	f04f 0b00 	mov.w	fp, #0
 80071fa:	f1c3 0301 	rsb	r3, r3, #1
 80071fe:	4605      	mov	r5, r0
 8007200:	f8cd 9010 	str.w	r9, [sp, #16]
 8007204:	46da      	mov	sl, fp
 8007206:	9308      	str	r3, [sp, #32]
 8007208:	42b7      	cmp	r7, r6
 800720a:	d33b      	bcc.n	8007284 <__gethex+0x1ee>
 800720c:	9804      	ldr	r0, [sp, #16]
 800720e:	f840 ab04 	str.w	sl, [r0], #4
 8007212:	eba0 0009 	sub.w	r0, r0, r9
 8007216:	1080      	asrs	r0, r0, #2
 8007218:	6128      	str	r0, [r5, #16]
 800721a:	0147      	lsls	r7, r0, #5
 800721c:	4650      	mov	r0, sl
 800721e:	f000 fb0e 	bl	800783e <__hi0bits>
 8007222:	f8d8 6000 	ldr.w	r6, [r8]
 8007226:	1a3f      	subs	r7, r7, r0
 8007228:	42b7      	cmp	r7, r6
 800722a:	dd64      	ble.n	80072f6 <__gethex+0x260>
 800722c:	1bbf      	subs	r7, r7, r6
 800722e:	4639      	mov	r1, r7
 8007230:	4628      	mov	r0, r5
 8007232:	f000 fe1d 	bl	8007e70 <__any_on>
 8007236:	4682      	mov	sl, r0
 8007238:	b178      	cbz	r0, 800725a <__gethex+0x1c4>
 800723a:	1e7b      	subs	r3, r7, #1
 800723c:	1159      	asrs	r1, r3, #5
 800723e:	f003 021f 	and.w	r2, r3, #31
 8007242:	f04f 0a01 	mov.w	sl, #1
 8007246:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800724a:	fa0a f202 	lsl.w	r2, sl, r2
 800724e:	420a      	tst	r2, r1
 8007250:	d003      	beq.n	800725a <__gethex+0x1c4>
 8007252:	4553      	cmp	r3, sl
 8007254:	dc46      	bgt.n	80072e4 <__gethex+0x24e>
 8007256:	f04f 0a02 	mov.w	sl, #2
 800725a:	4639      	mov	r1, r7
 800725c:	4628      	mov	r0, r5
 800725e:	f7ff fecb 	bl	8006ff8 <rshift>
 8007262:	443c      	add	r4, r7
 8007264:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007268:	42a3      	cmp	r3, r4
 800726a:	da52      	bge.n	8007312 <__gethex+0x27c>
 800726c:	4629      	mov	r1, r5
 800726e:	9802      	ldr	r0, [sp, #8]
 8007270:	f000 fa55 	bl	800771e <_Bfree>
 8007274:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007276:	2300      	movs	r3, #0
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	27a3      	movs	r7, #163	; 0xa3
 800727c:	e793      	b.n	80071a6 <__gethex+0x110>
 800727e:	3101      	adds	r1, #1
 8007280:	105b      	asrs	r3, r3, #1
 8007282:	e7b0      	b.n	80071e6 <__gethex+0x150>
 8007284:	1e73      	subs	r3, r6, #1
 8007286:	9305      	str	r3, [sp, #20]
 8007288:	9a07      	ldr	r2, [sp, #28]
 800728a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800728e:	4293      	cmp	r3, r2
 8007290:	d018      	beq.n	80072c4 <__gethex+0x22e>
 8007292:	f1bb 0f20 	cmp.w	fp, #32
 8007296:	d107      	bne.n	80072a8 <__gethex+0x212>
 8007298:	9b04      	ldr	r3, [sp, #16]
 800729a:	f8c3 a000 	str.w	sl, [r3]
 800729e:	3304      	adds	r3, #4
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	46d3      	mov	fp, sl
 80072a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80072ac:	f7ff fede 	bl	800706c <__hexdig_fun>
 80072b0:	f000 000f 	and.w	r0, r0, #15
 80072b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80072b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80072bc:	f10b 0b04 	add.w	fp, fp, #4
 80072c0:	9b05      	ldr	r3, [sp, #20]
 80072c2:	e00d      	b.n	80072e0 <__gethex+0x24a>
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	9a08      	ldr	r2, [sp, #32]
 80072c8:	4413      	add	r3, r2
 80072ca:	42bb      	cmp	r3, r7
 80072cc:	d3e1      	bcc.n	8007292 <__gethex+0x1fc>
 80072ce:	4618      	mov	r0, r3
 80072d0:	9a01      	ldr	r2, [sp, #4]
 80072d2:	9903      	ldr	r1, [sp, #12]
 80072d4:	9309      	str	r3, [sp, #36]	; 0x24
 80072d6:	f001 f805 	bl	80082e4 <strncmp>
 80072da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072dc:	2800      	cmp	r0, #0
 80072de:	d1d8      	bne.n	8007292 <__gethex+0x1fc>
 80072e0:	461e      	mov	r6, r3
 80072e2:	e791      	b.n	8007208 <__gethex+0x172>
 80072e4:	1eb9      	subs	r1, r7, #2
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fdc2 	bl	8007e70 <__any_on>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0b2      	beq.n	8007256 <__gethex+0x1c0>
 80072f0:	f04f 0a03 	mov.w	sl, #3
 80072f4:	e7b1      	b.n	800725a <__gethex+0x1c4>
 80072f6:	da09      	bge.n	800730c <__gethex+0x276>
 80072f8:	1bf7      	subs	r7, r6, r7
 80072fa:	4629      	mov	r1, r5
 80072fc:	463a      	mov	r2, r7
 80072fe:	9802      	ldr	r0, [sp, #8]
 8007300:	f000 fbd8 	bl	8007ab4 <__lshift>
 8007304:	1be4      	subs	r4, r4, r7
 8007306:	4605      	mov	r5, r0
 8007308:	f100 0914 	add.w	r9, r0, #20
 800730c:	f04f 0a00 	mov.w	sl, #0
 8007310:	e7a8      	b.n	8007264 <__gethex+0x1ce>
 8007312:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007316:	42a0      	cmp	r0, r4
 8007318:	dd6a      	ble.n	80073f0 <__gethex+0x35a>
 800731a:	1b04      	subs	r4, r0, r4
 800731c:	42a6      	cmp	r6, r4
 800731e:	dc2e      	bgt.n	800737e <__gethex+0x2e8>
 8007320:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d022      	beq.n	800736e <__gethex+0x2d8>
 8007328:	2b03      	cmp	r3, #3
 800732a:	d024      	beq.n	8007376 <__gethex+0x2e0>
 800732c:	2b01      	cmp	r3, #1
 800732e:	d115      	bne.n	800735c <__gethex+0x2c6>
 8007330:	42a6      	cmp	r6, r4
 8007332:	d113      	bne.n	800735c <__gethex+0x2c6>
 8007334:	2e01      	cmp	r6, #1
 8007336:	dc0b      	bgt.n	8007350 <__gethex+0x2ba>
 8007338:	9a06      	ldr	r2, [sp, #24]
 800733a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	2301      	movs	r3, #1
 8007342:	612b      	str	r3, [r5, #16]
 8007344:	f8c9 3000 	str.w	r3, [r9]
 8007348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800734a:	2762      	movs	r7, #98	; 0x62
 800734c:	601d      	str	r5, [r3, #0]
 800734e:	e72a      	b.n	80071a6 <__gethex+0x110>
 8007350:	1e71      	subs	r1, r6, #1
 8007352:	4628      	mov	r0, r5
 8007354:	f000 fd8c 	bl	8007e70 <__any_on>
 8007358:	2800      	cmp	r0, #0
 800735a:	d1ed      	bne.n	8007338 <__gethex+0x2a2>
 800735c:	4629      	mov	r1, r5
 800735e:	9802      	ldr	r0, [sp, #8]
 8007360:	f000 f9dd 	bl	800771e <_Bfree>
 8007364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007366:	2300      	movs	r3, #0
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	2750      	movs	r7, #80	; 0x50
 800736c:	e71b      	b.n	80071a6 <__gethex+0x110>
 800736e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0e1      	beq.n	8007338 <__gethex+0x2a2>
 8007374:	e7f2      	b.n	800735c <__gethex+0x2c6>
 8007376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1dd      	bne.n	8007338 <__gethex+0x2a2>
 800737c:	e7ee      	b.n	800735c <__gethex+0x2c6>
 800737e:	1e67      	subs	r7, r4, #1
 8007380:	f1ba 0f00 	cmp.w	sl, #0
 8007384:	d131      	bne.n	80073ea <__gethex+0x354>
 8007386:	b127      	cbz	r7, 8007392 <__gethex+0x2fc>
 8007388:	4639      	mov	r1, r7
 800738a:	4628      	mov	r0, r5
 800738c:	f000 fd70 	bl	8007e70 <__any_on>
 8007390:	4682      	mov	sl, r0
 8007392:	117a      	asrs	r2, r7, #5
 8007394:	2301      	movs	r3, #1
 8007396:	f007 071f 	and.w	r7, r7, #31
 800739a:	fa03 f707 	lsl.w	r7, r3, r7
 800739e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80073a2:	4621      	mov	r1, r4
 80073a4:	421f      	tst	r7, r3
 80073a6:	4628      	mov	r0, r5
 80073a8:	bf18      	it	ne
 80073aa:	f04a 0a02 	orrne.w	sl, sl, #2
 80073ae:	1b36      	subs	r6, r6, r4
 80073b0:	f7ff fe22 	bl	8006ff8 <rshift>
 80073b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80073b8:	2702      	movs	r7, #2
 80073ba:	f1ba 0f00 	cmp.w	sl, #0
 80073be:	d048      	beq.n	8007452 <__gethex+0x3bc>
 80073c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d015      	beq.n	80073f4 <__gethex+0x35e>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d017      	beq.n	80073fc <__gethex+0x366>
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d109      	bne.n	80073e4 <__gethex+0x34e>
 80073d0:	f01a 0f02 	tst.w	sl, #2
 80073d4:	d006      	beq.n	80073e4 <__gethex+0x34e>
 80073d6:	f8d9 3000 	ldr.w	r3, [r9]
 80073da:	ea4a 0a03 	orr.w	sl, sl, r3
 80073de:	f01a 0f01 	tst.w	sl, #1
 80073e2:	d10e      	bne.n	8007402 <__gethex+0x36c>
 80073e4:	f047 0710 	orr.w	r7, r7, #16
 80073e8:	e033      	b.n	8007452 <__gethex+0x3bc>
 80073ea:	f04f 0a01 	mov.w	sl, #1
 80073ee:	e7d0      	b.n	8007392 <__gethex+0x2fc>
 80073f0:	2701      	movs	r7, #1
 80073f2:	e7e2      	b.n	80073ba <__gethex+0x324>
 80073f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073f6:	f1c3 0301 	rsb	r3, r3, #1
 80073fa:	9315      	str	r3, [sp, #84]	; 0x54
 80073fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <__gethex+0x34e>
 8007402:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007406:	f105 0314 	add.w	r3, r5, #20
 800740a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800740e:	eb03 010a 	add.w	r1, r3, sl
 8007412:	f04f 0c00 	mov.w	ip, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f853 2b04 	ldr.w	r2, [r3], #4
 800741c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007420:	d01c      	beq.n	800745c <__gethex+0x3c6>
 8007422:	3201      	adds	r2, #1
 8007424:	6002      	str	r2, [r0, #0]
 8007426:	2f02      	cmp	r7, #2
 8007428:	f105 0314 	add.w	r3, r5, #20
 800742c:	d138      	bne.n	80074a0 <__gethex+0x40a>
 800742e:	f8d8 2000 	ldr.w	r2, [r8]
 8007432:	3a01      	subs	r2, #1
 8007434:	42b2      	cmp	r2, r6
 8007436:	d10a      	bne.n	800744e <__gethex+0x3b8>
 8007438:	1171      	asrs	r1, r6, #5
 800743a:	2201      	movs	r2, #1
 800743c:	f006 061f 	and.w	r6, r6, #31
 8007440:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007444:	fa02 f606 	lsl.w	r6, r2, r6
 8007448:	421e      	tst	r6, r3
 800744a:	bf18      	it	ne
 800744c:	4617      	movne	r7, r2
 800744e:	f047 0720 	orr.w	r7, r7, #32
 8007452:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007454:	601d      	str	r5, [r3, #0]
 8007456:	9b06      	ldr	r3, [sp, #24]
 8007458:	601c      	str	r4, [r3, #0]
 800745a:	e6a4      	b.n	80071a6 <__gethex+0x110>
 800745c:	4299      	cmp	r1, r3
 800745e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007462:	d8d8      	bhi.n	8007416 <__gethex+0x380>
 8007464:	68ab      	ldr	r3, [r5, #8]
 8007466:	4599      	cmp	r9, r3
 8007468:	db12      	blt.n	8007490 <__gethex+0x3fa>
 800746a:	6869      	ldr	r1, [r5, #4]
 800746c:	9802      	ldr	r0, [sp, #8]
 800746e:	3101      	adds	r1, #1
 8007470:	f000 f921 	bl	80076b6 <_Balloc>
 8007474:	692a      	ldr	r2, [r5, #16]
 8007476:	3202      	adds	r2, #2
 8007478:	f105 010c 	add.w	r1, r5, #12
 800747c:	4683      	mov	fp, r0
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	300c      	adds	r0, #12
 8007482:	f000 f90d 	bl	80076a0 <memcpy>
 8007486:	4629      	mov	r1, r5
 8007488:	9802      	ldr	r0, [sp, #8]
 800748a:	f000 f948 	bl	800771e <_Bfree>
 800748e:	465d      	mov	r5, fp
 8007490:	692b      	ldr	r3, [r5, #16]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007498:	612a      	str	r2, [r5, #16]
 800749a:	2201      	movs	r2, #1
 800749c:	615a      	str	r2, [r3, #20]
 800749e:	e7c2      	b.n	8007426 <__gethex+0x390>
 80074a0:	692a      	ldr	r2, [r5, #16]
 80074a2:	454a      	cmp	r2, r9
 80074a4:	dd0b      	ble.n	80074be <__gethex+0x428>
 80074a6:	2101      	movs	r1, #1
 80074a8:	4628      	mov	r0, r5
 80074aa:	f7ff fda5 	bl	8006ff8 <rshift>
 80074ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074b2:	3401      	adds	r4, #1
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	f6ff aed9 	blt.w	800726c <__gethex+0x1d6>
 80074ba:	2701      	movs	r7, #1
 80074bc:	e7c7      	b.n	800744e <__gethex+0x3b8>
 80074be:	f016 061f 	ands.w	r6, r6, #31
 80074c2:	d0fa      	beq.n	80074ba <__gethex+0x424>
 80074c4:	449a      	add	sl, r3
 80074c6:	f1c6 0620 	rsb	r6, r6, #32
 80074ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80074ce:	f000 f9b6 	bl	800783e <__hi0bits>
 80074d2:	42b0      	cmp	r0, r6
 80074d4:	dbe7      	blt.n	80074a6 <__gethex+0x410>
 80074d6:	e7f0      	b.n	80074ba <__gethex+0x424>

080074d8 <L_shift>:
 80074d8:	f1c2 0208 	rsb	r2, r2, #8
 80074dc:	0092      	lsls	r2, r2, #2
 80074de:	b570      	push	{r4, r5, r6, lr}
 80074e0:	f1c2 0620 	rsb	r6, r2, #32
 80074e4:	6843      	ldr	r3, [r0, #4]
 80074e6:	6804      	ldr	r4, [r0, #0]
 80074e8:	fa03 f506 	lsl.w	r5, r3, r6
 80074ec:	432c      	orrs	r4, r5
 80074ee:	40d3      	lsrs	r3, r2
 80074f0:	6004      	str	r4, [r0, #0]
 80074f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80074f6:	4288      	cmp	r0, r1
 80074f8:	d3f4      	bcc.n	80074e4 <L_shift+0xc>
 80074fa:	bd70      	pop	{r4, r5, r6, pc}

080074fc <__match>:
 80074fc:	b530      	push	{r4, r5, lr}
 80074fe:	6803      	ldr	r3, [r0, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007506:	b914      	cbnz	r4, 800750e <__match+0x12>
 8007508:	6003      	str	r3, [r0, #0]
 800750a:	2001      	movs	r0, #1
 800750c:	bd30      	pop	{r4, r5, pc}
 800750e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007512:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007516:	2d19      	cmp	r5, #25
 8007518:	bf98      	it	ls
 800751a:	3220      	addls	r2, #32
 800751c:	42a2      	cmp	r2, r4
 800751e:	d0f0      	beq.n	8007502 <__match+0x6>
 8007520:	2000      	movs	r0, #0
 8007522:	e7f3      	b.n	800750c <__match+0x10>

08007524 <__hexnan>:
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	680b      	ldr	r3, [r1, #0]
 800752a:	6801      	ldr	r1, [r0, #0]
 800752c:	115f      	asrs	r7, r3, #5
 800752e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007532:	f013 031f 	ands.w	r3, r3, #31
 8007536:	b087      	sub	sp, #28
 8007538:	bf18      	it	ne
 800753a:	3704      	addne	r7, #4
 800753c:	2500      	movs	r5, #0
 800753e:	1f3e      	subs	r6, r7, #4
 8007540:	4682      	mov	sl, r0
 8007542:	4690      	mov	r8, r2
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	f847 5c04 	str.w	r5, [r7, #-4]
 800754a:	46b1      	mov	r9, r6
 800754c:	4634      	mov	r4, r6
 800754e:	9502      	str	r5, [sp, #8]
 8007550:	46ab      	mov	fp, r5
 8007552:	784a      	ldrb	r2, [r1, #1]
 8007554:	1c4b      	adds	r3, r1, #1
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	b342      	cbz	r2, 80075ac <__hexnan+0x88>
 800755a:	4610      	mov	r0, r2
 800755c:	9105      	str	r1, [sp, #20]
 800755e:	9204      	str	r2, [sp, #16]
 8007560:	f7ff fd84 	bl	800706c <__hexdig_fun>
 8007564:	2800      	cmp	r0, #0
 8007566:	d143      	bne.n	80075f0 <__hexnan+0xcc>
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	9905      	ldr	r1, [sp, #20]
 800756c:	2a20      	cmp	r2, #32
 800756e:	d818      	bhi.n	80075a2 <__hexnan+0x7e>
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	459b      	cmp	fp, r3
 8007574:	dd13      	ble.n	800759e <__hexnan+0x7a>
 8007576:	454c      	cmp	r4, r9
 8007578:	d206      	bcs.n	8007588 <__hexnan+0x64>
 800757a:	2d07      	cmp	r5, #7
 800757c:	dc04      	bgt.n	8007588 <__hexnan+0x64>
 800757e:	462a      	mov	r2, r5
 8007580:	4649      	mov	r1, r9
 8007582:	4620      	mov	r0, r4
 8007584:	f7ff ffa8 	bl	80074d8 <L_shift>
 8007588:	4544      	cmp	r4, r8
 800758a:	d944      	bls.n	8007616 <__hexnan+0xf2>
 800758c:	2300      	movs	r3, #0
 800758e:	f1a4 0904 	sub.w	r9, r4, #4
 8007592:	f844 3c04 	str.w	r3, [r4, #-4]
 8007596:	f8cd b008 	str.w	fp, [sp, #8]
 800759a:	464c      	mov	r4, r9
 800759c:	461d      	mov	r5, r3
 800759e:	9903      	ldr	r1, [sp, #12]
 80075a0:	e7d7      	b.n	8007552 <__hexnan+0x2e>
 80075a2:	2a29      	cmp	r2, #41	; 0x29
 80075a4:	d14a      	bne.n	800763c <__hexnan+0x118>
 80075a6:	3102      	adds	r1, #2
 80075a8:	f8ca 1000 	str.w	r1, [sl]
 80075ac:	f1bb 0f00 	cmp.w	fp, #0
 80075b0:	d044      	beq.n	800763c <__hexnan+0x118>
 80075b2:	454c      	cmp	r4, r9
 80075b4:	d206      	bcs.n	80075c4 <__hexnan+0xa0>
 80075b6:	2d07      	cmp	r5, #7
 80075b8:	dc04      	bgt.n	80075c4 <__hexnan+0xa0>
 80075ba:	462a      	mov	r2, r5
 80075bc:	4649      	mov	r1, r9
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff ff8a 	bl	80074d8 <L_shift>
 80075c4:	4544      	cmp	r4, r8
 80075c6:	d928      	bls.n	800761a <__hexnan+0xf6>
 80075c8:	4643      	mov	r3, r8
 80075ca:	f854 2b04 	ldr.w	r2, [r4], #4
 80075ce:	f843 2b04 	str.w	r2, [r3], #4
 80075d2:	42a6      	cmp	r6, r4
 80075d4:	d2f9      	bcs.n	80075ca <__hexnan+0xa6>
 80075d6:	2200      	movs	r2, #0
 80075d8:	f843 2b04 	str.w	r2, [r3], #4
 80075dc:	429e      	cmp	r6, r3
 80075de:	d2fb      	bcs.n	80075d8 <__hexnan+0xb4>
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	b91b      	cbnz	r3, 80075ec <__hexnan+0xc8>
 80075e4:	4546      	cmp	r6, r8
 80075e6:	d127      	bne.n	8007638 <__hexnan+0x114>
 80075e8:	2301      	movs	r3, #1
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	2005      	movs	r0, #5
 80075ee:	e026      	b.n	800763e <__hexnan+0x11a>
 80075f0:	3501      	adds	r5, #1
 80075f2:	2d08      	cmp	r5, #8
 80075f4:	f10b 0b01 	add.w	fp, fp, #1
 80075f8:	dd06      	ble.n	8007608 <__hexnan+0xe4>
 80075fa:	4544      	cmp	r4, r8
 80075fc:	d9cf      	bls.n	800759e <__hexnan+0x7a>
 80075fe:	2300      	movs	r3, #0
 8007600:	f844 3c04 	str.w	r3, [r4, #-4]
 8007604:	2501      	movs	r5, #1
 8007606:	3c04      	subs	r4, #4
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	f000 000f 	and.w	r0, r0, #15
 800760e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007612:	6020      	str	r0, [r4, #0]
 8007614:	e7c3      	b.n	800759e <__hexnan+0x7a>
 8007616:	2508      	movs	r5, #8
 8007618:	e7c1      	b.n	800759e <__hexnan+0x7a>
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0df      	beq.n	80075e0 <__hexnan+0xbc>
 8007620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007624:	f1c3 0320 	rsb	r3, r3, #32
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007630:	401a      	ands	r2, r3
 8007632:	f847 2c04 	str.w	r2, [r7, #-4]
 8007636:	e7d3      	b.n	80075e0 <__hexnan+0xbc>
 8007638:	3e04      	subs	r6, #4
 800763a:	e7d1      	b.n	80075e0 <__hexnan+0xbc>
 800763c:	2004      	movs	r0, #4
 800763e:	b007      	add	sp, #28
 8007640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007644 <__locale_ctype_ptr_l>:
 8007644:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007648:	4770      	bx	lr

0800764a <__localeconv_l>:
 800764a:	30f0      	adds	r0, #240	; 0xf0
 800764c:	4770      	bx	lr
	...

08007650 <_localeconv_r>:
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <_localeconv_r+0x14>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a18      	ldr	r0, [r3, #32]
 8007656:	4b04      	ldr	r3, [pc, #16]	; (8007668 <_localeconv_r+0x18>)
 8007658:	2800      	cmp	r0, #0
 800765a:	bf08      	it	eq
 800765c:	4618      	moveq	r0, r3
 800765e:	30f0      	adds	r0, #240	; 0xf0
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000014 	.word	0x20000014
 8007668:	20000078 	.word	0x20000078

0800766c <malloc>:
 800766c:	4b02      	ldr	r3, [pc, #8]	; (8007678 <malloc+0xc>)
 800766e:	4601      	mov	r1, r0
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	f000 bc7b 	b.w	8007f6c <_malloc_r>
 8007676:	bf00      	nop
 8007678:	20000014 	.word	0x20000014

0800767c <__ascii_mbtowc>:
 800767c:	b082      	sub	sp, #8
 800767e:	b901      	cbnz	r1, 8007682 <__ascii_mbtowc+0x6>
 8007680:	a901      	add	r1, sp, #4
 8007682:	b142      	cbz	r2, 8007696 <__ascii_mbtowc+0x1a>
 8007684:	b14b      	cbz	r3, 800769a <__ascii_mbtowc+0x1e>
 8007686:	7813      	ldrb	r3, [r2, #0]
 8007688:	600b      	str	r3, [r1, #0]
 800768a:	7812      	ldrb	r2, [r2, #0]
 800768c:	1c10      	adds	r0, r2, #0
 800768e:	bf18      	it	ne
 8007690:	2001      	movne	r0, #1
 8007692:	b002      	add	sp, #8
 8007694:	4770      	bx	lr
 8007696:	4610      	mov	r0, r2
 8007698:	e7fb      	b.n	8007692 <__ascii_mbtowc+0x16>
 800769a:	f06f 0001 	mvn.w	r0, #1
 800769e:	e7f8      	b.n	8007692 <__ascii_mbtowc+0x16>

080076a0 <memcpy>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	1e43      	subs	r3, r0, #1
 80076a4:	440a      	add	r2, r1
 80076a6:	4291      	cmp	r1, r2
 80076a8:	d100      	bne.n	80076ac <memcpy+0xc>
 80076aa:	bd10      	pop	{r4, pc}
 80076ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b4:	e7f7      	b.n	80076a6 <memcpy+0x6>

080076b6 <_Balloc>:
 80076b6:	b570      	push	{r4, r5, r6, lr}
 80076b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076ba:	4604      	mov	r4, r0
 80076bc:	460e      	mov	r6, r1
 80076be:	b93d      	cbnz	r5, 80076d0 <_Balloc+0x1a>
 80076c0:	2010      	movs	r0, #16
 80076c2:	f7ff ffd3 	bl	800766c <malloc>
 80076c6:	6260      	str	r0, [r4, #36]	; 0x24
 80076c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076cc:	6005      	str	r5, [r0, #0]
 80076ce:	60c5      	str	r5, [r0, #12]
 80076d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80076d2:	68eb      	ldr	r3, [r5, #12]
 80076d4:	b183      	cbz	r3, 80076f8 <_Balloc+0x42>
 80076d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076de:	b9b8      	cbnz	r0, 8007710 <_Balloc+0x5a>
 80076e0:	2101      	movs	r1, #1
 80076e2:	fa01 f506 	lsl.w	r5, r1, r6
 80076e6:	1d6a      	adds	r2, r5, #5
 80076e8:	0092      	lsls	r2, r2, #2
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fbe1 	bl	8007eb2 <_calloc_r>
 80076f0:	b160      	cbz	r0, 800770c <_Balloc+0x56>
 80076f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80076f6:	e00e      	b.n	8007716 <_Balloc+0x60>
 80076f8:	2221      	movs	r2, #33	; 0x21
 80076fa:	2104      	movs	r1, #4
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fbd8 	bl	8007eb2 <_calloc_r>
 8007702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007704:	60e8      	str	r0, [r5, #12]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e4      	bne.n	80076d6 <_Balloc+0x20>
 800770c:	2000      	movs	r0, #0
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	6802      	ldr	r2, [r0, #0]
 8007712:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007716:	2300      	movs	r3, #0
 8007718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800771c:	e7f7      	b.n	800770e <_Balloc+0x58>

0800771e <_Bfree>:
 800771e:	b570      	push	{r4, r5, r6, lr}
 8007720:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007722:	4606      	mov	r6, r0
 8007724:	460d      	mov	r5, r1
 8007726:	b93c      	cbnz	r4, 8007738 <_Bfree+0x1a>
 8007728:	2010      	movs	r0, #16
 800772a:	f7ff ff9f 	bl	800766c <malloc>
 800772e:	6270      	str	r0, [r6, #36]	; 0x24
 8007730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007734:	6004      	str	r4, [r0, #0]
 8007736:	60c4      	str	r4, [r0, #12]
 8007738:	b13d      	cbz	r5, 800774a <_Bfree+0x2c>
 800773a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800773c:	686a      	ldr	r2, [r5, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007744:	6029      	str	r1, [r5, #0]
 8007746:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800774a:	bd70      	pop	{r4, r5, r6, pc}

0800774c <__multadd>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	690d      	ldr	r5, [r1, #16]
 8007752:	461f      	mov	r7, r3
 8007754:	4606      	mov	r6, r0
 8007756:	460c      	mov	r4, r1
 8007758:	f101 0c14 	add.w	ip, r1, #20
 800775c:	2300      	movs	r3, #0
 800775e:	f8dc 0000 	ldr.w	r0, [ip]
 8007762:	b281      	uxth	r1, r0
 8007764:	fb02 7101 	mla	r1, r2, r1, r7
 8007768:	0c0f      	lsrs	r7, r1, #16
 800776a:	0c00      	lsrs	r0, r0, #16
 800776c:	fb02 7000 	mla	r0, r2, r0, r7
 8007770:	b289      	uxth	r1, r1
 8007772:	3301      	adds	r3, #1
 8007774:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007778:	429d      	cmp	r5, r3
 800777a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800777e:	f84c 1b04 	str.w	r1, [ip], #4
 8007782:	dcec      	bgt.n	800775e <__multadd+0x12>
 8007784:	b1d7      	cbz	r7, 80077bc <__multadd+0x70>
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	42ab      	cmp	r3, r5
 800778a:	dc12      	bgt.n	80077b2 <__multadd+0x66>
 800778c:	6861      	ldr	r1, [r4, #4]
 800778e:	4630      	mov	r0, r6
 8007790:	3101      	adds	r1, #1
 8007792:	f7ff ff90 	bl	80076b6 <_Balloc>
 8007796:	6922      	ldr	r2, [r4, #16]
 8007798:	3202      	adds	r2, #2
 800779a:	f104 010c 	add.w	r1, r4, #12
 800779e:	4680      	mov	r8, r0
 80077a0:	0092      	lsls	r2, r2, #2
 80077a2:	300c      	adds	r0, #12
 80077a4:	f7ff ff7c 	bl	80076a0 <memcpy>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff ffb7 	bl	800771e <_Bfree>
 80077b0:	4644      	mov	r4, r8
 80077b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077b6:	3501      	adds	r5, #1
 80077b8:	615f      	str	r7, [r3, #20]
 80077ba:	6125      	str	r5, [r4, #16]
 80077bc:	4620      	mov	r0, r4
 80077be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077c2 <__s2b>:
 80077c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c6:	460c      	mov	r4, r1
 80077c8:	4615      	mov	r5, r2
 80077ca:	461f      	mov	r7, r3
 80077cc:	2209      	movs	r2, #9
 80077ce:	3308      	adds	r3, #8
 80077d0:	4606      	mov	r6, r0
 80077d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80077d6:	2100      	movs	r1, #0
 80077d8:	2201      	movs	r2, #1
 80077da:	429a      	cmp	r2, r3
 80077dc:	db20      	blt.n	8007820 <__s2b+0x5e>
 80077de:	4630      	mov	r0, r6
 80077e0:	f7ff ff69 	bl	80076b6 <_Balloc>
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	6143      	str	r3, [r0, #20]
 80077e8:	2d09      	cmp	r5, #9
 80077ea:	f04f 0301 	mov.w	r3, #1
 80077ee:	6103      	str	r3, [r0, #16]
 80077f0:	dd19      	ble.n	8007826 <__s2b+0x64>
 80077f2:	f104 0809 	add.w	r8, r4, #9
 80077f6:	46c1      	mov	r9, r8
 80077f8:	442c      	add	r4, r5
 80077fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80077fe:	4601      	mov	r1, r0
 8007800:	3b30      	subs	r3, #48	; 0x30
 8007802:	220a      	movs	r2, #10
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff ffa1 	bl	800774c <__multadd>
 800780a:	45a1      	cmp	r9, r4
 800780c:	d1f5      	bne.n	80077fa <__s2b+0x38>
 800780e:	eb08 0405 	add.w	r4, r8, r5
 8007812:	3c08      	subs	r4, #8
 8007814:	1b2d      	subs	r5, r5, r4
 8007816:	1963      	adds	r3, r4, r5
 8007818:	42bb      	cmp	r3, r7
 800781a:	db07      	blt.n	800782c <__s2b+0x6a>
 800781c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007820:	0052      	lsls	r2, r2, #1
 8007822:	3101      	adds	r1, #1
 8007824:	e7d9      	b.n	80077da <__s2b+0x18>
 8007826:	340a      	adds	r4, #10
 8007828:	2509      	movs	r5, #9
 800782a:	e7f3      	b.n	8007814 <__s2b+0x52>
 800782c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007830:	4601      	mov	r1, r0
 8007832:	3b30      	subs	r3, #48	; 0x30
 8007834:	220a      	movs	r2, #10
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff ff88 	bl	800774c <__multadd>
 800783c:	e7eb      	b.n	8007816 <__s2b+0x54>

0800783e <__hi0bits>:
 800783e:	0c02      	lsrs	r2, r0, #16
 8007840:	0412      	lsls	r2, r2, #16
 8007842:	4603      	mov	r3, r0
 8007844:	b9b2      	cbnz	r2, 8007874 <__hi0bits+0x36>
 8007846:	0403      	lsls	r3, r0, #16
 8007848:	2010      	movs	r0, #16
 800784a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800784e:	bf04      	itt	eq
 8007850:	021b      	lsleq	r3, r3, #8
 8007852:	3008      	addeq	r0, #8
 8007854:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007858:	bf04      	itt	eq
 800785a:	011b      	lsleq	r3, r3, #4
 800785c:	3004      	addeq	r0, #4
 800785e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007862:	bf04      	itt	eq
 8007864:	009b      	lsleq	r3, r3, #2
 8007866:	3002      	addeq	r0, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	db06      	blt.n	800787a <__hi0bits+0x3c>
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	d503      	bpl.n	8007878 <__hi0bits+0x3a>
 8007870:	3001      	adds	r0, #1
 8007872:	4770      	bx	lr
 8007874:	2000      	movs	r0, #0
 8007876:	e7e8      	b.n	800784a <__hi0bits+0xc>
 8007878:	2020      	movs	r0, #32
 800787a:	4770      	bx	lr

0800787c <__lo0bits>:
 800787c:	6803      	ldr	r3, [r0, #0]
 800787e:	f013 0207 	ands.w	r2, r3, #7
 8007882:	4601      	mov	r1, r0
 8007884:	d00b      	beq.n	800789e <__lo0bits+0x22>
 8007886:	07da      	lsls	r2, r3, #31
 8007888:	d423      	bmi.n	80078d2 <__lo0bits+0x56>
 800788a:	0798      	lsls	r0, r3, #30
 800788c:	bf49      	itett	mi
 800788e:	085b      	lsrmi	r3, r3, #1
 8007890:	089b      	lsrpl	r3, r3, #2
 8007892:	2001      	movmi	r0, #1
 8007894:	600b      	strmi	r3, [r1, #0]
 8007896:	bf5c      	itt	pl
 8007898:	600b      	strpl	r3, [r1, #0]
 800789a:	2002      	movpl	r0, #2
 800789c:	4770      	bx	lr
 800789e:	b298      	uxth	r0, r3
 80078a0:	b9a8      	cbnz	r0, 80078ce <__lo0bits+0x52>
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	2010      	movs	r0, #16
 80078a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078aa:	bf04      	itt	eq
 80078ac:	0a1b      	lsreq	r3, r3, #8
 80078ae:	3008      	addeq	r0, #8
 80078b0:	071a      	lsls	r2, r3, #28
 80078b2:	bf04      	itt	eq
 80078b4:	091b      	lsreq	r3, r3, #4
 80078b6:	3004      	addeq	r0, #4
 80078b8:	079a      	lsls	r2, r3, #30
 80078ba:	bf04      	itt	eq
 80078bc:	089b      	lsreq	r3, r3, #2
 80078be:	3002      	addeq	r0, #2
 80078c0:	07da      	lsls	r2, r3, #31
 80078c2:	d402      	bmi.n	80078ca <__lo0bits+0x4e>
 80078c4:	085b      	lsrs	r3, r3, #1
 80078c6:	d006      	beq.n	80078d6 <__lo0bits+0x5a>
 80078c8:	3001      	adds	r0, #1
 80078ca:	600b      	str	r3, [r1, #0]
 80078cc:	4770      	bx	lr
 80078ce:	4610      	mov	r0, r2
 80078d0:	e7e9      	b.n	80078a6 <__lo0bits+0x2a>
 80078d2:	2000      	movs	r0, #0
 80078d4:	4770      	bx	lr
 80078d6:	2020      	movs	r0, #32
 80078d8:	4770      	bx	lr

080078da <__i2b>:
 80078da:	b510      	push	{r4, lr}
 80078dc:	460c      	mov	r4, r1
 80078de:	2101      	movs	r1, #1
 80078e0:	f7ff fee9 	bl	80076b6 <_Balloc>
 80078e4:	2201      	movs	r2, #1
 80078e6:	6144      	str	r4, [r0, #20]
 80078e8:	6102      	str	r2, [r0, #16]
 80078ea:	bd10      	pop	{r4, pc}

080078ec <__multiply>:
 80078ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	4614      	mov	r4, r2
 80078f2:	690a      	ldr	r2, [r1, #16]
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	bfb8      	it	lt
 80078fa:	460b      	movlt	r3, r1
 80078fc:	4688      	mov	r8, r1
 80078fe:	bfbc      	itt	lt
 8007900:	46a0      	movlt	r8, r4
 8007902:	461c      	movlt	r4, r3
 8007904:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007908:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800790c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007910:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007914:	eb07 0609 	add.w	r6, r7, r9
 8007918:	42b3      	cmp	r3, r6
 800791a:	bfb8      	it	lt
 800791c:	3101      	addlt	r1, #1
 800791e:	f7ff feca 	bl	80076b6 <_Balloc>
 8007922:	f100 0514 	add.w	r5, r0, #20
 8007926:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800792a:	462b      	mov	r3, r5
 800792c:	2200      	movs	r2, #0
 800792e:	4573      	cmp	r3, lr
 8007930:	d316      	bcc.n	8007960 <__multiply+0x74>
 8007932:	f104 0214 	add.w	r2, r4, #20
 8007936:	f108 0114 	add.w	r1, r8, #20
 800793a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800793e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	4293      	cmp	r3, r2
 800794a:	d80c      	bhi.n	8007966 <__multiply+0x7a>
 800794c:	2e00      	cmp	r6, #0
 800794e:	dd03      	ble.n	8007958 <__multiply+0x6c>
 8007950:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05d      	beq.n	8007a14 <__multiply+0x128>
 8007958:	6106      	str	r6, [r0, #16]
 800795a:	b003      	add	sp, #12
 800795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007960:	f843 2b04 	str.w	r2, [r3], #4
 8007964:	e7e3      	b.n	800792e <__multiply+0x42>
 8007966:	f8b2 b000 	ldrh.w	fp, [r2]
 800796a:	f1bb 0f00 	cmp.w	fp, #0
 800796e:	d023      	beq.n	80079b8 <__multiply+0xcc>
 8007970:	4689      	mov	r9, r1
 8007972:	46ac      	mov	ip, r5
 8007974:	f04f 0800 	mov.w	r8, #0
 8007978:	f859 4b04 	ldr.w	r4, [r9], #4
 800797c:	f8dc a000 	ldr.w	sl, [ip]
 8007980:	b2a3      	uxth	r3, r4
 8007982:	fa1f fa8a 	uxth.w	sl, sl
 8007986:	fb0b a303 	mla	r3, fp, r3, sl
 800798a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800798e:	f8dc 4000 	ldr.w	r4, [ip]
 8007992:	4443      	add	r3, r8
 8007994:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007998:	fb0b 840a 	mla	r4, fp, sl, r8
 800799c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80079a0:	46e2      	mov	sl, ip
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80079a8:	454f      	cmp	r7, r9
 80079aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80079ae:	f84a 3b04 	str.w	r3, [sl], #4
 80079b2:	d82b      	bhi.n	8007a0c <__multiply+0x120>
 80079b4:	f8cc 8004 	str.w	r8, [ip, #4]
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80079be:	3204      	adds	r2, #4
 80079c0:	f1ba 0f00 	cmp.w	sl, #0
 80079c4:	d020      	beq.n	8007a08 <__multiply+0x11c>
 80079c6:	682b      	ldr	r3, [r5, #0]
 80079c8:	4689      	mov	r9, r1
 80079ca:	46a8      	mov	r8, r5
 80079cc:	f04f 0b00 	mov.w	fp, #0
 80079d0:	f8b9 c000 	ldrh.w	ip, [r9]
 80079d4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80079d8:	fb0a 440c 	mla	r4, sl, ip, r4
 80079dc:	445c      	add	r4, fp
 80079de:	46c4      	mov	ip, r8
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80079e6:	f84c 3b04 	str.w	r3, [ip], #4
 80079ea:	f859 3b04 	ldr.w	r3, [r9], #4
 80079ee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	fb0a b303 	mla	r3, sl, r3, fp
 80079f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079fc:	454f      	cmp	r7, r9
 80079fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007a02:	d805      	bhi.n	8007a10 <__multiply+0x124>
 8007a04:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a08:	3504      	adds	r5, #4
 8007a0a:	e79b      	b.n	8007944 <__multiply+0x58>
 8007a0c:	46d4      	mov	ip, sl
 8007a0e:	e7b3      	b.n	8007978 <__multiply+0x8c>
 8007a10:	46e0      	mov	r8, ip
 8007a12:	e7dd      	b.n	80079d0 <__multiply+0xe4>
 8007a14:	3e01      	subs	r6, #1
 8007a16:	e799      	b.n	800794c <__multiply+0x60>

08007a18 <__pow5mult>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	f012 0203 	ands.w	r2, r2, #3
 8007a22:	4606      	mov	r6, r0
 8007a24:	460f      	mov	r7, r1
 8007a26:	d007      	beq.n	8007a38 <__pow5mult+0x20>
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	4c21      	ldr	r4, [pc, #132]	; (8007ab0 <__pow5mult+0x98>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a32:	f7ff fe8b 	bl	800774c <__multadd>
 8007a36:	4607      	mov	r7, r0
 8007a38:	10ad      	asrs	r5, r5, #2
 8007a3a:	d035      	beq.n	8007aa8 <__pow5mult+0x90>
 8007a3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a3e:	b93c      	cbnz	r4, 8007a50 <__pow5mult+0x38>
 8007a40:	2010      	movs	r0, #16
 8007a42:	f7ff fe13 	bl	800766c <malloc>
 8007a46:	6270      	str	r0, [r6, #36]	; 0x24
 8007a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a4c:	6004      	str	r4, [r0, #0]
 8007a4e:	60c4      	str	r4, [r0, #12]
 8007a50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a58:	b94c      	cbnz	r4, 8007a6e <__pow5mult+0x56>
 8007a5a:	f240 2171 	movw	r1, #625	; 0x271
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff ff3b 	bl	80078da <__i2b>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	07eb      	lsls	r3, r5, #31
 8007a74:	d50a      	bpl.n	8007a8c <__pow5mult+0x74>
 8007a76:	4639      	mov	r1, r7
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff ff36 	bl	80078ec <__multiply>
 8007a80:	4639      	mov	r1, r7
 8007a82:	4681      	mov	r9, r0
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7ff fe4a 	bl	800771e <_Bfree>
 8007a8a:	464f      	mov	r7, r9
 8007a8c:	106d      	asrs	r5, r5, #1
 8007a8e:	d00b      	beq.n	8007aa8 <__pow5mult+0x90>
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	b938      	cbnz	r0, 8007aa4 <__pow5mult+0x8c>
 8007a94:	4622      	mov	r2, r4
 8007a96:	4621      	mov	r1, r4
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff ff27 	bl	80078ec <__multiply>
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	f8c0 8000 	str.w	r8, [r0]
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	e7e4      	b.n	8007a72 <__pow5mult+0x5a>
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aae:	bf00      	nop
 8007ab0:	08010358 	.word	0x08010358

08007ab4 <__lshift>:
 8007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	6849      	ldr	r1, [r1, #4]
 8007ac2:	eb0a 0903 	add.w	r9, sl, r3
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	4607      	mov	r7, r0
 8007aca:	4616      	mov	r6, r2
 8007acc:	f109 0501 	add.w	r5, r9, #1
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	db32      	blt.n	8007b3a <__lshift+0x86>
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff fdee 	bl	80076b6 <_Balloc>
 8007ada:	2300      	movs	r3, #0
 8007adc:	4680      	mov	r8, r0
 8007ade:	f100 0114 	add.w	r1, r0, #20
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4553      	cmp	r3, sl
 8007ae6:	db2b      	blt.n	8007b40 <__lshift+0x8c>
 8007ae8:	6920      	ldr	r0, [r4, #16]
 8007aea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007aee:	f104 0314 	add.w	r3, r4, #20
 8007af2:	f016 021f 	ands.w	r2, r6, #31
 8007af6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007afa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007afe:	d025      	beq.n	8007b4c <__lshift+0x98>
 8007b00:	f1c2 0e20 	rsb	lr, r2, #32
 8007b04:	2000      	movs	r0, #0
 8007b06:	681e      	ldr	r6, [r3, #0]
 8007b08:	468a      	mov	sl, r1
 8007b0a:	4096      	lsls	r6, r2
 8007b0c:	4330      	orrs	r0, r6
 8007b0e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b12:	f853 0b04 	ldr.w	r0, [r3], #4
 8007b16:	459c      	cmp	ip, r3
 8007b18:	fa20 f00e 	lsr.w	r0, r0, lr
 8007b1c:	d814      	bhi.n	8007b48 <__lshift+0x94>
 8007b1e:	6048      	str	r0, [r1, #4]
 8007b20:	b108      	cbz	r0, 8007b26 <__lshift+0x72>
 8007b22:	f109 0502 	add.w	r5, r9, #2
 8007b26:	3d01      	subs	r5, #1
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f7ff fdf5 	bl	800771e <_Bfree>
 8007b34:	4640      	mov	r0, r8
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	3101      	adds	r1, #1
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	e7c7      	b.n	8007ad0 <__lshift+0x1c>
 8007b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b44:	3301      	adds	r3, #1
 8007b46:	e7cd      	b.n	8007ae4 <__lshift+0x30>
 8007b48:	4651      	mov	r1, sl
 8007b4a:	e7dc      	b.n	8007b06 <__lshift+0x52>
 8007b4c:	3904      	subs	r1, #4
 8007b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b52:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b56:	459c      	cmp	ip, r3
 8007b58:	d8f9      	bhi.n	8007b4e <__lshift+0x9a>
 8007b5a:	e7e4      	b.n	8007b26 <__lshift+0x72>

08007b5c <__mcmp>:
 8007b5c:	6903      	ldr	r3, [r0, #16]
 8007b5e:	690a      	ldr	r2, [r1, #16]
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	b530      	push	{r4, r5, lr}
 8007b64:	d10c      	bne.n	8007b80 <__mcmp+0x24>
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	3014      	adds	r0, #20
 8007b6a:	3114      	adds	r1, #20
 8007b6c:	1884      	adds	r4, r0, r2
 8007b6e:	4411      	add	r1, r2
 8007b70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b78:	4295      	cmp	r5, r2
 8007b7a:	d003      	beq.n	8007b84 <__mcmp+0x28>
 8007b7c:	d305      	bcc.n	8007b8a <__mcmp+0x2e>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd30      	pop	{r4, r5, pc}
 8007b84:	42a0      	cmp	r0, r4
 8007b86:	d3f3      	bcc.n	8007b70 <__mcmp+0x14>
 8007b88:	e7fa      	b.n	8007b80 <__mcmp+0x24>
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b8e:	e7f7      	b.n	8007b80 <__mcmp+0x24>

08007b90 <__mdiff>:
 8007b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b94:	460d      	mov	r5, r1
 8007b96:	4607      	mov	r7, r0
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	f7ff ffdd 	bl	8007b5c <__mcmp>
 8007ba2:	1e06      	subs	r6, r0, #0
 8007ba4:	d108      	bne.n	8007bb8 <__mdiff+0x28>
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff fd84 	bl	80076b6 <_Balloc>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb8:	bfa4      	itt	ge
 8007bba:	4623      	movge	r3, r4
 8007bbc:	462c      	movge	r4, r5
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	6861      	ldr	r1, [r4, #4]
 8007bc2:	bfa6      	itte	ge
 8007bc4:	461d      	movge	r5, r3
 8007bc6:	2600      	movge	r6, #0
 8007bc8:	2601      	movlt	r6, #1
 8007bca:	f7ff fd74 	bl	80076b6 <_Balloc>
 8007bce:	692b      	ldr	r3, [r5, #16]
 8007bd0:	60c6      	str	r6, [r0, #12]
 8007bd2:	6926      	ldr	r6, [r4, #16]
 8007bd4:	f105 0914 	add.w	r9, r5, #20
 8007bd8:	f104 0214 	add.w	r2, r4, #20
 8007bdc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007be0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007be4:	f100 0514 	add.w	r5, r0, #20
 8007be8:	f04f 0e00 	mov.w	lr, #0
 8007bec:	f852 ab04 	ldr.w	sl, [r2], #4
 8007bf0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007bf4:	fa1e f18a 	uxtah	r1, lr, sl
 8007bf8:	b2a3      	uxth	r3, r4
 8007bfa:	1ac9      	subs	r1, r1, r3
 8007bfc:	0c23      	lsrs	r3, r4, #16
 8007bfe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007c02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007c06:	b289      	uxth	r1, r1
 8007c08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007c0c:	45c8      	cmp	r8, r9
 8007c0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007c12:	4694      	mov	ip, r2
 8007c14:	f845 3b04 	str.w	r3, [r5], #4
 8007c18:	d8e8      	bhi.n	8007bec <__mdiff+0x5c>
 8007c1a:	45bc      	cmp	ip, r7
 8007c1c:	d304      	bcc.n	8007c28 <__mdiff+0x98>
 8007c1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007c22:	b183      	cbz	r3, 8007c46 <__mdiff+0xb6>
 8007c24:	6106      	str	r6, [r0, #16]
 8007c26:	e7c5      	b.n	8007bb4 <__mdiff+0x24>
 8007c28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c2c:	fa1e f381 	uxtah	r3, lr, r1
 8007c30:	141a      	asrs	r2, r3, #16
 8007c32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007c40:	f845 3b04 	str.w	r3, [r5], #4
 8007c44:	e7e9      	b.n	8007c1a <__mdiff+0x8a>
 8007c46:	3e01      	subs	r6, #1
 8007c48:	e7e9      	b.n	8007c1e <__mdiff+0x8e>
	...

08007c4c <__ulp>:
 8007c4c:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <__ulp+0x4c>)
 8007c4e:	ee10 2a90 	vmov	r2, s1
 8007c52:	401a      	ands	r2, r3
 8007c54:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dd04      	ble.n	8007c66 <__ulp+0x1a>
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	4619      	mov	r1, r3
 8007c60:	ec41 0b10 	vmov	d0, r0, r1
 8007c64:	4770      	bx	lr
 8007c66:	425b      	negs	r3, r3
 8007c68:	151b      	asrs	r3, r3, #20
 8007c6a:	2b13      	cmp	r3, #19
 8007c6c:	f04f 0000 	mov.w	r0, #0
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	dc04      	bgt.n	8007c80 <__ulp+0x34>
 8007c76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c7a:	fa42 f103 	asr.w	r1, r2, r3
 8007c7e:	e7ef      	b.n	8007c60 <__ulp+0x14>
 8007c80:	3b14      	subs	r3, #20
 8007c82:	2b1e      	cmp	r3, #30
 8007c84:	f04f 0201 	mov.w	r2, #1
 8007c88:	bfda      	itte	le
 8007c8a:	f1c3 031f 	rsble	r3, r3, #31
 8007c8e:	fa02 f303 	lslle.w	r3, r2, r3
 8007c92:	4613      	movgt	r3, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	e7e3      	b.n	8007c60 <__ulp+0x14>
 8007c98:	7ff00000 	.word	0x7ff00000

08007c9c <__b2d>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	6905      	ldr	r5, [r0, #16]
 8007ca0:	f100 0714 	add.w	r7, r0, #20
 8007ca4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007ca8:	1f2e      	subs	r6, r5, #4
 8007caa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7ff fdc5 	bl	800783e <__hi0bits>
 8007cb4:	f1c0 0320 	rsb	r3, r0, #32
 8007cb8:	280a      	cmp	r0, #10
 8007cba:	600b      	str	r3, [r1, #0]
 8007cbc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007d34 <__b2d+0x98>
 8007cc0:	dc14      	bgt.n	8007cec <__b2d+0x50>
 8007cc2:	f1c0 0e0b 	rsb	lr, r0, #11
 8007cc6:	fa24 f10e 	lsr.w	r1, r4, lr
 8007cca:	42b7      	cmp	r7, r6
 8007ccc:	ea41 030c 	orr.w	r3, r1, ip
 8007cd0:	bf34      	ite	cc
 8007cd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cd6:	2100      	movcs	r1, #0
 8007cd8:	3015      	adds	r0, #21
 8007cda:	fa04 f000 	lsl.w	r0, r4, r0
 8007cde:	fa21 f10e 	lsr.w	r1, r1, lr
 8007ce2:	ea40 0201 	orr.w	r2, r0, r1
 8007ce6:	ec43 2b10 	vmov	d0, r2, r3
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cec:	42b7      	cmp	r7, r6
 8007cee:	bf3a      	itte	cc
 8007cf0:	f1a5 0608 	subcc.w	r6, r5, #8
 8007cf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cf8:	2100      	movcs	r1, #0
 8007cfa:	380b      	subs	r0, #11
 8007cfc:	d015      	beq.n	8007d2a <__b2d+0x8e>
 8007cfe:	4084      	lsls	r4, r0
 8007d00:	f1c0 0520 	rsb	r5, r0, #32
 8007d04:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007d08:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007d0c:	42be      	cmp	r6, r7
 8007d0e:	fa21 fc05 	lsr.w	ip, r1, r5
 8007d12:	ea44 030c 	orr.w	r3, r4, ip
 8007d16:	bf8c      	ite	hi
 8007d18:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007d1c:	2400      	movls	r4, #0
 8007d1e:	fa01 f000 	lsl.w	r0, r1, r0
 8007d22:	40ec      	lsrs	r4, r5
 8007d24:	ea40 0204 	orr.w	r2, r0, r4
 8007d28:	e7dd      	b.n	8007ce6 <__b2d+0x4a>
 8007d2a:	ea44 030c 	orr.w	r3, r4, ip
 8007d2e:	460a      	mov	r2, r1
 8007d30:	e7d9      	b.n	8007ce6 <__b2d+0x4a>
 8007d32:	bf00      	nop
 8007d34:	3ff00000 	.word	0x3ff00000

08007d38 <__d2b>:
 8007d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	2101      	movs	r1, #1
 8007d40:	ec59 8b10 	vmov	r8, r9, d0
 8007d44:	4615      	mov	r5, r2
 8007d46:	f7ff fcb6 	bl	80076b6 <_Balloc>
 8007d4a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d4e:	4607      	mov	r7, r0
 8007d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d54:	bb34      	cbnz	r4, 8007da4 <__d2b+0x6c>
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f1b8 0300 	subs.w	r3, r8, #0
 8007d5c:	d027      	beq.n	8007dae <__d2b+0x76>
 8007d5e:	a802      	add	r0, sp, #8
 8007d60:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007d64:	f7ff fd8a 	bl	800787c <__lo0bits>
 8007d68:	9900      	ldr	r1, [sp, #0]
 8007d6a:	b1f0      	cbz	r0, 8007daa <__d2b+0x72>
 8007d6c:	9a01      	ldr	r2, [sp, #4]
 8007d6e:	f1c0 0320 	rsb	r3, r0, #32
 8007d72:	fa02 f303 	lsl.w	r3, r2, r3
 8007d76:	430b      	orrs	r3, r1
 8007d78:	40c2      	lsrs	r2, r0
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	9201      	str	r2, [sp, #4]
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bf14      	ite	ne
 8007d86:	2102      	movne	r1, #2
 8007d88:	2101      	moveq	r1, #1
 8007d8a:	6139      	str	r1, [r7, #16]
 8007d8c:	b1c4      	cbz	r4, 8007dc0 <__d2b+0x88>
 8007d8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007d92:	4404      	add	r4, r0
 8007d94:	6034      	str	r4, [r6, #0]
 8007d96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d9a:	6028      	str	r0, [r5, #0]
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	b003      	add	sp, #12
 8007da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da8:	e7d5      	b.n	8007d56 <__d2b+0x1e>
 8007daa:	6179      	str	r1, [r7, #20]
 8007dac:	e7e7      	b.n	8007d7e <__d2b+0x46>
 8007dae:	a801      	add	r0, sp, #4
 8007db0:	f7ff fd64 	bl	800787c <__lo0bits>
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	2101      	movs	r1, #1
 8007dba:	6139      	str	r1, [r7, #16]
 8007dbc:	3020      	adds	r0, #32
 8007dbe:	e7e5      	b.n	8007d8c <__d2b+0x54>
 8007dc0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007dc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dc8:	6030      	str	r0, [r6, #0]
 8007dca:	6918      	ldr	r0, [r3, #16]
 8007dcc:	f7ff fd37 	bl	800783e <__hi0bits>
 8007dd0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007dd4:	e7e1      	b.n	8007d9a <__d2b+0x62>

08007dd6 <__ratio>:
 8007dd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	4688      	mov	r8, r1
 8007ddc:	4669      	mov	r1, sp
 8007dde:	4681      	mov	r9, r0
 8007de0:	f7ff ff5c 	bl	8007c9c <__b2d>
 8007de4:	a901      	add	r1, sp, #4
 8007de6:	4640      	mov	r0, r8
 8007de8:	ec57 6b10 	vmov	r6, r7, d0
 8007dec:	f7ff ff56 	bl	8007c9c <__b2d>
 8007df0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007df4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007df8:	eba3 0c02 	sub.w	ip, r3, r2
 8007dfc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007e06:	ec5b ab10 	vmov	sl, fp, d0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bfce      	itee	gt
 8007e0e:	463a      	movgt	r2, r7
 8007e10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e14:	465a      	movle	r2, fp
 8007e16:	4659      	mov	r1, fp
 8007e18:	463d      	mov	r5, r7
 8007e1a:	bfd4      	ite	le
 8007e1c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007e20:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007e24:	4630      	mov	r0, r6
 8007e26:	ee10 2a10 	vmov	r2, s0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7f8 fd0d 	bl	800084c <__aeabi_ddiv>
 8007e32:	ec41 0b10 	vmov	d0, r0, r1
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e3c <__copybits>:
 8007e3c:	3901      	subs	r1, #1
 8007e3e:	b510      	push	{r4, lr}
 8007e40:	1149      	asrs	r1, r1, #5
 8007e42:	6914      	ldr	r4, [r2, #16]
 8007e44:	3101      	adds	r1, #1
 8007e46:	f102 0314 	add.w	r3, r2, #20
 8007e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e52:	42a3      	cmp	r3, r4
 8007e54:	4602      	mov	r2, r0
 8007e56:	d303      	bcc.n	8007e60 <__copybits+0x24>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	428a      	cmp	r2, r1
 8007e5c:	d305      	bcc.n	8007e6a <__copybits+0x2e>
 8007e5e:	bd10      	pop	{r4, pc}
 8007e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e64:	f840 2b04 	str.w	r2, [r0], #4
 8007e68:	e7f3      	b.n	8007e52 <__copybits+0x16>
 8007e6a:	f842 3b04 	str.w	r3, [r2], #4
 8007e6e:	e7f4      	b.n	8007e5a <__copybits+0x1e>

08007e70 <__any_on>:
 8007e70:	f100 0214 	add.w	r2, r0, #20
 8007e74:	6900      	ldr	r0, [r0, #16]
 8007e76:	114b      	asrs	r3, r1, #5
 8007e78:	4298      	cmp	r0, r3
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	db11      	blt.n	8007ea2 <__any_on+0x32>
 8007e7e:	dd0a      	ble.n	8007e96 <__any_on+0x26>
 8007e80:	f011 011f 	ands.w	r1, r1, #31
 8007e84:	d007      	beq.n	8007e96 <__any_on+0x26>
 8007e86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e8a:	fa24 f001 	lsr.w	r0, r4, r1
 8007e8e:	fa00 f101 	lsl.w	r1, r0, r1
 8007e92:	428c      	cmp	r4, r1
 8007e94:	d10b      	bne.n	8007eae <__any_on+0x3e>
 8007e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d803      	bhi.n	8007ea6 <__any_on+0x36>
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	e7f7      	b.n	8007e96 <__any_on+0x26>
 8007ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d0f5      	beq.n	8007e9a <__any_on+0x2a>
 8007eae:	2001      	movs	r0, #1
 8007eb0:	e7f6      	b.n	8007ea0 <__any_on+0x30>

08007eb2 <_calloc_r>:
 8007eb2:	b538      	push	{r3, r4, r5, lr}
 8007eb4:	fb02 f401 	mul.w	r4, r2, r1
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f000 f857 	bl	8007f6c <_malloc_r>
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	b118      	cbz	r0, 8007eca <_calloc_r+0x18>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	f7fc fd23 	bl	8004910 <memset>
 8007eca:	4628      	mov	r0, r5
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

08007ed0 <_free_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	d045      	beq.n	8007f64 <_free_r+0x94>
 8007ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007edc:	1f0c      	subs	r4, r1, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bfb8      	it	lt
 8007ee2:	18e4      	addlt	r4, r4, r3
 8007ee4:	f000 fa36 	bl	8008354 <__malloc_lock>
 8007ee8:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <_free_r+0x98>)
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	4610      	mov	r0, r2
 8007eee:	b933      	cbnz	r3, 8007efe <_free_r+0x2e>
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	6014      	str	r4, [r2, #0]
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007efa:	f000 ba2c 	b.w	8008356 <__malloc_unlock>
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	d90c      	bls.n	8007f1c <_free_r+0x4c>
 8007f02:	6821      	ldr	r1, [r4, #0]
 8007f04:	1862      	adds	r2, r4, r1
 8007f06:	4293      	cmp	r3, r2
 8007f08:	bf04      	itt	eq
 8007f0a:	681a      	ldreq	r2, [r3, #0]
 8007f0c:	685b      	ldreq	r3, [r3, #4]
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	bf04      	itt	eq
 8007f12:	1852      	addeq	r2, r2, r1
 8007f14:	6022      	streq	r2, [r4, #0]
 8007f16:	6004      	str	r4, [r0, #0]
 8007f18:	e7ec      	b.n	8007ef4 <_free_r+0x24>
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	b10a      	cbz	r2, 8007f24 <_free_r+0x54>
 8007f20:	42a2      	cmp	r2, r4
 8007f22:	d9fa      	bls.n	8007f1a <_free_r+0x4a>
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	1858      	adds	r0, r3, r1
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d10b      	bne.n	8007f44 <_free_r+0x74>
 8007f2c:	6820      	ldr	r0, [r4, #0]
 8007f2e:	4401      	add	r1, r0
 8007f30:	1858      	adds	r0, r3, r1
 8007f32:	4282      	cmp	r2, r0
 8007f34:	6019      	str	r1, [r3, #0]
 8007f36:	d1dd      	bne.n	8007ef4 <_free_r+0x24>
 8007f38:	6810      	ldr	r0, [r2, #0]
 8007f3a:	6852      	ldr	r2, [r2, #4]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	4401      	add	r1, r0
 8007f40:	6019      	str	r1, [r3, #0]
 8007f42:	e7d7      	b.n	8007ef4 <_free_r+0x24>
 8007f44:	d902      	bls.n	8007f4c <_free_r+0x7c>
 8007f46:	230c      	movs	r3, #12
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	e7d3      	b.n	8007ef4 <_free_r+0x24>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	1821      	adds	r1, r4, r0
 8007f50:	428a      	cmp	r2, r1
 8007f52:	bf04      	itt	eq
 8007f54:	6811      	ldreq	r1, [r2, #0]
 8007f56:	6852      	ldreq	r2, [r2, #4]
 8007f58:	6062      	str	r2, [r4, #4]
 8007f5a:	bf04      	itt	eq
 8007f5c:	1809      	addeq	r1, r1, r0
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	605c      	str	r4, [r3, #4]
 8007f62:	e7c7      	b.n	8007ef4 <_free_r+0x24>
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	200009d8 	.word	0x200009d8

08007f6c <_malloc_r>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	1ccd      	adds	r5, r1, #3
 8007f70:	f025 0503 	bic.w	r5, r5, #3
 8007f74:	3508      	adds	r5, #8
 8007f76:	2d0c      	cmp	r5, #12
 8007f78:	bf38      	it	cc
 8007f7a:	250c      	movcc	r5, #12
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	4606      	mov	r6, r0
 8007f80:	db01      	blt.n	8007f86 <_malloc_r+0x1a>
 8007f82:	42a9      	cmp	r1, r5
 8007f84:	d903      	bls.n	8007f8e <_malloc_r+0x22>
 8007f86:	230c      	movs	r3, #12
 8007f88:	6033      	str	r3, [r6, #0]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	f000 f9e1 	bl	8008354 <__malloc_lock>
 8007f92:	4a21      	ldr	r2, [pc, #132]	; (8008018 <_malloc_r+0xac>)
 8007f94:	6814      	ldr	r4, [r2, #0]
 8007f96:	4621      	mov	r1, r4
 8007f98:	b991      	cbnz	r1, 8007fc0 <_malloc_r+0x54>
 8007f9a:	4c20      	ldr	r4, [pc, #128]	; (800801c <_malloc_r+0xb0>)
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	b91b      	cbnz	r3, 8007fa8 <_malloc_r+0x3c>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f98f 	bl	80082c4 <_sbrk_r>
 8007fa6:	6020      	str	r0, [r4, #0]
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 f98a 	bl	80082c4 <_sbrk_r>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d124      	bne.n	8007ffe <_malloc_r+0x92>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 f9cc 	bl	8008356 <__malloc_unlock>
 8007fbe:	e7e4      	b.n	8007f8a <_malloc_r+0x1e>
 8007fc0:	680b      	ldr	r3, [r1, #0]
 8007fc2:	1b5b      	subs	r3, r3, r5
 8007fc4:	d418      	bmi.n	8007ff8 <_malloc_r+0x8c>
 8007fc6:	2b0b      	cmp	r3, #11
 8007fc8:	d90f      	bls.n	8007fea <_malloc_r+0x7e>
 8007fca:	600b      	str	r3, [r1, #0]
 8007fcc:	50cd      	str	r5, [r1, r3]
 8007fce:	18cc      	adds	r4, r1, r3
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f000 f9c0 	bl	8008356 <__malloc_unlock>
 8007fd6:	f104 000b 	add.w	r0, r4, #11
 8007fda:	1d23      	adds	r3, r4, #4
 8007fdc:	f020 0007 	bic.w	r0, r0, #7
 8007fe0:	1ac3      	subs	r3, r0, r3
 8007fe2:	d0d3      	beq.n	8007f8c <_malloc_r+0x20>
 8007fe4:	425a      	negs	r2, r3
 8007fe6:	50e2      	str	r2, [r4, r3]
 8007fe8:	e7d0      	b.n	8007f8c <_malloc_r+0x20>
 8007fea:	428c      	cmp	r4, r1
 8007fec:	684b      	ldr	r3, [r1, #4]
 8007fee:	bf16      	itet	ne
 8007ff0:	6063      	strne	r3, [r4, #4]
 8007ff2:	6013      	streq	r3, [r2, #0]
 8007ff4:	460c      	movne	r4, r1
 8007ff6:	e7eb      	b.n	8007fd0 <_malloc_r+0x64>
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	6849      	ldr	r1, [r1, #4]
 8007ffc:	e7cc      	b.n	8007f98 <_malloc_r+0x2c>
 8007ffe:	1cc4      	adds	r4, r0, #3
 8008000:	f024 0403 	bic.w	r4, r4, #3
 8008004:	42a0      	cmp	r0, r4
 8008006:	d005      	beq.n	8008014 <_malloc_r+0xa8>
 8008008:	1a21      	subs	r1, r4, r0
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f95a 	bl	80082c4 <_sbrk_r>
 8008010:	3001      	adds	r0, #1
 8008012:	d0cf      	beq.n	8007fb4 <_malloc_r+0x48>
 8008014:	6025      	str	r5, [r4, #0]
 8008016:	e7db      	b.n	8007fd0 <_malloc_r+0x64>
 8008018:	200009d8 	.word	0x200009d8
 800801c:	200009dc 	.word	0x200009dc

08008020 <__ssputs_r>:
 8008020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	688e      	ldr	r6, [r1, #8]
 8008026:	429e      	cmp	r6, r3
 8008028:	4682      	mov	sl, r0
 800802a:	460c      	mov	r4, r1
 800802c:	4690      	mov	r8, r2
 800802e:	4699      	mov	r9, r3
 8008030:	d837      	bhi.n	80080a2 <__ssputs_r+0x82>
 8008032:	898a      	ldrh	r2, [r1, #12]
 8008034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008038:	d031      	beq.n	800809e <__ssputs_r+0x7e>
 800803a:	6825      	ldr	r5, [r4, #0]
 800803c:	6909      	ldr	r1, [r1, #16]
 800803e:	1a6f      	subs	r7, r5, r1
 8008040:	6965      	ldr	r5, [r4, #20]
 8008042:	2302      	movs	r3, #2
 8008044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008048:	fb95 f5f3 	sdiv	r5, r5, r3
 800804c:	f109 0301 	add.w	r3, r9, #1
 8008050:	443b      	add	r3, r7
 8008052:	429d      	cmp	r5, r3
 8008054:	bf38      	it	cc
 8008056:	461d      	movcc	r5, r3
 8008058:	0553      	lsls	r3, r2, #21
 800805a:	d530      	bpl.n	80080be <__ssputs_r+0x9e>
 800805c:	4629      	mov	r1, r5
 800805e:	f7ff ff85 	bl	8007f6c <_malloc_r>
 8008062:	4606      	mov	r6, r0
 8008064:	b950      	cbnz	r0, 800807c <__ssputs_r+0x5c>
 8008066:	230c      	movs	r3, #12
 8008068:	f8ca 3000 	str.w	r3, [sl]
 800806c:	89a3      	ldrh	r3, [r4, #12]
 800806e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807c:	463a      	mov	r2, r7
 800807e:	6921      	ldr	r1, [r4, #16]
 8008080:	f7ff fb0e 	bl	80076a0 <memcpy>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800808a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	6126      	str	r6, [r4, #16]
 8008092:	6165      	str	r5, [r4, #20]
 8008094:	443e      	add	r6, r7
 8008096:	1bed      	subs	r5, r5, r7
 8008098:	6026      	str	r6, [r4, #0]
 800809a:	60a5      	str	r5, [r4, #8]
 800809c:	464e      	mov	r6, r9
 800809e:	454e      	cmp	r6, r9
 80080a0:	d900      	bls.n	80080a4 <__ssputs_r+0x84>
 80080a2:	464e      	mov	r6, r9
 80080a4:	4632      	mov	r2, r6
 80080a6:	4641      	mov	r1, r8
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	f000 f93a 	bl	8008322 <memmove>
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	1b9b      	subs	r3, r3, r6
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	441e      	add	r6, r3
 80080b8:	6026      	str	r6, [r4, #0]
 80080ba:	2000      	movs	r0, #0
 80080bc:	e7dc      	b.n	8008078 <__ssputs_r+0x58>
 80080be:	462a      	mov	r2, r5
 80080c0:	f000 f94a 	bl	8008358 <_realloc_r>
 80080c4:	4606      	mov	r6, r0
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d1e2      	bne.n	8008090 <__ssputs_r+0x70>
 80080ca:	6921      	ldr	r1, [r4, #16]
 80080cc:	4650      	mov	r0, sl
 80080ce:	f7ff feff 	bl	8007ed0 <_free_r>
 80080d2:	e7c8      	b.n	8008066 <__ssputs_r+0x46>

080080d4 <_svfiprintf_r>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	461d      	mov	r5, r3
 80080da:	898b      	ldrh	r3, [r1, #12]
 80080dc:	061f      	lsls	r7, r3, #24
 80080de:	b09d      	sub	sp, #116	; 0x74
 80080e0:	4680      	mov	r8, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	4616      	mov	r6, r2
 80080e6:	d50f      	bpl.n	8008108 <_svfiprintf_r+0x34>
 80080e8:	690b      	ldr	r3, [r1, #16]
 80080ea:	b96b      	cbnz	r3, 8008108 <_svfiprintf_r+0x34>
 80080ec:	2140      	movs	r1, #64	; 0x40
 80080ee:	f7ff ff3d 	bl	8007f6c <_malloc_r>
 80080f2:	6020      	str	r0, [r4, #0]
 80080f4:	6120      	str	r0, [r4, #16]
 80080f6:	b928      	cbnz	r0, 8008104 <_svfiprintf_r+0x30>
 80080f8:	230c      	movs	r3, #12
 80080fa:	f8c8 3000 	str.w	r3, [r8]
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008102:	e0c8      	b.n	8008296 <_svfiprintf_r+0x1c2>
 8008104:	2340      	movs	r3, #64	; 0x40
 8008106:	6163      	str	r3, [r4, #20]
 8008108:	2300      	movs	r3, #0
 800810a:	9309      	str	r3, [sp, #36]	; 0x24
 800810c:	2320      	movs	r3, #32
 800810e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008112:	2330      	movs	r3, #48	; 0x30
 8008114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008118:	9503      	str	r5, [sp, #12]
 800811a:	f04f 0b01 	mov.w	fp, #1
 800811e:	4637      	mov	r7, r6
 8008120:	463d      	mov	r5, r7
 8008122:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008126:	b10b      	cbz	r3, 800812c <_svfiprintf_r+0x58>
 8008128:	2b25      	cmp	r3, #37	; 0x25
 800812a:	d13e      	bne.n	80081aa <_svfiprintf_r+0xd6>
 800812c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008130:	d00b      	beq.n	800814a <_svfiprintf_r+0x76>
 8008132:	4653      	mov	r3, sl
 8008134:	4632      	mov	r2, r6
 8008136:	4621      	mov	r1, r4
 8008138:	4640      	mov	r0, r8
 800813a:	f7ff ff71 	bl	8008020 <__ssputs_r>
 800813e:	3001      	adds	r0, #1
 8008140:	f000 80a4 	beq.w	800828c <_svfiprintf_r+0x1b8>
 8008144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008146:	4453      	add	r3, sl
 8008148:	9309      	str	r3, [sp, #36]	; 0x24
 800814a:	783b      	ldrb	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 809d 	beq.w	800828c <_svfiprintf_r+0x1b8>
 8008152:	2300      	movs	r3, #0
 8008154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	9307      	str	r3, [sp, #28]
 8008160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008164:	931a      	str	r3, [sp, #104]	; 0x68
 8008166:	462f      	mov	r7, r5
 8008168:	2205      	movs	r2, #5
 800816a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800816e:	4850      	ldr	r0, [pc, #320]	; (80082b0 <_svfiprintf_r+0x1dc>)
 8008170:	f7f8 f836 	bl	80001e0 <memchr>
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	b9d0      	cbnz	r0, 80081ae <_svfiprintf_r+0xda>
 8008178:	06d9      	lsls	r1, r3, #27
 800817a:	bf44      	itt	mi
 800817c:	2220      	movmi	r2, #32
 800817e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008182:	071a      	lsls	r2, r3, #28
 8008184:	bf44      	itt	mi
 8008186:	222b      	movmi	r2, #43	; 0x2b
 8008188:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800818c:	782a      	ldrb	r2, [r5, #0]
 800818e:	2a2a      	cmp	r2, #42	; 0x2a
 8008190:	d015      	beq.n	80081be <_svfiprintf_r+0xea>
 8008192:	9a07      	ldr	r2, [sp, #28]
 8008194:	462f      	mov	r7, r5
 8008196:	2000      	movs	r0, #0
 8008198:	250a      	movs	r5, #10
 800819a:	4639      	mov	r1, r7
 800819c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a0:	3b30      	subs	r3, #48	; 0x30
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d94d      	bls.n	8008242 <_svfiprintf_r+0x16e>
 80081a6:	b1b8      	cbz	r0, 80081d8 <_svfiprintf_r+0x104>
 80081a8:	e00f      	b.n	80081ca <_svfiprintf_r+0xf6>
 80081aa:	462f      	mov	r7, r5
 80081ac:	e7b8      	b.n	8008120 <_svfiprintf_r+0x4c>
 80081ae:	4a40      	ldr	r2, [pc, #256]	; (80082b0 <_svfiprintf_r+0x1dc>)
 80081b0:	1a80      	subs	r0, r0, r2
 80081b2:	fa0b f000 	lsl.w	r0, fp, r0
 80081b6:	4318      	orrs	r0, r3
 80081b8:	9004      	str	r0, [sp, #16]
 80081ba:	463d      	mov	r5, r7
 80081bc:	e7d3      	b.n	8008166 <_svfiprintf_r+0x92>
 80081be:	9a03      	ldr	r2, [sp, #12]
 80081c0:	1d11      	adds	r1, r2, #4
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	9103      	str	r1, [sp, #12]
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	db01      	blt.n	80081ce <_svfiprintf_r+0xfa>
 80081ca:	9207      	str	r2, [sp, #28]
 80081cc:	e004      	b.n	80081d8 <_svfiprintf_r+0x104>
 80081ce:	4252      	negs	r2, r2
 80081d0:	f043 0302 	orr.w	r3, r3, #2
 80081d4:	9207      	str	r2, [sp, #28]
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	783b      	ldrb	r3, [r7, #0]
 80081da:	2b2e      	cmp	r3, #46	; 0x2e
 80081dc:	d10c      	bne.n	80081f8 <_svfiprintf_r+0x124>
 80081de:	787b      	ldrb	r3, [r7, #1]
 80081e0:	2b2a      	cmp	r3, #42	; 0x2a
 80081e2:	d133      	bne.n	800824c <_svfiprintf_r+0x178>
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	9203      	str	r2, [sp, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfb8      	it	lt
 80081f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081f4:	3702      	adds	r7, #2
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	4d2e      	ldr	r5, [pc, #184]	; (80082b4 <_svfiprintf_r+0x1e0>)
 80081fa:	7839      	ldrb	r1, [r7, #0]
 80081fc:	2203      	movs	r2, #3
 80081fe:	4628      	mov	r0, r5
 8008200:	f7f7 ffee 	bl	80001e0 <memchr>
 8008204:	b138      	cbz	r0, 8008216 <_svfiprintf_r+0x142>
 8008206:	2340      	movs	r3, #64	; 0x40
 8008208:	1b40      	subs	r0, r0, r5
 800820a:	fa03 f000 	lsl.w	r0, r3, r0
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	4303      	orrs	r3, r0
 8008212:	3701      	adds	r7, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	7839      	ldrb	r1, [r7, #0]
 8008218:	4827      	ldr	r0, [pc, #156]	; (80082b8 <_svfiprintf_r+0x1e4>)
 800821a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800821e:	2206      	movs	r2, #6
 8008220:	1c7e      	adds	r6, r7, #1
 8008222:	f7f7 ffdd 	bl	80001e0 <memchr>
 8008226:	2800      	cmp	r0, #0
 8008228:	d038      	beq.n	800829c <_svfiprintf_r+0x1c8>
 800822a:	4b24      	ldr	r3, [pc, #144]	; (80082bc <_svfiprintf_r+0x1e8>)
 800822c:	bb13      	cbnz	r3, 8008274 <_svfiprintf_r+0x1a0>
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	3307      	adds	r3, #7
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	3308      	adds	r3, #8
 8008238:	9303      	str	r3, [sp, #12]
 800823a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823c:	444b      	add	r3, r9
 800823e:	9309      	str	r3, [sp, #36]	; 0x24
 8008240:	e76d      	b.n	800811e <_svfiprintf_r+0x4a>
 8008242:	fb05 3202 	mla	r2, r5, r2, r3
 8008246:	2001      	movs	r0, #1
 8008248:	460f      	mov	r7, r1
 800824a:	e7a6      	b.n	800819a <_svfiprintf_r+0xc6>
 800824c:	2300      	movs	r3, #0
 800824e:	3701      	adds	r7, #1
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	4619      	mov	r1, r3
 8008254:	250a      	movs	r5, #10
 8008256:	4638      	mov	r0, r7
 8008258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800825c:	3a30      	subs	r2, #48	; 0x30
 800825e:	2a09      	cmp	r2, #9
 8008260:	d903      	bls.n	800826a <_svfiprintf_r+0x196>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0c8      	beq.n	80081f8 <_svfiprintf_r+0x124>
 8008266:	9105      	str	r1, [sp, #20]
 8008268:	e7c6      	b.n	80081f8 <_svfiprintf_r+0x124>
 800826a:	fb05 2101 	mla	r1, r5, r1, r2
 800826e:	2301      	movs	r3, #1
 8008270:	4607      	mov	r7, r0
 8008272:	e7f0      	b.n	8008256 <_svfiprintf_r+0x182>
 8008274:	ab03      	add	r3, sp, #12
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4622      	mov	r2, r4
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <_svfiprintf_r+0x1ec>)
 800827c:	a904      	add	r1, sp, #16
 800827e:	4640      	mov	r0, r8
 8008280:	f7fc fbe2 	bl	8004a48 <_printf_float>
 8008284:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008288:	4681      	mov	r9, r0
 800828a:	d1d6      	bne.n	800823a <_svfiprintf_r+0x166>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	065b      	lsls	r3, r3, #25
 8008290:	f53f af35 	bmi.w	80080fe <_svfiprintf_r+0x2a>
 8008294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008296:	b01d      	add	sp, #116	; 0x74
 8008298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829c:	ab03      	add	r3, sp, #12
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	4622      	mov	r2, r4
 80082a2:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <_svfiprintf_r+0x1ec>)
 80082a4:	a904      	add	r1, sp, #16
 80082a6:	4640      	mov	r0, r8
 80082a8:	f7fc fe84 	bl	8004fb4 <_printf_i>
 80082ac:	e7ea      	b.n	8008284 <_svfiprintf_r+0x1b0>
 80082ae:	bf00      	nop
 80082b0:	08010364 	.word	0x08010364
 80082b4:	0801036a 	.word	0x0801036a
 80082b8:	0801036e 	.word	0x0801036e
 80082bc:	08004a49 	.word	0x08004a49
 80082c0:	08008021 	.word	0x08008021

080082c4 <_sbrk_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4c06      	ldr	r4, [pc, #24]	; (80082e0 <_sbrk_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4605      	mov	r5, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	f7f9 fc3a 	bl	8001b48 <_sbrk>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_sbrk_r+0x1a>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	b103      	cbz	r3, 80082de <_sbrk_r+0x1a>
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	2000a1cc 	.word	0x2000a1cc

080082e4 <strncmp>:
 80082e4:	b510      	push	{r4, lr}
 80082e6:	b16a      	cbz	r2, 8008304 <strncmp+0x20>
 80082e8:	3901      	subs	r1, #1
 80082ea:	1884      	adds	r4, r0, r2
 80082ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d103      	bne.n	8008300 <strncmp+0x1c>
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d001      	beq.n	8008300 <strncmp+0x1c>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f5      	bne.n	80082ec <strncmp+0x8>
 8008300:	1a98      	subs	r0, r3, r2
 8008302:	bd10      	pop	{r4, pc}
 8008304:	4610      	mov	r0, r2
 8008306:	e7fc      	b.n	8008302 <strncmp+0x1e>

08008308 <__ascii_wctomb>:
 8008308:	b149      	cbz	r1, 800831e <__ascii_wctomb+0x16>
 800830a:	2aff      	cmp	r2, #255	; 0xff
 800830c:	bf85      	ittet	hi
 800830e:	238a      	movhi	r3, #138	; 0x8a
 8008310:	6003      	strhi	r3, [r0, #0]
 8008312:	700a      	strbls	r2, [r1, #0]
 8008314:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008318:	bf98      	it	ls
 800831a:	2001      	movls	r0, #1
 800831c:	4770      	bx	lr
 800831e:	4608      	mov	r0, r1
 8008320:	4770      	bx	lr

08008322 <memmove>:
 8008322:	4288      	cmp	r0, r1
 8008324:	b510      	push	{r4, lr}
 8008326:	eb01 0302 	add.w	r3, r1, r2
 800832a:	d807      	bhi.n	800833c <memmove+0x1a>
 800832c:	1e42      	subs	r2, r0, #1
 800832e:	4299      	cmp	r1, r3
 8008330:	d00a      	beq.n	8008348 <memmove+0x26>
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	f802 4f01 	strb.w	r4, [r2, #1]!
 800833a:	e7f8      	b.n	800832e <memmove+0xc>
 800833c:	4283      	cmp	r3, r0
 800833e:	d9f5      	bls.n	800832c <memmove+0xa>
 8008340:	1881      	adds	r1, r0, r2
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	42d3      	cmn	r3, r2
 8008346:	d100      	bne.n	800834a <memmove+0x28>
 8008348:	bd10      	pop	{r4, pc}
 800834a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800834e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008352:	e7f7      	b.n	8008344 <memmove+0x22>

08008354 <__malloc_lock>:
 8008354:	4770      	bx	lr

08008356 <__malloc_unlock>:
 8008356:	4770      	bx	lr

08008358 <_realloc_r>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	4607      	mov	r7, r0
 800835c:	4614      	mov	r4, r2
 800835e:	460e      	mov	r6, r1
 8008360:	b921      	cbnz	r1, 800836c <_realloc_r+0x14>
 8008362:	4611      	mov	r1, r2
 8008364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008368:	f7ff be00 	b.w	8007f6c <_malloc_r>
 800836c:	b922      	cbnz	r2, 8008378 <_realloc_r+0x20>
 800836e:	f7ff fdaf 	bl	8007ed0 <_free_r>
 8008372:	4625      	mov	r5, r4
 8008374:	4628      	mov	r0, r5
 8008376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008378:	f000 f814 	bl	80083a4 <_malloc_usable_size_r>
 800837c:	42a0      	cmp	r0, r4
 800837e:	d20f      	bcs.n	80083a0 <_realloc_r+0x48>
 8008380:	4621      	mov	r1, r4
 8008382:	4638      	mov	r0, r7
 8008384:	f7ff fdf2 	bl	8007f6c <_malloc_r>
 8008388:	4605      	mov	r5, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d0f2      	beq.n	8008374 <_realloc_r+0x1c>
 800838e:	4631      	mov	r1, r6
 8008390:	4622      	mov	r2, r4
 8008392:	f7ff f985 	bl	80076a0 <memcpy>
 8008396:	4631      	mov	r1, r6
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff fd99 	bl	8007ed0 <_free_r>
 800839e:	e7e9      	b.n	8008374 <_realloc_r+0x1c>
 80083a0:	4635      	mov	r5, r6
 80083a2:	e7e7      	b.n	8008374 <_realloc_r+0x1c>

080083a4 <_malloc_usable_size_r>:
 80083a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a8:	1f18      	subs	r0, r3, #4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bfbc      	itt	lt
 80083ae:	580b      	ldrlt	r3, [r1, r0]
 80083b0:	18c0      	addlt	r0, r0, r3
 80083b2:	4770      	bx	lr

080083b4 <sqrtf>:
 80083b4:	b510      	push	{r4, lr}
 80083b6:	ed2d 8b02 	vpush	{d8}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	eeb0 8a40 	vmov.f32	s16, s0
 80083c0:	f000 f848 	bl	8008454 <__ieee754_sqrtf>
 80083c4:	4b21      	ldr	r3, [pc, #132]	; (800844c <sqrtf+0x98>)
 80083c6:	f993 4000 	ldrsb.w	r4, [r3]
 80083ca:	1c63      	adds	r3, r4, #1
 80083cc:	d02c      	beq.n	8008428 <sqrtf+0x74>
 80083ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80083d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d6:	d627      	bvs.n	8008428 <sqrtf+0x74>
 80083d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	d522      	bpl.n	8008428 <sqrtf+0x74>
 80083e2:	2301      	movs	r3, #1
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <sqrtf+0x9c>)
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	ee18 0a10 	vmov	r0, s16
 80083ee:	2300      	movs	r3, #0
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	f7f8 f8a9 	bl	8000548 <__aeabi_f2d>
 80083f6:	2200      	movs	r2, #0
 80083f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008400:	2300      	movs	r3, #0
 8008402:	b9ac      	cbnz	r4, 8008430 <sqrtf+0x7c>
 8008404:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008408:	4668      	mov	r0, sp
 800840a:	f000 f826 	bl	800845a <matherr>
 800840e:	b1b8      	cbz	r0, 8008440 <sqrtf+0x8c>
 8008410:	9b08      	ldr	r3, [sp, #32]
 8008412:	b11b      	cbz	r3, 800841c <sqrtf+0x68>
 8008414:	f7fc fa52 	bl	80048bc <__errno>
 8008418:	9b08      	ldr	r3, [sp, #32]
 800841a:	6003      	str	r3, [r0, #0]
 800841c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008420:	f7f8 fbe2 	bl	8000be8 <__aeabi_d2f>
 8008424:	ee00 0a10 	vmov	s0, r0
 8008428:	b00a      	add	sp, #40	; 0x28
 800842a:	ecbd 8b02 	vpop	{d8}
 800842e:	bd10      	pop	{r4, pc}
 8008430:	4610      	mov	r0, r2
 8008432:	4619      	mov	r1, r3
 8008434:	f7f8 fa0a 	bl	800084c <__aeabi_ddiv>
 8008438:	2c02      	cmp	r4, #2
 800843a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800843e:	d1e3      	bne.n	8008408 <sqrtf+0x54>
 8008440:	f7fc fa3c 	bl	80048bc <__errno>
 8008444:	2321      	movs	r3, #33	; 0x21
 8008446:	6003      	str	r3, [r0, #0]
 8008448:	e7e2      	b.n	8008410 <sqrtf+0x5c>
 800844a:	bf00      	nop
 800844c:	200001e4 	.word	0x200001e4
 8008450:	08010476 	.word	0x08010476

08008454 <__ieee754_sqrtf>:
 8008454:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008458:	4770      	bx	lr

0800845a <matherr>:
 800845a:	2000      	movs	r0, #0
 800845c:	4770      	bx	lr
	...

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
